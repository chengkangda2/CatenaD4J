---
Begin generate bug_id: Lang_15
num_of_hunks: 2
timeout for running: 3600
use working dir: ./working/data/Lang_15
Try to checkout Lang_15
build dir: ['./working/data/Lang_15/target/classes', './working/data/Lang_15/target/tests']
init FileManager
trace file: src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java
trying to replace old failing tests
edit: replace from 471 range 38 at src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
to
    @Test
    public void testGetTypeArguments$catena_0() {
        Map<TypeVariable<?>, Type> typeVarAssigns;
        TypeVariable<?> treeSetTypeVar;
        Type typeArg;

        typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    /***** ORIGINAL ASSERTION IS HERE *****/
        typeArg = typeVarAssigns.get(treeSetTypeVar);
        try{ Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class,
                typeVarAssigns.get(treeSetTypeVar));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        try{ Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        typeArg = typeVarAssigns.get(treeSetTypeVar);
        try{ Assert.assertEquals("Type argument of Comparable from int: " + typeArg, Integer.class,
                typeVarAssigns.get(treeSetTypeVar));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        Collection<Integer> col = Arrays.asList(new Integer[0]);
        typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        try{ Assert.assertFalse("Type var assigns for Collection from List: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

        typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);
        try{ Assert.assertTrue(typeVarAssigns.size() == 2);                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0]));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0]));               }catch(Throwable __SHOULD_BE_IGNORED){}

        typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);
        try{ Assert.assertEquals(2, typeVarAssigns.size());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testGetTypeArguments$catena_1() {
        Map<TypeVariable<?>, Type> typeVarAssigns;
        TypeVariable<?> treeSetTypeVar;
        Type typeArg;

        typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        try{ Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        typeArg = typeVarAssigns.get(treeSetTypeVar);
        Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class,
                typeVarAssigns.get(treeSetTypeVar));                                                                            /***** ORIGINAL ASSERTION IS HERE *****/

        typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        try{ Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        typeArg = typeVarAssigns.get(treeSetTypeVar);
        try{ Assert.assertEquals("Type argument of Comparable from int: " + typeArg, Integer.class,
                typeVarAssigns.get(treeSetTypeVar));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        Collection<Integer> col = Arrays.asList(new Integer[0]);
        typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        try{ Assert.assertFalse("Type var assigns for Collection from List: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

        typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);
        try{ Assert.assertTrue(typeVarAssigns.size() == 2);                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0]));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0]));               }catch(Throwable __SHOULD_BE_IGNORED){}

        typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);
        try{ Assert.assertEquals(2, typeVarAssigns.size());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testGetTypeArguments$catena_2() {
        Map<TypeVariable<?>, Type> typeVarAssigns;
        TypeVariable<?> treeSetTypeVar;
        Type typeArg;

        typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        try{ Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        typeArg = typeVarAssigns.get(treeSetTypeVar);
        try{ Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class,
                typeVarAssigns.get(treeSetTypeVar));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    /***** ORIGINAL ASSERTION IS HERE *****/
        typeArg = typeVarAssigns.get(treeSetTypeVar);
        try{ Assert.assertEquals("Type argument of Comparable from int: " + typeArg, Integer.class,
                typeVarAssigns.get(treeSetTypeVar));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        Collection<Integer> col = Arrays.asList(new Integer[0]);
        typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        try{ Assert.assertFalse("Type var assigns for Collection from List: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

        typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);
        try{ Assert.assertTrue(typeVarAssigns.size() == 2);                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0]));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0]));               }catch(Throwable __SHOULD_BE_IGNORED){}

        typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);
        try{ Assert.assertEquals(2, typeVarAssigns.size());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testGetTypeArguments$catena_3() {
        Map<TypeVariable<?>, Type> typeVarAssigns;
        TypeVariable<?> treeSetTypeVar;
        Type typeArg;

        typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        try{ Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        typeArg = typeVarAssigns.get(treeSetTypeVar);
        try{ Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class,
                typeVarAssigns.get(treeSetTypeVar));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        try{ Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        typeArg = typeVarAssigns.get(treeSetTypeVar);
        Assert.assertEquals("Type argument of Comparable from int: " + typeArg, Integer.class,
                typeVarAssigns.get(treeSetTypeVar));                                                                            /***** ORIGINAL ASSERTION IS HERE *****/

        Collection<Integer> col = Arrays.asList(new Integer[0]);
        typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        try{ Assert.assertFalse("Type var assigns for Collection from List: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

        typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);
        try{ Assert.assertTrue(typeVarAssigns.size() == 2);                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0]));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0]));               }catch(Throwable __SHOULD_BE_IGNORED){}

        typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);
        try{ Assert.assertEquals(2, typeVarAssigns.size());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testGetTypeArguments$catena_4() {
        Map<TypeVariable<?>, Type> typeVarAssigns;
        TypeVariable<?> treeSetTypeVar;
        Type typeArg;

        typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        try{ Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        typeArg = typeVarAssigns.get(treeSetTypeVar);
        try{ Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class,
                typeVarAssigns.get(treeSetTypeVar));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        try{ Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        typeArg = typeVarAssigns.get(treeSetTypeVar);
        try{ Assert.assertEquals("Type argument of Comparable from int: " + typeArg, Integer.class,
                typeVarAssigns.get(treeSetTypeVar));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        Collection<Integer> col = Arrays.asList(new Integer[0]);
        typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        Assert.assertFalse("Type var assigns for Collection from List: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    /***** ORIGINAL ASSERTION IS HERE *****/

        typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);
        try{ Assert.assertTrue(typeVarAssigns.size() == 2);                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0]));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0]));               }catch(Throwable __SHOULD_BE_IGNORED){}

        typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);
        try{ Assert.assertEquals(2, typeVarAssigns.size());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testGetTypeArguments$catena_5() {
        Map<TypeVariable<?>, Type> typeVarAssigns;
        TypeVariable<?> treeSetTypeVar;
        Type typeArg;

        typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        try{ Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        typeArg = typeVarAssigns.get(treeSetTypeVar);
        try{ Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class,
                typeVarAssigns.get(treeSetTypeVar));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        try{ Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        typeArg = typeVarAssigns.get(treeSetTypeVar);
        try{ Assert.assertEquals("Type argument of Comparable from int: " + typeArg, Integer.class,
                typeVarAssigns.get(treeSetTypeVar));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        Collection<Integer> col = Arrays.asList(new Integer[0]);
        typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        try{ Assert.assertFalse("Type var assigns for Collection from List: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

        typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);
        Assert.assertTrue(typeVarAssigns.size() == 2);                                                                          /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0]));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0]));               }catch(Throwable __SHOULD_BE_IGNORED){}

        typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);
        try{ Assert.assertEquals(2, typeVarAssigns.size());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testGetTypeArguments$catena_6() {
        Map<TypeVariable<?>, Type> typeVarAssigns;
        TypeVariable<?> treeSetTypeVar;
        Type typeArg;

        typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        try{ Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        typeArg = typeVarAssigns.get(treeSetTypeVar);
        try{ Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class,
                typeVarAssigns.get(treeSetTypeVar));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        try{ Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        typeArg = typeVarAssigns.get(treeSetTypeVar);
        try{ Assert.assertEquals("Type argument of Comparable from int: " + typeArg, Integer.class,
                typeVarAssigns.get(treeSetTypeVar));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        Collection<Integer> col = Arrays.asList(new Integer[0]);
        typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        try{ Assert.assertFalse("Type var assigns for Collection from List: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

        typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);
        try{ Assert.assertTrue(typeVarAssigns.size() == 2);                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0]));                            /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0]));               }catch(Throwable __SHOULD_BE_IGNORED){}

        typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);
        try{ Assert.assertEquals(2, typeVarAssigns.size());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testGetTypeArguments$catena_7() {
        Map<TypeVariable<?>, Type> typeVarAssigns;
        TypeVariable<?> treeSetTypeVar;
        Type typeArg;

        typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        try{ Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        typeArg = typeVarAssigns.get(treeSetTypeVar);
        try{ Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class,
                typeVarAssigns.get(treeSetTypeVar));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        try{ Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        typeArg = typeVarAssigns.get(treeSetTypeVar);
        try{ Assert.assertEquals("Type argument of Comparable from int: " + typeArg, Integer.class,
                typeVarAssigns.get(treeSetTypeVar));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        Collection<Integer> col = Arrays.asList(new Integer[0]);
        typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        try{ Assert.assertFalse("Type var assigns for Collection from List: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

        typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);
        try{ Assert.assertTrue(typeVarAssigns.size() == 2);                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0]));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0]));                    /***** ORIGINAL ASSERTION IS HERE *****/

        typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);
        try{ Assert.assertEquals(2, typeVarAssigns.size());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testGetTypeArguments$catena_8() {
        Map<TypeVariable<?>, Type> typeVarAssigns;
        TypeVariable<?> treeSetTypeVar;
        Type typeArg;

        typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        try{ Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        typeArg = typeVarAssigns.get(treeSetTypeVar);
        try{ Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class,
                typeVarAssigns.get(treeSetTypeVar));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        try{ Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        typeArg = typeVarAssigns.get(treeSetTypeVar);
        try{ Assert.assertEquals("Type argument of Comparable from int: " + typeArg, Integer.class,
                typeVarAssigns.get(treeSetTypeVar));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        Collection<Integer> col = Arrays.asList(new Integer[0]);
        typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        try{ Assert.assertFalse("Type var assigns for Collection from List: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

        typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);
        try{ Assert.assertTrue(typeVarAssigns.size() == 2);                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0]));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0]));               }catch(Throwable __SHOULD_BE_IGNORED){}

        typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);
        Assert.assertEquals(2, typeVarAssigns.size());                                                                          /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testGetTypeArguments$catena_9() {
        Map<TypeVariable<?>, Type> typeVarAssigns;
        TypeVariable<?> treeSetTypeVar;
        Type typeArg;

        typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        try{ Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        typeArg = typeVarAssigns.get(treeSetTypeVar);
        try{ Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class,
                typeVarAssigns.get(treeSetTypeVar));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        try{ Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        typeArg = typeVarAssigns.get(treeSetTypeVar);
        try{ Assert.assertEquals("Type argument of Comparable from int: " + typeArg, Integer.class,
                typeVarAssigns.get(treeSetTypeVar));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        Collection<Integer> col = Arrays.asList(new Integer[0]);
        typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        try{ Assert.assertFalse("Type var assigns for Collection from List: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

        typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);
        try{ Assert.assertTrue(typeVarAssigns.size() == 2);                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0]));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0]));               }catch(Throwable __SHOULD_BE_IGNORED){}

        typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);
        try{ Assert.assertEquals(2, typeVarAssigns.size());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));                               /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testGetTypeArguments$catena_10() {
        Map<TypeVariable<?>, Type> typeVarAssigns;
        TypeVariable<?> treeSetTypeVar;
        Type typeArg;

        typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        try{ Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        typeArg = typeVarAssigns.get(treeSetTypeVar);
        try{ Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class,
                typeVarAssigns.get(treeSetTypeVar));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        try{ Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        typeArg = typeVarAssigns.get(treeSetTypeVar);
        try{ Assert.assertEquals("Type argument of Comparable from int: " + typeArg, Integer.class,
                typeVarAssigns.get(treeSetTypeVar));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        Collection<Integer> col = Arrays.asList(new Integer[0]);
        typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        try{ Assert.assertFalse("Type var assigns for Collection from List: " + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

        typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);
        try{ Assert.assertTrue(typeVarAssigns.size() == 2);                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0]));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0]));               }catch(Throwable __SHOULD_BE_IGNORED){}

        typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);
        try{ Assert.assertEquals(2, typeVarAssigns.size());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));         /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 106 range 337 at src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
to
    @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_0() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        delegateBooleanAssertion(types, 0, 0, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_1() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        delegateBooleanAssertion(types, 0, 1, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_2() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        delegateBooleanAssertion(types, 1, 0, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_3() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        delegateBooleanAssertion(types, 0, 2, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_4() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        delegateBooleanAssertion(types, 2, 0, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_5() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        delegateBooleanAssertion(types, 0, 3, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_6() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        delegateBooleanAssertion(types, 3, 0, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_7() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        delegateBooleanAssertion(types, 0, 4, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_8() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        delegateBooleanAssertion(types, 4, 0, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_9() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        delegateBooleanAssertion(types, 0, 5, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_10() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        delegateBooleanAssertion(types, 5, 0, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_11() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        delegateBooleanAssertion(types, 0, 6, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_12() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        delegateBooleanAssertion(types, 6, 0, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_13() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        delegateBooleanAssertion(types, 1, 1, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_14() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        delegateBooleanAssertion(types, 1, 2, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_15() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        delegateBooleanAssertion(types, 2, 1, false);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_16() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        delegateBooleanAssertion(types, 1, 3, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_17() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        delegateBooleanAssertion(types, 3, 1, false);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_18() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        delegateBooleanAssertion(types, 1, 4, false);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_19() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        delegateBooleanAssertion(types, 4, 1, false);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_20() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        delegateBooleanAssertion(types, 1, 5, false);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_21() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        delegateBooleanAssertion(types, 5, 1, false);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_22() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        delegateBooleanAssertion(types, 1, 6, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_23() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        delegateBooleanAssertion(types, 6, 1, false);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_24() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        delegateBooleanAssertion(types, 2, 2, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_25() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        delegateBooleanAssertion(types, 2, 3, false);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_26() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        delegateBooleanAssertion(types, 3, 2, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_27() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        delegateBooleanAssertion(types, 2, 4, false);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_28() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        delegateBooleanAssertion(types, 4, 2, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_29() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        delegateBooleanAssertion(types, 2, 5, false);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_30() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        delegateBooleanAssertion(types, 5, 2, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_31() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        delegateBooleanAssertion(types, 2, 6, false);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_32() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        delegateBooleanAssertion(types, 6, 2, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_33() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        delegateBooleanAssertion(types, 3, 3, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_34() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        delegateBooleanAssertion(types, 3, 4, false);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_35() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        delegateBooleanAssertion(types, 4, 3, false);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_36() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        delegateBooleanAssertion(types, 3, 5, false);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_37() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        delegateBooleanAssertion(types, 5, 3, false);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_38() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        delegateBooleanAssertion(types, 3, 6, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_39() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        delegateBooleanAssertion(types, 6, 3, false);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_40() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        delegateBooleanAssertion(types, 4, 4, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_41() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        delegateBooleanAssertion(types, 4, 5, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_42() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        delegateBooleanAssertion(types, 5, 4, false);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_43() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        delegateBooleanAssertion(types, 4, 6, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_44() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        delegateBooleanAssertion(types, 6, 4, false);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_45() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        delegateBooleanAssertion(types, 5, 5, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_46() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        delegateBooleanAssertion(types, 5, 6, false);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_47() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        delegateBooleanAssertion(types, 6, 5, false);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_48() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        delegateBooleanAssertion(types, 6, 6, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_49() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        delegateBooleanAssertion(types, 7, 7, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_50() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        delegateBooleanAssertion(types, 7, 8, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_51() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        delegateBooleanAssertion(types, 8, 7, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_52() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        delegateBooleanAssertion(types, 7, 9, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_53() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        delegateBooleanAssertion(types, 9, 7, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_54() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        delegateBooleanAssertion(types, 7, 10, true);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_55() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        delegateBooleanAssertion(types, 10, 7, true);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_56() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        delegateBooleanAssertion(types, 7, 11, true);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_57() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        delegateBooleanAssertion(types, 11, 7, true);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_58() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        delegateBooleanAssertion(types, 7, 12, true);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_59() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        delegateBooleanAssertion(types, 12, 7, true);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_60() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        delegateBooleanAssertion(types, 7, 13, true);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_61() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        delegateBooleanAssertion(types, 13, 7, true);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_62() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        delegateBooleanAssertion(types, 8, 8, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_63() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        delegateBooleanAssertion(types, 8, 9, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_64() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        delegateBooleanAssertion(types, 9, 8, false);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_65() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        delegateBooleanAssertion(types, 8, 10, true);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_66() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        delegateBooleanAssertion(types, 10, 8, false);                                                      /***** ORIGINAL ASSERTION IS HERE *****/
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_67() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        delegateBooleanAssertion(types, 8, 11, false);                                                      /***** ORIGINAL ASSERTION IS HERE *****/
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_68() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        delegateBooleanAssertion(types, 11, 8, false);                                                      /***** ORIGINAL ASSERTION IS HERE *****/
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_69() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        delegateBooleanAssertion(types, 8, 12, false);                                                      /***** ORIGINAL ASSERTION IS HERE *****/
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_70() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        delegateBooleanAssertion(types, 12, 8, false);                                                      /***** ORIGINAL ASSERTION IS HERE *****/
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_71() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        delegateBooleanAssertion(types, 8, 13, true);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_72() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        delegateBooleanAssertion(types, 13, 8, false);                                                      /***** ORIGINAL ASSERTION IS HERE *****/
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_73() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        delegateBooleanAssertion(types, 9, 9, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_74() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        delegateBooleanAssertion(types, 9, 10, false);                                                      /***** ORIGINAL ASSERTION IS HERE *****/
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_75() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        delegateBooleanAssertion(types, 10, 9, true);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_76() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        delegateBooleanAssertion(types, 9, 11, false);                                                      /***** ORIGINAL ASSERTION IS HERE *****/
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_77() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        delegateBooleanAssertion(types, 11, 9, true);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_78() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        delegateBooleanAssertion(types, 9, 12, false);                                                      /***** ORIGINAL ASSERTION IS HERE *****/
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_79() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        delegateBooleanAssertion(types, 12, 9, true);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_80() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        delegateBooleanAssertion(types, 9, 13, false);                                                      /***** ORIGINAL ASSERTION IS HERE *****/
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_81() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        delegateBooleanAssertion(types, 13, 9, true);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_82() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        delegateBooleanAssertion(types, 10, 10, true);                                                      /***** ORIGINAL ASSERTION IS HERE *****/
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_83() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        delegateBooleanAssertion(types, 10, 11, false);                                                     /***** ORIGINAL ASSERTION IS HERE *****/
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_84() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        delegateBooleanAssertion(types, 11, 10, false);                                                     /***** ORIGINAL ASSERTION IS HERE *****/
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_85() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        delegateBooleanAssertion(types, 10, 12, false);                                                     /***** ORIGINAL ASSERTION IS HERE *****/
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_86() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        delegateBooleanAssertion(types, 12, 10, false);                                                     /***** ORIGINAL ASSERTION IS HERE *****/
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_87() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        delegateBooleanAssertion(types, 10, 13, true);                                                      /***** ORIGINAL ASSERTION IS HERE *****/
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_88() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        delegateBooleanAssertion(types, 13, 10, false);                                                     /***** ORIGINAL ASSERTION IS HERE *****/
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_89() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        delegateBooleanAssertion(types, 11, 11, true);                                                      /***** ORIGINAL ASSERTION IS HERE *****/
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_90() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        delegateBooleanAssertion(types, 11, 12, true);                                                      /***** ORIGINAL ASSERTION IS HERE *****/
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_91() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        delegateBooleanAssertion(types, 12, 11, false);                                                     /***** ORIGINAL ASSERTION IS HERE *****/
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_92() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        delegateBooleanAssertion(types, 11, 13, true);                                                      /***** ORIGINAL ASSERTION IS HERE *****/
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_93() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        delegateBooleanAssertion(types, 13, 11, false);                                                     /***** ORIGINAL ASSERTION IS HERE *****/
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_94() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        delegateBooleanAssertion(types, 12, 12, true);                                                      /***** ORIGINAL ASSERTION IS HERE *****/
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_95() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        delegateBooleanAssertion(types, 12, 13, false);                                                     /***** ORIGINAL ASSERTION IS HERE *****/
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_96() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        delegateBooleanAssertion(types, 13, 12, false);                                                     /***** ORIGINAL ASSERTION IS HERE *****/
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_97() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        delegateBooleanAssertion(types, 13, 13, true);                                                      /***** ORIGINAL ASSERTION IS HERE *****/
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_98() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                        /***** ORIGINAL ASSERTION IS HERE *****/
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_99() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                        /***** ORIGINAL ASSERTION IS HERE *****/
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_100() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                      /***** ORIGINAL ASSERTION IS HERE *****/
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_101() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 /***** ORIGINAL ASSERTION IS HERE *****/
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_102() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                     /***** ORIGINAL ASSERTION IS HERE *****/
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_103() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                                   /***** ORIGINAL ASSERTION IS HERE *****/
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_104() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                      /***** ORIGINAL ASSERTION IS HERE *****/
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_105() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                      /***** ORIGINAL ASSERTION IS HERE *****/
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_106() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                      /***** ORIGINAL ASSERTION IS HERE *****/
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_107() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                                /***** ORIGINAL ASSERTION IS HERE *****/
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_108() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                                /***** ORIGINAL ASSERTION IS HERE *****/
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_109() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                               /***** ORIGINAL ASSERTION IS HERE *****/
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_110() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                                 /***** ORIGINAL ASSERTION IS HERE *****/
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_111() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                                /***** ORIGINAL ASSERTION IS HERE *****/
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_112() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                               /***** ORIGINAL ASSERTION IS HERE *****/
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_113() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                                   /***** ORIGINAL ASSERTION IS HERE *****/
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_114() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                               /***** ORIGINAL ASSERTION IS HERE *****/
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_115() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                                  /***** ORIGINAL ASSERTION IS HERE *****/
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_116() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                              /***** ORIGINAL ASSERTION IS HERE *****/
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_117() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                                /***** ORIGINAL ASSERTION IS HERE *****/
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_118() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                                /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_119() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                                 /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_120() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                                 /***** ORIGINAL ASSERTION IS HERE *****/
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_121() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                            /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_122() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                             /***** ORIGINAL ASSERTION IS HERE *****/
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_123() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                           /***** ORIGINAL ASSERTION IS HERE *****/
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_124() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                          /***** ORIGINAL ASSERTION IS HERE *****/
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_125() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                      /***** ORIGINAL ASSERTION IS HERE *****/
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_126() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                              /***** ORIGINAL ASSERTION IS HERE *****/
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_127() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                                 /***** ORIGINAL ASSERTION IS HERE *****/
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_128() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                           /***** ORIGINAL ASSERTION IS HERE *****/
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_129() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                            /***** ORIGINAL ASSERTION IS HERE *****/
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_130() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                         /***** ORIGINAL ASSERTION IS HERE *****/
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_131() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                                  /***** ORIGINAL ASSERTION IS HERE *****/
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_132() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                                  /***** ORIGINAL ASSERTION IS HERE *****/
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_133() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                                  /***** ORIGINAL ASSERTION IS HERE *****/
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_134() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                                  /***** ORIGINAL ASSERTION IS HERE *****/
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_135() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                                  /***** ORIGINAL ASSERTION IS HERE *****/
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_136() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                                  /***** ORIGINAL ASSERTION IS HERE *****/
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_137() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                                  /***** ORIGINAL ASSERTION IS HERE *****/
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_138() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                                  /***** ORIGINAL ASSERTION IS HERE *****/
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_139() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                                  /***** ORIGINAL ASSERTION IS HERE *****/
        aClass.eClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @SuppressWarnings("boxing") // deliberately used here
    @Test
    public void testIsAssignable$catena_140() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = list0;
        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list1;
        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list0;
        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list2;
        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list0;
        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list3;
        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = list0;
        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list4;
        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list0;
        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list5;
        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list0;
        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list0 = list6;
        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
//        list1 = list1;
        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list1;
        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = list1;
        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list3;
        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list1;
        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list4;
        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list1;
        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list1 = list5;
        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list1;
        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list1 = (List<Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list2 = list2;
        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list3;
        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list4;
        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list2;
        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list5;
        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list2;
        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list2 = list6;
        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list2;
        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list3 = list3;
        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list2;
        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // list4 = list3;
        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list4;
        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list5 = list3;
        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        // list3 = list5;
        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list3;
        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list3 = (List<? super Object>) list6;
        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list4 = list4;
        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = list4;
        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list5;
        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = list4;
        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list4 = (List<String>) list6;
        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list5 = list5;
        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list6 = (List<? super String>) list5;
        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list5 = (List<? extends String>) list6;
        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list6 = list6;
        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

//        list7 = list7;
        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = list7;
        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list8;
        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list7;
        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list9;
        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list7;
        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list10;
        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = list7;
        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list11;
        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list7;
        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list12;
        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list7;
        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list7 = list13;
        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list8 = list8;
        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list8;
        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = list8;
        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list8;
        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list11;
        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list8;
        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list8 = list12;
        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list8;
        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list8 = (List<Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
//        list9 = list9;
        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list10;
        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list11;
        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list12;
        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list9;
        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list9 = list13;
        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
//        list10 = list10;
        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // list11 = list10;
        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list11;
        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list12 = list10;
        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // list10 = list12;
        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list10;
        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list10 = (List<? super Object>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list11 = list11;
        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = list11;
        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = list11;
        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list11 = (List<String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list12 = list12;
        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        list13 = (List<? super String>[]) list12;
        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        list12 = (List<? extends String>[]) list13;
        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
//        list13 = list13;
        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        Type disType = getClass().getField("dis").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField("dat").getGenericType();
        Type daType = getClass().getField("da").getGenericType();
        Type uhderType = getClass().getField("uhder").getGenericType();
        Type dingType = getClass().getField("ding").getGenericType();
        Type testerType = getClass().getField("tester").getGenericType();
        Type tester2Type = getClass().getField("tester2").getGenericType();
        Type dat2Type = getClass().getField("dat2").getGenericType();
        Type dat3Type = getClass().getField("dat3").getGenericType();
        dis = dat;
        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = da;
        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = uhder;
        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = ding;
        try{ Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        dis = tester;
        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        // dis = tester2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat2;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat2 = dat;
        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // dat = dat3;
        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = by;
        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = sh;
        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        du = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        du = lo;
        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        du = fl;
        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        lo = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        // Long lngW = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        // lngW = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        in = Integer.valueOf(0);
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer inte = in;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Type intComparableType = getClass().getField("intComparable").getGenericType();
        intComparable = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Serializable ser = 1;
        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Type longComparableType = getClass().getField("longComparable").getGenericType();
        // longComparable = 1;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        // longComparable = Integer.valueOf( 0 );
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ia;
        // long[] la = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Integer[] ia = null;
        Type caType = getClass().getField("intWildcardComparable").getGenericType();
        intWildcardComparable = ia;
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        // int[] ina = ia;
        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        oa = new Integer[0];
        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Type bClassType = AClass.class.getField("bClass").getGenericType();
        Type cClassType = AClass.class.getField("cClass").getGenericType();
        Type dClassType = AClass.class.getField("dClass").getGenericType();
        Type eClassType = AClass.class.getField("eClass").getGenericType();
        Type fClassType = AClass.class.getField("fClass").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.bClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.dClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.cClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.eClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.dClass = aClass.fClass;
        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        aClass.eClass = aClass.fClass;
        Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                                  /***** ORIGINAL ASSERTION IS HERE *****/
    }
trace file: src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
new test num: 152
ori test num: 0
pattern: 00
patches are written to file
running tests...
used time: Finished in 36.42 seconds
Failing tests: 4
	org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArguments$catena_10
	org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArguments$catena_8
	org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArguments$catena_9
	org.apache.commons.lang3.reflect.TypeUtilsTest::testIsAssignable$catena_101
processed: 00
pattern: 01
try to fix hunk: 1
replace from 675 with range 1 to
        if (toClass.equals(cls)) {

patches are written to file
running tests...
used time: Finished in 26.30 seconds
Failing tests: 2
	org.apache.commons.lang3.reflect.TypeUtilsTest::testIsAssignable$catena_136
	org.apache.commons.lang3.reflect.TypeUtilsTest::testIsAssignable$catena_137
Includes new failing tests, set to unusable
processed: 01
pattern: 10
try to fix hunk: 0
replace from 219 with range 3 to
        for (TypeVariable<?> var : toTypeVarAssigns.keySet()) {
            Type toTypeArg = unrollVariableAssignments(var, toTypeVarAssigns);
            Type fromTypeArg = unrollVariableAssignments(var, fromTypeVarAssigns);

patches are written to file
running tests...
used time: Finished in 22.27 seconds
Failing tests: 4
	org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArguments$catena_10
	org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArguments$catena_8
	org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArguments$catena_9
	org.apache.commons.lang3.reflect.TypeUtilsTest::testIsAssignable$catena_101
No new failing tests but only 1 hunk
processed: 10
pattern: 11
try to fix hunk: 0
replace from 219 with range 3 to
        for (TypeVariable<?> var : toTypeVarAssigns.keySet()) {
            Type toTypeArg = unrollVariableAssignments(var, toTypeVarAssigns);
            Type fromTypeArg = unrollVariableAssignments(var, fromTypeVarAssigns);

try to fix hunk: 1
replace from 675 with range 1 to
        if (toClass.equals(cls)) {

patches are written to file
running tests...
used time: Finished in 25.58 seconds
Failing tests: 0
Can independently fix ['org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArguments$catena_8', 'org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArguments$catena_9', 'org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArguments$catena_10', 'org.apache.commons.lang3.reflect.TypeUtilsTest::testIsAssignable$catena_101']
select new bug
Pattern: 11
new failing tests:
org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArguments$catena_8
org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArguments$catena_9
org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArguments$catena_10
org.apache.commons.lang3.reflect.TypeUtilsTest::testIsAssignable$catena_101
Save found bug
processed: 11
Find 1 new bugs
