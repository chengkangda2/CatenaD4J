{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java",
            "from_line_no": 115,
            "to_line_no": 115,
            "replaced_with": "            setResult(min, 0);\n",
            "replaced": "            setResult(yMin, 0);\n",
            "patch_type": "replace",
            "next_line_no": 116
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java",
            "from_line_no": 127,
            "to_line_no": 127,
            "replaced_with": "            setResult(max, 0);\n",
            "replaced": "            setResult(yMax, 0);\n",
            "patch_type": "replace",
            "next_line_no": 128
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math.analysis.solvers.BrentSolverTest::testRootEndpoints"
        ],
        "org.apache.commons.math.analysis.solvers.BrentSolverTest::testRootEndpoints": {
            "file_path": "src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java",
            "Instance": "Begin: Pos(305, 12)\nEnd: Pos(322, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_72/src/test/java//org/apache/commons/math/analysis/solvers/BrentSolverTest.java\nName: testRootEndpoints\nChilds: [StatementAssertion<Begin: Pos(311, 9), End: Pos(311, 68)>,\nStatementAssertion<Begin: Pos(314, 9), End: Pos(314, 68)>,\nStatementAssertion<Begin: Pos(317, 9), End: Pos(317, 68)>,\nStatementAssertion<Begin: Pos(320, 9), End: Pos(320, 68)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_72/src/test/java//org/apache/commons/math/analysis/solvers/BrentSolverTest.java",
            "name": "testRootEndpoints",
            "begin": "Pos(305, 12)",
            "end": "Pos(322, 5)",
            "begin_line_no": 305,
            "end_line_no": 322,
            "child": [
                "Begin: Pos(311, 9)\nEnd: Pos(311, 68)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(314, 9)\nEnd: Pos(314, 68)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(317, 9)\nEnd: Pos(317, 68)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(320, 9)\nEnd: Pos(320, 68)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testRootEndpoints$catena_0() throws Exception {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealSolver solver = new BrentSolver();\n\n        // endpoint is root\n        double result = solver.solve(f, Math.PI, 4);\n        assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                        /***** ORIGINAL ASSERTION IS HERE *****/\n\n        result = solver.solve(f, 3, Math.PI);\n        try{ assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        result = solver.solve(f, Math.PI, 4, 3.5);\n        try{ assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        result = solver.solve(f, 3, Math.PI, 3.07);\n        try{ assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testRootEndpoints$catena_1() throws Exception {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealSolver solver = new BrentSolver();\n\n        // endpoint is root\n        double result = solver.solve(f, Math.PI, 4);\n        try{ assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        result = solver.solve(f, 3, Math.PI);\n        assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                        /***** ORIGINAL ASSERTION IS HERE *****/\n\n        result = solver.solve(f, Math.PI, 4, 3.5);\n        try{ assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        result = solver.solve(f, 3, Math.PI, 3.07);\n        try{ assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testRootEndpoints$catena_2() throws Exception {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealSolver solver = new BrentSolver();\n\n        // endpoint is root\n        double result = solver.solve(f, Math.PI, 4);\n        try{ assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        result = solver.solve(f, 3, Math.PI);\n        try{ assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        result = solver.solve(f, Math.PI, 4, 3.5);\n        assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                        /***** ORIGINAL ASSERTION IS HERE *****/\n\n        result = solver.solve(f, 3, Math.PI, 3.07);\n        try{ assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testRootEndpoints$catena_3() throws Exception {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealSolver solver = new BrentSolver();\n\n        // endpoint is root\n        double result = solver.solve(f, Math.PI, 4);\n        try{ assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        result = solver.solve(f, 3, Math.PI);\n        try{ assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        result = solver.solve(f, Math.PI, 4, 3.5);\n        try{ assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        result = solver.solve(f, 3, Math.PI, 3.07);\n        assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                        /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }"
            ],
            "func": {
                "0": "    public void testRootEndpoints$catena_0() throws Exception {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealSolver solver = new BrentSolver();\n\n        // endpoint is root\n        double result = solver.solve(f, Math.PI, 4);\n        assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                        /***** ORIGINAL ASSERTION IS HERE *****/\n\n        result = solver.solve(f, 3, Math.PI);\n        try{ assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        result = solver.solve(f, Math.PI, 4, 3.5);\n        try{ assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        result = solver.solve(f, 3, Math.PI, 3.07);\n        try{ assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "1": "    public void testRootEndpoints$catena_1() throws Exception {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealSolver solver = new BrentSolver();\n\n        // endpoint is root\n        double result = solver.solve(f, Math.PI, 4);\n        try{ assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        result = solver.solve(f, 3, Math.PI);\n        assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                        /***** ORIGINAL ASSERTION IS HERE *****/\n\n        result = solver.solve(f, Math.PI, 4, 3.5);\n        try{ assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        result = solver.solve(f, 3, Math.PI, 3.07);\n        try{ assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "2": "    public void testRootEndpoints$catena_2() throws Exception {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealSolver solver = new BrentSolver();\n\n        // endpoint is root\n        double result = solver.solve(f, Math.PI, 4);\n        try{ assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        result = solver.solve(f, 3, Math.PI);\n        try{ assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        result = solver.solve(f, Math.PI, 4, 3.5);\n        assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                        /***** ORIGINAL ASSERTION IS HERE *****/\n\n        result = solver.solve(f, 3, Math.PI, 3.07);\n        try{ assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "3": "    public void testRootEndpoints$catena_3() throws Exception {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealSolver solver = new BrentSolver();\n\n        // endpoint is root\n        double result = solver.solve(f, Math.PI, 4);\n        try{ assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        result = solver.solve(f, 3, Math.PI);\n        try{ assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        result = solver.solve(f, Math.PI, 4, 3.5);\n        try{ assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        result = solver.solve(f, 3, Math.PI, 3.07);\n        assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());                                        /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }"
            }
        }
    }
}