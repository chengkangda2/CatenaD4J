{
    "original": {
        "num_of_hunks": 9,
        "0": {
            "file_name": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
            "replaced_with": "        setConvergenceChecker(null);\n",
            "patch_type": "insert",
            "next_line_no": 166
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
            "replaced_with": "        VectorialPointValuePair current = new VectorialPointValuePair(point, objective);\n",
            "patch_type": "insert",
            "next_line_no": 247
        },
        "2": {
            "file_name": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
            "replaced_with": "            VectorialPointValuePair previous = current;\n",
            "patch_type": "insert",
            "next_line_no": 252
        },
        "3": {
            "file_name": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
            "from_line_no": 303,
            "to_line_no": 303,
            "replaced_with": "                return current;\n",
            "replaced": "                return new VectorialPointValuePair(point, objective);\n",
            "patch_type": "replace",
            "next_line_no": 304
        },
        "4": {
            "file_name": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
            "replaced_with": "                current = new VectorialPointValuePair(point, objective);\n",
            "patch_type": "insert",
            "next_line_no": 345
        },
        "5": {
            "file_name": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
            "replaced_with": "                if (checker != null) {\n",
            "patch_type": "insert",
            "next_line_no": 413
        },
        "6": {
            "file_name": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
            "replaced_with": "                    if (checker.converged(getIterations(), previous, current)) {\n                        return current;                        \n                    }\n                } else {\n",
            "patch_type": "insert",
            "next_line_no": 414
        },
        "7": {
            "file_name": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
            "from_line_no": 419,
            "to_line_no": 419,
            "replaced_with": "                        return current;\n",
            "replaced": "                        return new VectorialPointValuePair(point, objective);\n",
            "patch_type": "replace",
            "next_line_no": 420
        },
        "8": {
            "file_name": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
            "replaced_with": "                }\n",
            "patch_type": "insert",
            "next_line_no": 421
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math.optimization.general.MinpackTest::testMinpackJennrichSampson",
            "org.apache.commons.math.optimization.general.MinpackTest::testMinpackFreudensteinRoth"
        ],
        "org.apache.commons.math.optimization.general.MinpackTest::testMinpackJennrichSampson": {
            "file_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
            "Instance": "Begin: Pos(324, 10)\nEnd: Pos(330, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_68/src/test/java//org/apache/commons/math/optimization/general/MinpackTest.java\nName: testMinpackJennrichSampson\nChilds: [StatementAssertion<Begin: Pos(325, 5), End: Pos(329, 55)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_68/src/test/java//org/apache/commons/math/optimization/general/MinpackTest.java",
            "name": "testMinpackJennrichSampson",
            "begin": "Pos(324, 10)",
            "end": "Pos(330, 3)",
            "begin_line_no": 324,
            "end_line_no": 330,
            "child": [
                "Begin: Pos(325, 5)\nEnd: Pos(329, 55)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.apache.commons.math.optimization.general.MinpackTest::testMinpackFreudensteinRoth": {
            "file_path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
            "Instance": "Begin: Pos(145, 10)\nEnd: Pos(164, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_68/src/test/java//org/apache/commons/math/optimization/general/MinpackTest.java\nName: testMinpackFreudensteinRoth\nChilds: [StatementAssertion<Begin: Pos(146, 5), End: Pos(151, 56)>,\nStatementAssertion<Begin: Pos(152, 5), End: Pos(157, 56)>,\nStatementAssertion<Begin: Pos(158, 5), End: Pos(163, 56)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_68/src/test/java//org/apache/commons/math/optimization/general/MinpackTest.java",
            "name": "testMinpackFreudensteinRoth",
            "begin": "Pos(145, 10)",
            "end": "Pos(164, 3)",
            "begin_line_no": 145,
            "end_line_no": 164,
            "child": [
                "Begin: Pos(146, 5)\nEnd: Pos(151, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(152, 5)\nEnd: Pos(157, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(158, 5)\nEnd: Pos(163, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testMinpackFreudensteinRoth$catena_0() {\n    minpackTest(new FreudensteinRothFunction(new double[] { 0.5, -2.0 },\n                                             20.0124960961895, 6.99887517584575,\n                                             new double[] {\n                                               11.4124844654993,\n                                               -0.896827913731509\n                                             }), false);                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ minpackTest(new FreudensteinRothFunction(new double[] { 5.0, -20.0 },\n                                             12432.833948863, 6.9988751744895,\n                                             new double[] {\n                                               11.4121122022341,\n                                               -0.8968550851268697\n                                             }), false);                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ minpackTest(new FreudensteinRothFunction(new double[] { 50.0, -200.0 },\n                                             11426454.595762, 6.99887517242903,\n                                             new double[] {\n                                               11.412069435091231,\n                                               -0.8968582807605691\n                                             }), false);                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testMinpackFreudensteinRoth$catena_1() {\n    try{ minpackTest(new FreudensteinRothFunction(new double[] { 0.5, -2.0 },\n                                             20.0124960961895, 6.99887517584575,\n                                             new double[] {\n                                               11.4124844654993,\n                                               -0.896827913731509\n                                             }), false);                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    minpackTest(new FreudensteinRothFunction(new double[] { 5.0, -20.0 },\n                                             12432.833948863, 6.9988751744895,\n                                             new double[] {\n                                               11.4121122022341,\n                                               -0.8968550851268697\n                                             }), false);                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ minpackTest(new FreudensteinRothFunction(new double[] { 50.0, -200.0 },\n                                             11426454.595762, 6.99887517242903,\n                                             new double[] {\n                                               11.412069435091231,\n                                               -0.8968582807605691\n                                             }), false);                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testMinpackFreudensteinRoth$catena_2() {\n    try{ minpackTest(new FreudensteinRothFunction(new double[] { 0.5, -2.0 },\n                                             20.0124960961895, 6.99887517584575,\n                                             new double[] {\n                                               11.4124844654993,\n                                               -0.896827913731509\n                                             }), false);                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ minpackTest(new FreudensteinRothFunction(new double[] { 5.0, -20.0 },\n                                             12432.833948863, 6.9988751744895,\n                                             new double[] {\n                                               11.4121122022341,\n                                               -0.8968550851268697\n                                             }), false);                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    minpackTest(new FreudensteinRothFunction(new double[] { 50.0, -200.0 },\n                                             11426454.595762, 6.99887517242903,\n                                             new double[] {\n                                               11.412069435091231,\n                                               -0.8968582807605691\n                                             }), false);                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testMinpackFreudensteinRoth$catena_0() {\n    minpackTest(new FreudensteinRothFunction(new double[] { 0.5, -2.0 },\n                                             20.0124960961895, 6.99887517584575,\n                                             new double[] {\n                                               11.4124844654993,\n                                               -0.896827913731509\n                                             }), false);                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ minpackTest(new FreudensteinRothFunction(new double[] { 5.0, -20.0 },\n                                             12432.833948863, 6.9988751744895,\n                                             new double[] {\n                                               11.4121122022341,\n                                               -0.8968550851268697\n                                             }), false);                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ minpackTest(new FreudensteinRothFunction(new double[] { 50.0, -200.0 },\n                                             11426454.595762, 6.99887517242903,\n                                             new double[] {\n                                               11.412069435091231,\n                                               -0.8968582807605691\n                                             }), false);                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testMinpackFreudensteinRoth$catena_1() {\n    try{ minpackTest(new FreudensteinRothFunction(new double[] { 0.5, -2.0 },\n                                             20.0124960961895, 6.99887517584575,\n                                             new double[] {\n                                               11.4124844654993,\n                                               -0.896827913731509\n                                             }), false);                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    minpackTest(new FreudensteinRothFunction(new double[] { 5.0, -20.0 },\n                                             12432.833948863, 6.9988751744895,\n                                             new double[] {\n                                               11.4121122022341,\n                                               -0.8968550851268697\n                                             }), false);                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ minpackTest(new FreudensteinRothFunction(new double[] { 50.0, -200.0 },\n                                             11426454.595762, 6.99887517242903,\n                                             new double[] {\n                                               11.412069435091231,\n                                               -0.8968582807605691\n                                             }), false);                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testMinpackFreudensteinRoth$catena_2() {\n    try{ minpackTest(new FreudensteinRothFunction(new double[] { 0.5, -2.0 },\n                                             20.0124960961895, 6.99887517584575,\n                                             new double[] {\n                                               11.4124844654993,\n                                               -0.896827913731509\n                                             }), false);                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ minpackTest(new FreudensteinRothFunction(new double[] { 5.0, -20.0 },\n                                             12432.833948863, 6.9988751744895,\n                                             new double[] {\n                                               11.4121122022341,\n                                               -0.8968550851268697\n                                             }), false);                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    minpackTest(new FreudensteinRothFunction(new double[] { 50.0, -200.0 },\n                                             11426454.595762, 6.99887517242903,\n                                             new double[] {\n                                               11.412069435091231,\n                                               -0.8968582807605691\n                                             }), false);                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        }
    },
    "010010010": {
        "failing_tests": [
            "org.apache.commons.math.optimization.general.MinpackTest::testMinpackFreudensteinRoth$catena_1",
            "org.apache.commons.math.optimization.general.MinpackTest::testMinpackFreudensteinRoth$catena_2",
            "org.apache.commons.math.optimization.general.MinpackTest::testMinpackJennrichSampson"
        ]
    }
}