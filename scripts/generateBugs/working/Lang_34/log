---
Begin generate bug_id: Lang_34
num_of_hunks: 2
timeout for running: 3600
use working dir: ./working/data/Lang_34
Try to checkout Lang_34
build dir: ['./working/data/Lang_34/target/classes', './working/data/Lang_34/target/test-classes']
init FileManager
trace file: src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java
trying to replace old failing tests
edit: replace from 829 range 10 at src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java
to
    public void testObjectCycle$catena_0() {
        ObjectCycle a = new ObjectCycle();
        ObjectCycle b = new ObjectCycle();
        a.obj = b;
        b.obj = a;

        String expected = toBaseString(a) + "[" + toBaseString(b) + "[" + toBaseString(a) + "]]";
        assertEquals(expected, a.toString());                                                               /***** ORIGINAL ASSERTION IS HERE *****/
        try{ validateNullToStringStyleRegistry();                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testObjectCycle$catena_1() {
        ObjectCycle a = new ObjectCycle();
        ObjectCycle b = new ObjectCycle();
        a.obj = b;
        b.obj = a;

        String expected = toBaseString(a) + "[" + toBaseString(b) + "[" + toBaseString(a) + "]]";
        try{ assertEquals(expected, a.toString());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        validateNullToStringStyleRegistry();                                                                /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 313 range 24 at src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java
to
    public void testReflectionHierarchy$catena_0() {
        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
        String baseStr = this.toBaseString(baseA);
        assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA));                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}

        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
        baseStr = this.toBaseString(baseB);
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionHierarchy$catena_1() {
        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
        String baseStr = this.toBaseString(baseA);
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null));                                                  /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}

        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
        baseStr = this.toBaseString(baseB);
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionHierarchy$catena_2() {
        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
        String baseStr = this.toBaseString(baseA);
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false));                                           /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}

        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
        baseStr = this.toBaseString(baseB);
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionHierarchy$catena_3() {
        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
        String baseStr = this.toBaseString(baseA);
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true));                               /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}

        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
        baseStr = this.toBaseString(baseB);
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionHierarchy$catena_4() {
        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
        String baseStr = this.toBaseString(baseA);
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null));                                     /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}

        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
        baseStr = this.toBaseString(baseB);
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionHierarchy$catena_5() {
        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
        String baseStr = this.toBaseString(baseA);
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}

        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
        baseStr = this.toBaseString(baseB);
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionHierarchy$catena_6() {
        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
        String baseStr = this.toBaseString(baseA);
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));             /***** ORIGINAL ASSERTION IS HERE *****/

        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
        baseStr = this.toBaseString(baseB);
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionHierarchy$catena_7() {
        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
        String baseStr = this.toBaseString(baseA);
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}

        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
        baseStr = this.toBaseString(baseB);
        assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                                    /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionHierarchy$catena_8() {
        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
        String baseStr = this.toBaseString(baseA);
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}

        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
        baseStr = this.toBaseString(baseB);
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                                    /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionHierarchy$catena_9() {
        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
        String baseStr = this.toBaseString(baseA);
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}

        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
        baseStr = this.toBaseString(baseB);
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null));                                              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionHierarchy$catena_10() {
        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
        String baseStr = this.toBaseString(baseA);
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}

        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
        baseStr = this.toBaseString(baseB);
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false));                                       /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionHierarchy$catena_11() {
        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
        String baseStr = this.toBaseString(baseA);
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}

        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
        baseStr = this.toBaseString(baseB);
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true));              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionHierarchy$catena_12() {
        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
        String baseStr = this.toBaseString(baseA);
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}

        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
        baseStr = this.toBaseString(baseB);
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null));                                 /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionHierarchy$catena_13() {
        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
        String baseStr = this.toBaseString(baseA);
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}

        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
        baseStr = this.toBaseString(baseB);
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                         /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionHierarchy$catena_14() {
        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
        String baseStr = this.toBaseString(baseA);
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}

        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
        baseStr = this.toBaseString(baseB);
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));         /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionHierarchy$catena_15() {
        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
        String baseStr = this.toBaseString(baseA);
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}

        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
        baseStr = this.toBaseString(baseB);
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionHierarchy$catena_16() {
        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
        String baseStr = this.toBaseString(baseA);
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}

        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
        baseStr = this.toBaseString(baseB);
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}
        this.validateNullToStringStyleRegistry();                                                                                          /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 530 range 5 at src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java
to
    public void testSelfInstanceTwoVarsReflectionObjectCycle$catena_0() throws Exception {
        SelfInstanceTwoVarsReflectionTestFixture test = new SelfInstanceTwoVarsReflectionTestFixture();
        assertEquals(this.toBaseString(test) + "[typeIsSelf=" + this.toBaseString(test) + ",otherType=" + test.getOtherType().toString() + "]", test.toString());         /***** ORIGINAL ASSERTION IS HERE *****/
        try{ this.validateNullToStringStyleRegistry();                                                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testSelfInstanceTwoVarsReflectionObjectCycle$catena_1() throws Exception {
        SelfInstanceTwoVarsReflectionTestFixture test = new SelfInstanceTwoVarsReflectionTestFixture();
        try{ assertEquals(this.toBaseString(test) + "[typeIsSelf=" + this.toBaseString(test) + ",otherType=" + test.getOtherType().toString() + "]", test.toString());    }catch(Throwable __SHOULD_BE_IGNORED){}
        this.validateNullToStringStyleRegistry();                                                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 376 range 8 at src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java
to
    public void testReflectionArrayCycle$catena_0() throws Exception {
        Object[] objects = new Object[1];
        objects[0] = objects;
        assertEquals(
            this.toBaseString(objects) + "[{" + this.toBaseString(objects) + "}]",
            ToStringBuilder.reflectionToString(objects));                                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionArrayCycle$catena_1() throws Exception {
        Object[] objects = new Object[1];
        objects[0] = objects;
        try{ assertEquals(
            this.toBaseString(objects) + "[{" + this.toBaseString(objects) + "}]",
            ToStringBuilder.reflectionToString(objects));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 237 range 8 at src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java
to
    public void testReflectionLongArrayArray$catena_0() {
        long[][] array = new long[][] { { 1, 2 }, null, { 5 } };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));          /***** ORIGINAL ASSERTION IS HERE *****/
        array = null;
        try{ assertReflectionArray("<null>", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionLongArrayArray$catena_1() {
        long[][] array = new long[][] { { 1, 2 }, null, { 5 } };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        assertReflectionArray("<null>", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionLongArrayArray$catena_2() {
        long[][] array = new long[][] { { 1, 2 }, null, { 5 } };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        try{ assertReflectionArray("<null>", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    }
NOTICE: patch for flaky tests of Lang_34, rename org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayArrayCycle$catena_1
edit: replace from 402 range 21 at src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java
to
    public void testReflectionArrayArrayCycle$catena_0() throws Exception {
        Object[][] objects = new Object[2][2];
        objects[0][0] = objects;
        objects[0][1] = objects;
        objects[1][0] = objects;
        objects[1][1] = objects;
        String basicToString = this.toBaseString(objects);
        assertEquals(
            basicToString
                + "[{{"
                + basicToString
                + ","
                + basicToString
                + "},{"
                + basicToString
                + ","
                + basicToString
                + "}}]",
            ToStringBuilder.reflectionToString(objects));                                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionArrayArrayCycle_catena_1() throws Exception {
        Object[][] objects = new Object[2][2];
        objects[0][0] = objects;
        objects[0][1] = objects;
        objects[1][0] = objects;
        objects[1][1] = objects;
        String basicToString = this.toBaseString(objects);
        try{ assertEquals(
            basicToString
                + "[{{"
                + basicToString
                + ","
                + basicToString
                + "},{"
                + basicToString
                + ","
                + basicToString
                + "}}]",
            ToStringBuilder.reflectionToString(objects));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 207 range 8 at src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java
to
    public void testReflectionFloatArray$catena_0() {
        float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array));         /***** ORIGINAL ASSERTION IS HERE *****/
        array = null;
        try{ assertReflectionArray("<null>", array);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionFloatArray$catena_1() {
        float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        assertReflectionArray("<null>", array);                                                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ this.validateNullToStringStyleRegistry();                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionFloatArray$catena_2() {
        float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        try{ assertReflectionArray("<null>", array);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        this.validateNullToStringStyleRegistry();                                                                 /***** ORIGINAL ASSERTION IS HERE *****/
    }
NOTICE: patch for flaky tests of Lang_34, rename org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionDoubleArrayArray$catena_2
edit: replace from 282 range 8 at src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java
to
    public void testReflectionDoubleArrayArray$catena_0() {
        double[][] array = new double[][] { { 1.0, 2.29686 }, null, { Double.NaN } };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array));         /***** ORIGINAL ASSERTION IS HERE *****/
        array = null;
        try{ assertReflectionArray("<null>", array);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionDoubleArrayArray$catena_1() {
        double[][] array = new double[][] { { 1.0, 2.29686 }, null, { Double.NaN } };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        assertReflectionArray("<null>", array);                                                                      /***** ORIGINAL ASSERTION IS HERE *****/
        try{ this.validateNullToStringStyleRegistry();                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionDoubleArrayArray_catena_2() {
        double[][] array = new double[][] { { 1.0, 2.29686 }, null, { Double.NaN } };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        try{ assertReflectionArray("<null>", array);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        this.validateNullToStringStyleRegistry();                                                                    /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 216 range 8 at src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java
to
    public void testReflectionBooleanArray$catena_0() {
        boolean[] array = new boolean[] { true, false, false };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + "[{true,false,false}]", ToStringBuilder.reflectionToString(array));          /***** ORIGINAL ASSERTION IS HERE *****/
        array = null;
        try{ assertReflectionArray("<null>", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionBooleanArray$catena_1() {
        boolean[] array = new boolean[] { true, false, false };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{true,false,false}]", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        assertReflectionArray("<null>", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionBooleanArray$catena_2() {
        boolean[] array = new boolean[] { true, false, false };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{true,false,false}]", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        try{ assertReflectionArray("<null>", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 180 range 8 at src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java
to
    public void testReflectionyteArray$catena_0() {
        byte[] array = new byte[] { 1, 2, -3, 4 };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));                  /***** ORIGINAL ASSERTION IS HERE *****/
        array = null;
        try{ assertReflectionArray("<null>", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionyteArray$catena_1() {
        byte[] array = new byte[] { 1, 2, -3, 4 };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        assertReflectionArray("<null>", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionyteArray$catena_2() {
        byte[] array = new byte[] { 1, 2, -3, 4 };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        try{ assertReflectionArray("<null>", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 198 range 8 at src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java
to
    public void testReflectionDoubleArray$catena_0() {
        double[] array = new double[] { 1.0, 2.9876, -3.00001, 4.3 };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array));         /***** ORIGINAL ASSERTION IS HERE *****/
        array = null;
        try{ assertReflectionArray("<null>", array);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionDoubleArray$catena_1() {
        double[] array = new double[] { 1.0, 2.9876, -3.00001, 4.3 };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        assertReflectionArray("<null>", array);                                                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ this.validateNullToStringStyleRegistry();                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionDoubleArray$catena_2() {
        double[] array = new double[] { 1.0, 2.9876, -3.00001, 4.3 };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        try{ assertReflectionArray("<null>", array);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        this.validateNullToStringStyleRegistry();                                                                 /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 246 range 8 at src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java
to
    public void testReflectionIntArrayArray$catena_0() {
        int[][] array = new int[][] { { 1, 2 }, null, { 5 } };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));          /***** ORIGINAL ASSERTION IS HERE *****/
        array = null;
        try{ assertReflectionArray("<null>", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionIntArrayArray$catena_1() {
        int[][] array = new int[][] { { 1, 2 }, null, { 5 } };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        assertReflectionArray("<null>", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionIntArrayArray$catena_2() {
        int[][] array = new int[][] { { 1, 2 }, null, { 5 } };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        try{ assertReflectionArray("<null>", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 153 range 8 at src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java
to
    public void testReflectionLongArray$catena_0() {
        long[] array = new long[] { 1, 2, -3, 4 };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));                  /***** ORIGINAL ASSERTION IS HERE *****/
        array = null;
        try{ assertReflectionArray("<null>", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionLongArray$catena_1() {
        long[] array = new long[] { 1, 2, -3, 4 };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        assertReflectionArray("<null>", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionLongArray$catena_2() {
        long[] array = new long[] { 1, 2, -3, 4 };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        try{ assertReflectionArray("<null>", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 255 range 8 at src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java
to
    public void testReflectionhortArrayArray$catena_0() {
        short[][] array = new short[][] { { 1, 2 }, null, { 5 } };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));          /***** ORIGINAL ASSERTION IS HERE *****/
        array = null;
        try{ assertReflectionArray("<null>", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionhortArrayArray$catena_1() {
        short[][] array = new short[][] { { 1, 2 }, null, { 5 } };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        assertReflectionArray("<null>", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionhortArrayArray$catena_2() {
        short[][] array = new short[][] { { 1, 2 }, null, { 5 } };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        try{ assertReflectionArray("<null>", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 144 range 8 at src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java
to
    public void testReflectionObjectArray$catena_0() {
        Object[] array = new Object[] { null, base, new int[] { 3, 6 } };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + "[{<null>,5,{3,6}}]", ToStringBuilder.reflectionToString(array));            /***** ORIGINAL ASSERTION IS HERE *****/
        array = null;
        try{ assertReflectionArray("<null>", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionObjectArray$catena_1() {
        Object[] array = new Object[] { null, base, new int[] { 3, 6 } };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{<null>,5,{3,6}}]", ToStringBuilder.reflectionToString(array));       }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        assertReflectionArray("<null>", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionObjectArray$catena_2() {
        Object[] array = new Object[] { null, base, new int[] { 3, 6 } };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{<null>,5,{3,6}}]", ToStringBuilder.reflectionToString(array));       }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        try{ assertReflectionArray("<null>", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 542 range 10 at src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java
to
    public void testReflectionObjectCycle$catena_0() throws Exception {
        ReflectionTestCycleA a = new ReflectionTestCycleA();
        ReflectionTestCycleB b = new ReflectionTestCycleB();
        a.b = b;
        b.a = a;
        assertEquals(
            this.toBaseString(a) + "[b=" + this.toBaseString(b) + "[a=" + this.toBaseString(a) + "]]",
            a.toString());                                                                                  /***** ORIGINAL ASSERTION IS HERE *****/
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionObjectCycle$catena_1() throws Exception {
        ReflectionTestCycleA a = new ReflectionTestCycleA();
        ReflectionTestCycleB b = new ReflectionTestCycleB();
        a.b = b;
        b.a = a;
        try{ assertEquals(
            this.toBaseString(a) + "[b=" + this.toBaseString(b) + "[a=" + this.toBaseString(a) + "]]",
            a.toString());                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 291 range 9 at src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java
to
    public void testReflectionBooleanArrayArray$catena_0() {
        boolean[][] array = new boolean[][] { { true, false }, null, { false } };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array));         /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(baseStr + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        try{ assertReflectionArray("<null>", array);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionBooleanArrayArray$catena_1() {
        boolean[][] array = new boolean[][] { { true, false }, null, { false } };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(baseStr + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array));         /***** ORIGINAL ASSERTION IS HERE *****/
        array = null;
        try{ assertReflectionArray("<null>", array);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionBooleanArrayArray$catena_2() {
        boolean[][] array = new boolean[][] { { true, false }, null, { false } };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        assertReflectionArray("<null>", array);                                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        try{ this.validateNullToStringStyleRegistry();                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionBooleanArrayArray$catena_3() {
        boolean[][] array = new boolean[][] { { true, false }, null, { false } };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(baseStr + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        try{ assertReflectionArray("<null>", array);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        this.validateNullToStringStyleRegistry();                                                                     /***** ORIGINAL ASSERTION IS HERE *****/
    }
NOTICE: patch for flaky tests of Lang_34, rename org.apache.commons.lang3.builder.ToStringBuilderTest::testSimpleReflectionObjectCycle$catena_1
edit: replace from 506 range 6 at src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java
to
    public void testSimpleReflectionObjectCycle$catena_0() throws Exception {
        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture();
        simple.o = simple;
        assertEquals(this.toBaseString(simple) + "[o=" + this.toBaseString(simple) + "]", simple.toString());         /***** ORIGINAL ASSERTION IS HERE *****/
        try{ this.validateNullToStringStyleRegistry();                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testSimpleReflectionObjectCycle_catena_1() throws Exception {
        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture();
        simple.o = simple;
        try{ assertEquals(this.toBaseString(simple) + "[o=" + this.toBaseString(simple) + "]", simple.toString());    }catch(Throwable __SHOULD_BE_IGNORED){}
        this.validateNullToStringStyleRegistry();                                                                     /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 264 range 8 at src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java
to
    public void testReflectionByteArrayArray$catena_0() {
        byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));          /***** ORIGINAL ASSERTION IS HERE *****/
        array = null;
        try{ assertReflectionArray("<null>", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionByteArrayArray$catena_1() {
        byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        assertReflectionArray("<null>", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionByteArrayArray$catena_2() {
        byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        try{ assertReflectionArray("<null>", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 388 range 13 at src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java
to
    public void testReflectionArrayCycleLevel2$catena_0() throws Exception {
        Object[] objects = new Object[1];
        Object[] objectsLevel2 = new Object[1];
        objects[0] = objectsLevel2;
        objectsLevel2[0] = objects;
        assertEquals(
            this.toBaseString(objects) + "[{{" + this.toBaseString(objects) + "}}]",
            ToStringBuilder.reflectionToString(objects));                                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(
            this.toBaseString(objectsLevel2) + "[{{" + this.toBaseString(objectsLevel2) + "}}]",
            ToStringBuilder.reflectionToString(objectsLevel2));                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionArrayCycleLevel2$catena_1() throws Exception {
        Object[] objects = new Object[1];
        Object[] objectsLevel2 = new Object[1];
        objects[0] = objectsLevel2;
        objectsLevel2[0] = objects;
        try{ assertEquals(
            this.toBaseString(objects) + "[{{" + this.toBaseString(objects) + "}}]",
            ToStringBuilder.reflectionToString(objects));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(
            this.toBaseString(objectsLevel2) + "[{{" + this.toBaseString(objectsLevel2) + "}}]",
            ToStringBuilder.reflectionToString(objectsLevel2));                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionArrayCycleLevel2$catena_2() throws Exception {
        Object[] objects = new Object[1];
        Object[] objectsLevel2 = new Object[1];
        objects[0] = objectsLevel2;
        objectsLevel2[0] = objects;
        try{ assertEquals(
            this.toBaseString(objects) + "[{{" + this.toBaseString(objects) + "}}]",
            ToStringBuilder.reflectionToString(objects));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(
            this.toBaseString(objectsLevel2) + "[{{" + this.toBaseString(objectsLevel2) + "}}]",
            ToStringBuilder.reflectionToString(objectsLevel2));                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 559 range 21 at src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java
to
    public void testReflectionArrayAndObjectCycle$catena_0() throws Exception {
        Object[] objects = new Object[1];
        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture(objects);
        objects[0] = simple;
        assertEquals(
            this.toBaseString(objects)
                + "[{"
                + this.toBaseString(simple)
                + "[o="
                + this.toBaseString(objects)
                + "]"
                + "}]",
            ToStringBuilder.reflectionToString(objects));                                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(
            this.toBaseString(simple)
                + "[o={"
                + this.toBaseString(simple)
                + "}]",
            ToStringBuilder.reflectionToString(simple));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionArrayAndObjectCycle$catena_1() throws Exception {
        Object[] objects = new Object[1];
        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture(objects);
        objects[0] = simple;
        try{ assertEquals(
            this.toBaseString(objects)
                + "[{"
                + this.toBaseString(simple)
                + "[o="
                + this.toBaseString(objects)
                + "]"
                + "}]",
            ToStringBuilder.reflectionToString(objects));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(
            this.toBaseString(simple)
                + "[o={"
                + this.toBaseString(simple)
                + "}]",
            ToStringBuilder.reflectionToString(simple));                                                    /***** ORIGINAL ASSERTION IS HERE *****/
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionArrayAndObjectCycle$catena_2() throws Exception {
        Object[] objects = new Object[1];
        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture(objects);
        objects[0] = simple;
        try{ assertEquals(
            this.toBaseString(objects)
                + "[{"
                + this.toBaseString(simple)
                + "[o="
                + this.toBaseString(objects)
                + "]"
                + "}]",
            ToStringBuilder.reflectionToString(objects));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(
            this.toBaseString(simple)
                + "[o={"
                + this.toBaseString(simple)
                + "}]",
            ToStringBuilder.reflectionToString(simple));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 273 range 8 at src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java
to
    public void testReflectionCharArrayArray$catena_0() {
        char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + "[{{A,B},<null>,{p}}]", ToStringBuilder.reflectionToString(array));          /***** ORIGINAL ASSERTION IS HERE *****/
        array = null;
        try{ assertReflectionArray("<null>", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionCharArrayArray$catena_1() {
        char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{{A,B},<null>,{p}}]", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        assertReflectionArray("<null>", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionCharArrayArray$catena_2() {
        char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{{A,B},<null>,{p}}]", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        try{ assertReflectionArray("<null>", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 171 range 8 at src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java
to
    public void testReflectionShortArray$catena_0() {
        short[] array = new short[] { 1, 2, -3, 4 };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));                  /***** ORIGINAL ASSERTION IS HERE *****/
        array = null;
        try{ assertReflectionArray("<null>", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionShortArray$catena_1() {
        short[] array = new short[] { 1, 2, -3, 4 };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        assertReflectionArray("<null>", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionShortArray$catena_2() {
        short[] array = new short[] { 1, 2, -3, 4 };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        try{ assertReflectionArray("<null>", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 518 range 5 at src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java
to
    public void testSelfInstanceVarReflectionObjectCycle$catena_0() throws Exception {
        SelfInstanceVarReflectionTestFixture test = new SelfInstanceVarReflectionTestFixture();
        assertEquals(this.toBaseString(test) + "[typeIsSelf=" + this.toBaseString(test) + "]", test.toString());         /***** ORIGINAL ASSERTION IS HERE *****/
        try{ this.validateNullToStringStyleRegistry();                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testSelfInstanceVarReflectionObjectCycle$catena_1() throws Exception {
        SelfInstanceVarReflectionTestFixture test = new SelfInstanceVarReflectionTestFixture();
        try{ assertEquals(this.toBaseString(test) + "[typeIsSelf=" + this.toBaseString(test) + "]", test.toString());    }catch(Throwable __SHOULD_BE_IGNORED){}
        this.validateNullToStringStyleRegistry();                                                                        /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 162 range 8 at src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java
to
    public void testReflectionIntArray$catena_0() {
        int[] array = new int[] { 1, 2, -3, 4 };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));                  /***** ORIGINAL ASSERTION IS HERE *****/
        array = null;
        try{ assertReflectionArray("<null>", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionIntArray$catena_1() {
        int[] array = new int[] { 1, 2, -3, 4 };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        assertReflectionArray("<null>", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionIntArray$catena_2() {
        int[] array = new int[] { 1, 2, -3, 4 };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        try{ assertReflectionArray("<null>", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 189 range 8 at src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java
to
    public void testReflectionCharArray$catena_0() {
        char[] array = new char[] { 'A', '2', '_', 'D' };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + "[{A,2,_,D}]", ToStringBuilder.reflectionToString(array));                   /***** ORIGINAL ASSERTION IS HERE *****/
        array = null;
        try{ assertReflectionArray("<null>", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionCharArray$catena_1() {
        char[] array = new char[] { 'A', '2', '_', 'D' };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{A,2,_,D}]", ToStringBuilder.reflectionToString(array));              }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        assertReflectionArray("<null>", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionCharArray$catena_2() {
        char[] array = new char[] { 'A', '2', '_', 'D' };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{A,2,_,D}]", ToStringBuilder.reflectionToString(array));              }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        try{ assertReflectionArray("<null>", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 227 range 8 at src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java
to
    public void testReflectionFloatArrayArray$catena_0() {
        float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array));         /***** ORIGINAL ASSERTION IS HERE *****/
        array = null;
        try{ assertReflectionArray("<null>", array);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ this.validateNullToStringStyleRegistry();                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionFloatArrayArray$catena_1() {
        float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        assertReflectionArray("<null>", array);                                                                      /***** ORIGINAL ASSERTION IS HERE *****/
        try{ this.validateNullToStringStyleRegistry();                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReflectionFloatArrayArray$catena_2() {
        float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } };
        String baseStr = this.toBaseString(array);
        try{ assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}
        array = null;
        try{ assertReflectionArray("<null>", array);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        this.validateNullToStringStyleRegistry();                                                                    /***** ORIGINAL ASSERTION IS HERE *****/
    }
trace file: src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java
new test num: 89
ori test num: 0
pattern: 00
patches are written to file
running tests...
used time: Finished in 25.72 seconds
Failing tests: 27
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionIntArray$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testSelfInstanceTwoVarsReflectionObjectCycle$catena_1
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionHierarchy$catena_16
	org.apache.commons.lang3.builder.ToStringBuilderTest::testSelfInstanceVarReflectionObjectCycle$catena_1
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionDoubleArray$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionyteArray$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionCharArray$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionIntArrayArray$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionFloatArray$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionBooleanArrayArray$catena_3
	org.apache.commons.lang3.builder.ToStringBuilderTest::testObjectCycle$catena_1
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionBooleanArray$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionObjectArray$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayCycleLevel2$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionFloatArrayArray$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionObjectCycle$catena_1
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionShortArray$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayCycle$catena_1
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionByteArrayArray$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionDoubleArrayArray_catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayAndObjectCycle$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayArrayCycle_catena_1
	org.apache.commons.lang3.builder.ToStringBuilderTest::testSimpleReflectionObjectCycle_catena_1
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionLongArrayArray$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionCharArrayArray$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionLongArray$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionhortArrayArray$catena_2
processed: 00
pattern: 01
try to fix hunk: 1
replace from 164 with range 1 to
        return m != null && m.containsKey(value);

patches are written to file
running tests...
used time: Finished in 19.52 seconds
Failing tests: 27
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionIntArray$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testSelfInstanceTwoVarsReflectionObjectCycle$catena_1
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionHierarchy$catena_16
	org.apache.commons.lang3.builder.ToStringBuilderTest::testSelfInstanceVarReflectionObjectCycle$catena_1
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionDoubleArray$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionyteArray$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionCharArray$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionIntArrayArray$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionFloatArray$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionBooleanArrayArray$catena_3
	org.apache.commons.lang3.builder.ToStringBuilderTest::testObjectCycle$catena_1
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionBooleanArray$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionObjectArray$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayCycleLevel2$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionFloatArrayArray$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionObjectCycle$catena_1
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionShortArray$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayCycle$catena_1
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionByteArrayArray$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionDoubleArrayArray_catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayAndObjectCycle$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayArrayCycle_catena_1
	org.apache.commons.lang3.builder.ToStringBuilderTest::testSimpleReflectionObjectCycle_catena_1
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionLongArrayArray$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionCharArrayArray$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionLongArray$catena_2
	org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionhortArrayArray$catena_2
No new failing tests but only 1 hunk
processed: 01
pattern: 10
try to fix hunk: 0
replace from 148 with range 1 to
        return REGISTRY.get();

patches are written to file
running tests...
used time: Finished in 16.05 seconds
Failing tests: 21
	org.apache.commons.lang3.ArrayUtilsTest::testToString
	org.apache.commons.lang3.builder.DefaultToStringStyleTest::testObjectArray
	org.apache.commons.lang3.builder.MultiLineToStringStyleTest::testObjectArray
	org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest::testObjectArray
	org.apache.commons.lang3.builder.ShortPrefixToStringStyleTest::testObjectArray
	org.apache.commons.lang3.builder.SimpleToStringStyleTest::testObjectArray
	org.apache.commons.lang3.builder.SimpleToStringStyleTest::testLongArrayArray
	org.apache.commons.lang3.builder.SimpleToStringStyleTest::testLongArray
	org.apache.commons.lang3.builder.SimpleToStringStyleTest::testObject
	org.apache.commons.lang3.builder.SimpleToStringStyleTest::testPerson
	org.apache.commons.lang3.builder.SimpleToStringStyleTest::testAppendSuper
	org.apache.commons.lang3.builder.StandardToStringStyleTest::testObjectArray
	org.apache.commons.lang3.builder.ToStringBuilderTest::testObjectArray
	org.apache.commons.lang3.text.StrTokenizerTest::test1
	org.apache.commons.lang3.text.StrTokenizerTest::test2
	org.apache.commons.lang3.text.StrTokenizerTest::test3
	org.apache.commons.lang3.text.StrTokenizerTest::test4
	org.apache.commons.lang3.text.StrTokenizerTest::test5
	org.apache.commons.lang3.text.StrTokenizerTest::test6
	org.apache.commons.lang3.text.StrTokenizerTest::test7
	org.apache.commons.lang3.text.StrTokenizerTest::test8
Includes new failing tests, set to unusable
processed: 10
pattern: 11
try to fix hunk: 0
replace from 148 with range 1 to
        return REGISTRY.get();

try to fix hunk: 1
replace from 164 with range 1 to
        return m != null && m.containsKey(value);

patches are written to file
running tests...
used time: Finished in 20.30 seconds
Failing tests: 0
Can independently fix ['org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionByteArrayArray$catena_2', 'org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionObjectArray$catena_2', 'org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionCharArray$catena_2', 'org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionHierarchy$catena_16', 'org.apache.commons.lang3.builder.ToStringBuilderTest::testSelfInstanceTwoVarsReflectionObjectCycle$catena_1', 'org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionShortArray$catena_2', 'org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionyteArray$catena_2', 'org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionIntArray$catena_2', 'org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionDoubleArrayArray_catena_2', 'org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionhortArrayArray$catena_2', 'org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionBooleanArrayArray$catena_3', 'org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionFloatArrayArray$catena_2', 'org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionCharArrayArray$catena_2', 'org.apache.commons.lang3.builder.ToStringBuilderTest::testSimpleReflectionObjectCycle_catena_1', 'org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionDoubleArray$catena_2', 'org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayAndObjectCycle$catena_2', 'org.apache.commons.lang3.builder.ToStringBuilderTest::testObjectCycle$catena_1', 'org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionFloatArray$catena_2', 'org.apache.commons.lang3.builder.ToStringBuilderTest::testSelfInstanceVarReflectionObjectCycle$catena_1', 'org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionLongArray$catena_2', 'org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionIntArrayArray$catena_2', 'org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayArrayCycle_catena_1', 'org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionObjectCycle$catena_1', 'org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayCycle$catena_1', 'org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionBooleanArray$catena_2', 'org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionLongArrayArray$catena_2', 'org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayCycleLevel2$catena_2']
select new bug
Pattern: 11
new failing tests:
org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionByteArrayArray$catena_2
org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionObjectArray$catena_2
org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionCharArray$catena_2
org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionHierarchy$catena_16
org.apache.commons.lang3.builder.ToStringBuilderTest::testSelfInstanceTwoVarsReflectionObjectCycle$catena_1
org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionShortArray$catena_2
org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionyteArray$catena_2
org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionIntArray$catena_2
org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionDoubleArrayArray_catena_2
org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionhortArrayArray$catena_2
org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionBooleanArrayArray$catena_3
org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionFloatArrayArray$catena_2
org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionCharArrayArray$catena_2
org.apache.commons.lang3.builder.ToStringBuilderTest::testSimpleReflectionObjectCycle_catena_1
org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionDoubleArray$catena_2
org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayAndObjectCycle$catena_2
org.apache.commons.lang3.builder.ToStringBuilderTest::testObjectCycle$catena_1
org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionFloatArray$catena_2
org.apache.commons.lang3.builder.ToStringBuilderTest::testSelfInstanceVarReflectionObjectCycle$catena_1
org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionLongArray$catena_2
org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionIntArrayArray$catena_2
org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayArrayCycle_catena_1
org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionObjectCycle$catena_1
org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayCycle$catena_1
org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionBooleanArray$catena_2
org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionLongArrayArray$catena_2
org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayCycleLevel2$catena_2
Save found bug
processed: 11
Find 1 new bugs
