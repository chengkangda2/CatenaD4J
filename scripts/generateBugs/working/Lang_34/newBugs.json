{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
            "from_line_no": 148,
            "to_line_no": 148,
            "replaced_with": "        return REGISTRY.get();\n",
            "replaced": "        return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();\n",
            "patch_type": "replace",
            "next_line_no": 149
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
            "from_line_no": 164,
            "to_line_no": 164,
            "replaced_with": "        return m != null && m.containsKey(value);\n",
            "replaced": "        return m.containsKey(value);\n",
            "patch_type": "replace",
            "next_line_no": 165
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testObjectCycle",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionHierarchy",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testSelfInstanceTwoVarsReflectionObjectCycle",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayCycle",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionLongArrayArray",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayArrayCycle",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionFloatArray",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionDoubleArrayArray",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionBooleanArray",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionyteArray",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionDoubleArray",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionIntArrayArray",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionLongArray",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionhortArrayArray",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionObjectArray",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionObjectCycle",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionBooleanArrayArray",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testSimpleReflectionObjectCycle",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionByteArrayArray",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayCycleLevel2",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayAndObjectCycle",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionCharArrayArray",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionShortArray",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testSelfInstanceVarReflectionObjectCycle",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionIntArray",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionCharArray",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionFloatArrayArray"
        ],
        "org.apache.commons.lang3.builder.ToStringBuilderTest::testObjectCycle": {
            "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "Instance": "Begin: Pos(829, 12)\nEnd: Pos(838, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java\nName: testObjectCycle\nChilds: [StatementAssertion<Begin: Pos(836, 9), End: Pos(836, 45)>,\nStatementAssertion<Begin: Pos(837, 9), End: Pos(837, 44)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "name": "testObjectCycle",
            "begin": "Pos(829, 12)",
            "end": "Pos(838, 5)",
            "begin_line_no": 829,
            "end_line_no": 838,
            "child": [
                "Begin: Pos(836, 9)\nEnd: Pos(836, 45)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(837, 9)\nEnd: Pos(837, 44)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testObjectCycle$catena_0() {\n        ObjectCycle a = new ObjectCycle();\n        ObjectCycle b = new ObjectCycle();\n        a.obj = b;\n        b.obj = a;\n\n        String expected = toBaseString(a) + \"[\" + toBaseString(b) + \"[\" + toBaseString(a) + \"]]\";\n        assertEquals(expected, a.toString());                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ validateNullToStringStyleRegistry();                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testObjectCycle$catena_1() {\n        ObjectCycle a = new ObjectCycle();\n        ObjectCycle b = new ObjectCycle();\n        a.obj = b;\n        b.obj = a;\n\n        String expected = toBaseString(a) + \"[\" + toBaseString(b) + \"[\" + toBaseString(a) + \"]]\";\n        try{ assertEquals(expected, a.toString());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        validateNullToStringStyleRegistry();                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testObjectCycle$catena_0() {\n        ObjectCycle a = new ObjectCycle();\n        ObjectCycle b = new ObjectCycle();\n        a.obj = b;\n        b.obj = a;\n\n        String expected = toBaseString(a) + \"[\" + toBaseString(b) + \"[\" + toBaseString(a) + \"]]\";\n        assertEquals(expected, a.toString());                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ validateNullToStringStyleRegistry();                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testObjectCycle$catena_1() {\n        ObjectCycle a = new ObjectCycle();\n        ObjectCycle b = new ObjectCycle();\n        a.obj = b;\n        b.obj = a;\n\n        String expected = toBaseString(a) + \"[\" + toBaseString(b) + \"[\" + toBaseString(a) + \"]]\";\n        try{ assertEquals(expected, a.toString());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        validateNullToStringStyleRegistry();                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionHierarchy": {
            "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "check": [
                "Selector contains assertion"
            ],
            "Instance": "Begin: Pos(313, 12)\nEnd: Pos(336, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java\nName: testReflectionHierarchy\nChilds: [StatementAssertion<Begin: Pos(316, 9), End: Pos(316, 83)>,\nStatementAssertion<Begin: Pos(317, 9), End: Pos(317, 89)>,\nStatementAssertion<Begin: Pos(318, 9), End: Pos(318, 96)>,\nStatementAssertion<Begin: Pos(319, 9), End: Pos(319, 108)>,\nStatementAssertion<Begin: Pos(320, 9), End: Pos(320, 102)>,\nStatementAssertion<Begin: Pos(321, 9), End: Pos(321, 110)>,\nStatementAssertion<Begin: Pos(322, 9), End: Pos(322, 126)>,\nStatementAssertion<Begin: Pos(326, 9), End: Pos(326, 87)>,\nStatementAssertion<Begin: Pos(327, 9), End: Pos(327, 87)>,\nStatementAssertion<Begin: Pos(328, 9), End: Pos(328, 93)>,\nStatementAssertion<Begin: Pos(329, 9), End: Pos(329, 100)>,\nStatementAssertion<Begin: Pos(330, 9), End: Pos(330, 125)>,\nStatementAssertion<Begin: Pos(331, 9), End: Pos(331, 106)>,\nStatementAssertion<Begin: Pos(332, 9), End: Pos(332, 114)>,\nStatementAssertion<Begin: Pos(333, 9), End: Pos(333, 130)>,\nStatementAssertion<Begin: Pos(334, 9), End: Pos(334, 126)>,\nStatementAssertion<Begin: Pos(335, 9), End: Pos(335, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "name": "testReflectionHierarchy",
            "begin": "Pos(313, 12)",
            "end": "Pos(336, 5)",
            "begin_line_no": 313,
            "end_line_no": 336,
            "child": [
                "Begin: Pos(316, 9)\nEnd: Pos(316, 83)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(317, 9)\nEnd: Pos(317, 89)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(318, 9)\nEnd: Pos(318, 96)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(319, 9)\nEnd: Pos(319, 108)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(320, 9)\nEnd: Pos(320, 102)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(321, 9)\nEnd: Pos(321, 110)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(322, 9)\nEnd: Pos(322, 126)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(326, 9)\nEnd: Pos(326, 87)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(327, 9)\nEnd: Pos(327, 87)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(328, 9)\nEnd: Pos(328, 93)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(329, 9)\nEnd: Pos(329, 100)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(330, 9)\nEnd: Pos(330, 125)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(331, 9)\nEnd: Pos(331, 106)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(332, 9)\nEnd: Pos(332, 114)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(333, 9)\nEnd: Pos(333, 130)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(334, 9)\nEnd: Pos(334, 126)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(335, 9)\nEnd: Pos(335, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testReflectionHierarchy$catena_0() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionHierarchy$catena_1() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionHierarchy$catena_2() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionHierarchy$catena_3() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionHierarchy$catena_4() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionHierarchy$catena_5() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionHierarchy$catena_6() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionHierarchy$catena_7() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionHierarchy$catena_8() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionHierarchy$catena_9() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionHierarchy$catena_10() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionHierarchy$catena_11() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionHierarchy$catena_12() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionHierarchy$catena_13() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionHierarchy$catena_14() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionHierarchy$catena_15() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionHierarchy$catena_16() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testReflectionHierarchy$catena_0() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testReflectionHierarchy$catena_1() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testReflectionHierarchy$catena_2() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void testReflectionHierarchy$catena_3() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    public void testReflectionHierarchy$catena_4() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    public void testReflectionHierarchy$catena_5() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "6": "    public void testReflectionHierarchy$catena_6() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "7": "    public void testReflectionHierarchy$catena_7() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "8": "    public void testReflectionHierarchy$catena_8() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "9": "    public void testReflectionHierarchy$catena_9() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "10": "    public void testReflectionHierarchy$catena_10() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "11": "    public void testReflectionHierarchy$catena_11() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "12": "    public void testReflectionHierarchy$catena_12() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "13": "    public void testReflectionHierarchy$catena_13() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "14": "    public void testReflectionHierarchy$catena_14() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "15": "    public void testReflectionHierarchy$catena_15() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "16": "    public void testReflectionHierarchy$catena_16() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.builder.ToStringBuilderTest::testSelfInstanceTwoVarsReflectionObjectCycle": {
            "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "check": [
                "Selector contains assertion"
            ],
            "Instance": "Begin: Pos(530, 12)\nEnd: Pos(534, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java\nName: testSelfInstanceTwoVarsReflectionObjectCycle\nChilds: [StatementAssertion<Begin: Pos(532, 9), End: Pos(532, 161)>,\nStatementAssertion<Begin: Pos(533, 9), End: Pos(533, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "name": "testSelfInstanceTwoVarsReflectionObjectCycle",
            "begin": "Pos(530, 12)",
            "end": "Pos(534, 5)",
            "begin_line_no": 530,
            "end_line_no": 534,
            "child": [
                "Begin: Pos(532, 9)\nEnd: Pos(532, 161)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(533, 9)\nEnd: Pos(533, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testSelfInstanceTwoVarsReflectionObjectCycle$catena_0() throws Exception {\n        SelfInstanceTwoVarsReflectionTestFixture test = new SelfInstanceTwoVarsReflectionTestFixture();\n        assertEquals(this.toBaseString(test) + \"[typeIsSelf=\" + this.toBaseString(test) + \",otherType=\" + test.getOtherType().toString() + \"]\", test.toString());         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testSelfInstanceTwoVarsReflectionObjectCycle$catena_1() throws Exception {\n        SelfInstanceTwoVarsReflectionTestFixture test = new SelfInstanceTwoVarsReflectionTestFixture();\n        try{ assertEquals(this.toBaseString(test) + \"[typeIsSelf=\" + this.toBaseString(test) + \",otherType=\" + test.getOtherType().toString() + \"]\", test.toString());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testSelfInstanceTwoVarsReflectionObjectCycle$catena_0() throws Exception {\n        SelfInstanceTwoVarsReflectionTestFixture test = new SelfInstanceTwoVarsReflectionTestFixture();\n        assertEquals(this.toBaseString(test) + \"[typeIsSelf=\" + this.toBaseString(test) + \",otherType=\" + test.getOtherType().toString() + \"]\", test.toString());         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testSelfInstanceTwoVarsReflectionObjectCycle$catena_1() throws Exception {\n        SelfInstanceTwoVarsReflectionTestFixture test = new SelfInstanceTwoVarsReflectionTestFixture();\n        try{ assertEquals(this.toBaseString(test) + \"[typeIsSelf=\" + this.toBaseString(test) + \",otherType=\" + test.getOtherType().toString() + \"]\", test.toString());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayCycle": {
            "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "check": [
                "Selector contains assertion"
            ],
            "Instance": "Begin: Pos(376, 12)\nEnd: Pos(383, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java\nName: testReflectionArrayCycle\nChilds: [StatementAssertion<Begin: Pos(379, 9), End: Pos(381, 57)>,\nStatementAssertion<Begin: Pos(382, 9), End: Pos(382, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "name": "testReflectionArrayCycle",
            "begin": "Pos(376, 12)",
            "end": "Pos(383, 5)",
            "begin_line_no": 376,
            "end_line_no": 383,
            "child": [
                "Begin: Pos(379, 9)\nEnd: Pos(381, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(382, 9)\nEnd: Pos(382, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testReflectionArrayCycle$catena_0() throws Exception {\n        Object[] objects = new Object[1];\n        objects[0] = objects;\n        assertEquals(\n            this.toBaseString(objects) + \"[{\" + this.toBaseString(objects) + \"}]\",\n            ToStringBuilder.reflectionToString(objects));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionArrayCycle$catena_1() throws Exception {\n        Object[] objects = new Object[1];\n        objects[0] = objects;\n        try{ assertEquals(\n            this.toBaseString(objects) + \"[{\" + this.toBaseString(objects) + \"}]\",\n            ToStringBuilder.reflectionToString(objects));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testReflectionArrayCycle$catena_0() throws Exception {\n        Object[] objects = new Object[1];\n        objects[0] = objects;\n        assertEquals(\n            this.toBaseString(objects) + \"[{\" + this.toBaseString(objects) + \"}]\",\n            ToStringBuilder.reflectionToString(objects));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testReflectionArrayCycle$catena_1() throws Exception {\n        Object[] objects = new Object[1];\n        objects[0] = objects;\n        try{ assertEquals(\n            this.toBaseString(objects) + \"[{\" + this.toBaseString(objects) + \"}]\",\n            ToStringBuilder.reflectionToString(objects));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionLongArrayArray": {
            "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "check": [
                "Selector contains assertion"
            ],
            "Instance": "Begin: Pos(237, 12)\nEnd: Pos(244, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java\nName: testReflectionLongArrayArray\nChilds: [StatementAssertion<Begin: Pos(240, 9), End: Pos(240, 98)>,\nStatementAssertion<Begin: Pos(242, 9), End: Pos(242, 47)>,\nStatementAssertion<Begin: Pos(243, 9), End: Pos(243, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "name": "testReflectionLongArrayArray",
            "begin": "Pos(237, 12)",
            "end": "Pos(244, 5)",
            "begin_line_no": 237,
            "end_line_no": 244,
            "child": [
                "Begin: Pos(240, 9)\nEnd: Pos(240, 98)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(242, 9)\nEnd: Pos(242, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(243, 9)\nEnd: Pos(243, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testReflectionLongArrayArray$catena_0() {\n        long[][] array = new long[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));          /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionLongArrayArray$catena_1() {\n        long[][] array = new long[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionLongArrayArray$catena_2() {\n        long[][] array = new long[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testReflectionLongArrayArray$catena_0() {\n        long[][] array = new long[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));          /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testReflectionLongArrayArray$catena_1() {\n        long[][] array = new long[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testReflectionLongArrayArray$catena_2() {\n        long[][] array = new long[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayArrayCycle": {
            "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "check": [
                "Selector contains assertion"
            ],
            "Instance": "Begin: Pos(402, 12)\nEnd: Pos(422, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java\nName: testReflectionArrayArrayCycle\nChilds: [StatementAssertion<Begin: Pos(409, 9), End: Pos(420, 57)>,\nStatementAssertion<Begin: Pos(421, 9), End: Pos(421, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "name": "testReflectionArrayArrayCycle",
            "begin": "Pos(402, 12)",
            "end": "Pos(422, 5)",
            "begin_line_no": 402,
            "end_line_no": 422,
            "child": [
                "Begin: Pos(409, 9)\nEnd: Pos(420, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(421, 9)\nEnd: Pos(421, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testReflectionArrayArrayCycle$catena_0() throws Exception {\n        Object[][] objects = new Object[2][2];\n        objects[0][0] = objects;\n        objects[0][1] = objects;\n        objects[1][0] = objects;\n        objects[1][1] = objects;\n        String basicToString = this.toBaseString(objects);\n        assertEquals(\n            basicToString\n                + \"[{{\"\n                + basicToString\n                + \",\"\n                + basicToString\n                + \"},{\"\n                + basicToString\n                + \",\"\n                + basicToString\n                + \"}}]\",\n            ToStringBuilder.reflectionToString(objects));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionArrayArrayCycle_catena_1() throws Exception {\n        Object[][] objects = new Object[2][2];\n        objects[0][0] = objects;\n        objects[0][1] = objects;\n        objects[1][0] = objects;\n        objects[1][1] = objects;\n        String basicToString = this.toBaseString(objects);\n        try{ assertEquals(\n            basicToString\n                + \"[{{\"\n                + basicToString\n                + \",\"\n                + basicToString\n                + \"},{\"\n                + basicToString\n                + \",\"\n                + basicToString\n                + \"}}]\",\n            ToStringBuilder.reflectionToString(objects));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testReflectionArrayArrayCycle$catena_0() throws Exception {\n        Object[][] objects = new Object[2][2];\n        objects[0][0] = objects;\n        objects[0][1] = objects;\n        objects[1][0] = objects;\n        objects[1][1] = objects;\n        String basicToString = this.toBaseString(objects);\n        assertEquals(\n            basicToString\n                + \"[{{\"\n                + basicToString\n                + \",\"\n                + basicToString\n                + \"},{\"\n                + basicToString\n                + \",\"\n                + basicToString\n                + \"}}]\",\n            ToStringBuilder.reflectionToString(objects));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testReflectionArrayArrayCycle_catena_1() throws Exception {\n        Object[][] objects = new Object[2][2];\n        objects[0][0] = objects;\n        objects[0][1] = objects;\n        objects[1][0] = objects;\n        objects[1][1] = objects;\n        String basicToString = this.toBaseString(objects);\n        try{ assertEquals(\n            basicToString\n                + \"[{{\"\n                + basicToString\n                + \",\"\n                + basicToString\n                + \"},{\"\n                + basicToString\n                + \",\"\n                + basicToString\n                + \"}}]\",\n            ToStringBuilder.reflectionToString(objects));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionFloatArray": {
            "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "check": [
                "Selector contains assertion"
            ],
            "Instance": "Begin: Pos(207, 12)\nEnd: Pos(214, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java\nName: testReflectionFloatArray\nChilds: [StatementAssertion<Begin: Pos(210, 9), End: Pos(210, 105)>,\nStatementAssertion<Begin: Pos(212, 9), End: Pos(212, 47)>,\nStatementAssertion<Begin: Pos(213, 9), End: Pos(213, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "name": "testReflectionFloatArray",
            "begin": "Pos(207, 12)",
            "end": "Pos(214, 5)",
            "begin_line_no": 207,
            "end_line_no": 214,
            "child": [
                "Begin: Pos(210, 9)\nEnd: Pos(210, 105)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(212, 9)\nEnd: Pos(212, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(213, 9)\nEnd: Pos(213, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testReflectionFloatArray$catena_0() {\n        float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));         /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionFloatArray$catena_1() {\n        float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionFloatArray$catena_2() {\n        float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testReflectionFloatArray$catena_0() {\n        float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));         /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testReflectionFloatArray$catena_1() {\n        float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testReflectionFloatArray$catena_2() {\n        float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionDoubleArrayArray": {
            "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "check": [
                "Selector contains assertion"
            ],
            "Instance": "Begin: Pos(282, 12)\nEnd: Pos(289, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java\nName: testReflectionDoubleArrayArray\nChilds: [StatementAssertion<Begin: Pos(285, 9), End: Pos(285, 108)>,\nStatementAssertion<Begin: Pos(287, 9), End: Pos(287, 47)>,\nStatementAssertion<Begin: Pos(288, 9), End: Pos(288, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "name": "testReflectionDoubleArrayArray",
            "begin": "Pos(282, 12)",
            "end": "Pos(289, 5)",
            "begin_line_no": 282,
            "end_line_no": 289,
            "child": [
                "Begin: Pos(285, 9)\nEnd: Pos(285, 108)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(287, 9)\nEnd: Pos(287, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(288, 9)\nEnd: Pos(288, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testReflectionDoubleArrayArray$catena_0() {\n        double[][] array = new double[][] { { 1.0, 2.29686 }, null, { Double.NaN } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));         /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionDoubleArrayArray$catena_1() {\n        double[][] array = new double[][] { { 1.0, 2.29686 }, null, { Double.NaN } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionDoubleArrayArray_catena_2() {\n        double[][] array = new double[][] { { 1.0, 2.29686 }, null, { Double.NaN } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testReflectionDoubleArrayArray$catena_0() {\n        double[][] array = new double[][] { { 1.0, 2.29686 }, null, { Double.NaN } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));         /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testReflectionDoubleArrayArray$catena_1() {\n        double[][] array = new double[][] { { 1.0, 2.29686 }, null, { Double.NaN } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testReflectionDoubleArrayArray_catena_2() {\n        double[][] array = new double[][] { { 1.0, 2.29686 }, null, { Double.NaN } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionBooleanArray": {
            "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "check": [
                "Selector contains assertion"
            ],
            "Instance": "Begin: Pos(216, 12)\nEnd: Pos(223, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java\nName: testReflectionBooleanArray\nChilds: [StatementAssertion<Begin: Pos(219, 9), End: Pos(219, 98)>,\nStatementAssertion<Begin: Pos(221, 9), End: Pos(221, 47)>,\nStatementAssertion<Begin: Pos(222, 9), End: Pos(222, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "name": "testReflectionBooleanArray",
            "begin": "Pos(216, 12)",
            "end": "Pos(223, 5)",
            "begin_line_no": 216,
            "end_line_no": 223,
            "child": [
                "Begin: Pos(219, 9)\nEnd: Pos(219, 98)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(221, 9)\nEnd: Pos(221, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(222, 9)\nEnd: Pos(222, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testReflectionBooleanArray$catena_0() {\n        boolean[] array = new boolean[] { true, false, false };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{true,false,false}]\", ToStringBuilder.reflectionToString(array));          /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionBooleanArray$catena_1() {\n        boolean[] array = new boolean[] { true, false, false };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{true,false,false}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionBooleanArray$catena_2() {\n        boolean[] array = new boolean[] { true, false, false };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{true,false,false}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testReflectionBooleanArray$catena_0() {\n        boolean[] array = new boolean[] { true, false, false };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{true,false,false}]\", ToStringBuilder.reflectionToString(array));          /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testReflectionBooleanArray$catena_1() {\n        boolean[] array = new boolean[] { true, false, false };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{true,false,false}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testReflectionBooleanArray$catena_2() {\n        boolean[] array = new boolean[] { true, false, false };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{true,false,false}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionyteArray": {
            "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "check": [
                "Selector contains assertion"
            ],
            "Instance": "Begin: Pos(180, 12)\nEnd: Pos(187, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java\nName: testReflectionyteArray\nChilds: [StatementAssertion<Begin: Pos(183, 9), End: Pos(183, 90)>,\nStatementAssertion<Begin: Pos(185, 9), End: Pos(185, 47)>,\nStatementAssertion<Begin: Pos(186, 9), End: Pos(186, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "name": "testReflectionyteArray",
            "begin": "Pos(180, 12)",
            "end": "Pos(187, 5)",
            "begin_line_no": 180,
            "end_line_no": 187,
            "child": [
                "Begin: Pos(183, 9)\nEnd: Pos(183, 90)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(185, 9)\nEnd: Pos(185, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(186, 9)\nEnd: Pos(186, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testReflectionyteArray$catena_0() {\n        byte[] array = new byte[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));                  /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionyteArray$catena_1() {\n        byte[] array = new byte[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionyteArray$catena_2() {\n        byte[] array = new byte[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testReflectionyteArray$catena_0() {\n        byte[] array = new byte[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));                  /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testReflectionyteArray$catena_1() {\n        byte[] array = new byte[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testReflectionyteArray$catena_2() {\n        byte[] array = new byte[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionDoubleArray": {
            "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "check": [
                "Selector contains assertion"
            ],
            "Instance": "Begin: Pos(198, 12)\nEnd: Pos(205, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java\nName: testReflectionDoubleArray\nChilds: [StatementAssertion<Begin: Pos(201, 9), End: Pos(201, 105)>,\nStatementAssertion<Begin: Pos(203, 9), End: Pos(203, 47)>,\nStatementAssertion<Begin: Pos(204, 9), End: Pos(204, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "name": "testReflectionDoubleArray",
            "begin": "Pos(198, 12)",
            "end": "Pos(205, 5)",
            "begin_line_no": 198,
            "end_line_no": 205,
            "child": [
                "Begin: Pos(201, 9)\nEnd: Pos(201, 105)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(203, 9)\nEnd: Pos(203, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(204, 9)\nEnd: Pos(204, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testReflectionDoubleArray$catena_0() {\n        double[] array = new double[] { 1.0, 2.9876, -3.00001, 4.3 };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));         /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionDoubleArray$catena_1() {\n        double[] array = new double[] { 1.0, 2.9876, -3.00001, 4.3 };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionDoubleArray$catena_2() {\n        double[] array = new double[] { 1.0, 2.9876, -3.00001, 4.3 };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testReflectionDoubleArray$catena_0() {\n        double[] array = new double[] { 1.0, 2.9876, -3.00001, 4.3 };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));         /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testReflectionDoubleArray$catena_1() {\n        double[] array = new double[] { 1.0, 2.9876, -3.00001, 4.3 };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testReflectionDoubleArray$catena_2() {\n        double[] array = new double[] { 1.0, 2.9876, -3.00001, 4.3 };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionIntArrayArray": {
            "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "check": [
                "Selector contains assertion"
            ],
            "Instance": "Begin: Pos(246, 12)\nEnd: Pos(253, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java\nName: testReflectionIntArrayArray\nChilds: [StatementAssertion<Begin: Pos(249, 9), End: Pos(249, 98)>,\nStatementAssertion<Begin: Pos(251, 9), End: Pos(251, 47)>,\nStatementAssertion<Begin: Pos(252, 9), End: Pos(252, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "name": "testReflectionIntArrayArray",
            "begin": "Pos(246, 12)",
            "end": "Pos(253, 5)",
            "begin_line_no": 246,
            "end_line_no": 253,
            "child": [
                "Begin: Pos(249, 9)\nEnd: Pos(249, 98)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(251, 9)\nEnd: Pos(251, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(252, 9)\nEnd: Pos(252, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testReflectionIntArrayArray$catena_0() {\n        int[][] array = new int[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));          /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionIntArrayArray$catena_1() {\n        int[][] array = new int[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionIntArrayArray$catena_2() {\n        int[][] array = new int[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testReflectionIntArrayArray$catena_0() {\n        int[][] array = new int[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));          /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testReflectionIntArrayArray$catena_1() {\n        int[][] array = new int[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testReflectionIntArrayArray$catena_2() {\n        int[][] array = new int[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionLongArray": {
            "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "check": [
                "Selector contains assertion"
            ],
            "Instance": "Begin: Pos(153, 12)\nEnd: Pos(160, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java\nName: testReflectionLongArray\nChilds: [StatementAssertion<Begin: Pos(156, 9), End: Pos(156, 90)>,\nStatementAssertion<Begin: Pos(158, 9), End: Pos(158, 47)>,\nStatementAssertion<Begin: Pos(159, 9), End: Pos(159, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "name": "testReflectionLongArray",
            "begin": "Pos(153, 12)",
            "end": "Pos(160, 5)",
            "begin_line_no": 153,
            "end_line_no": 160,
            "child": [
                "Begin: Pos(156, 9)\nEnd: Pos(156, 90)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(158, 9)\nEnd: Pos(158, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(159, 9)\nEnd: Pos(159, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testReflectionLongArray$catena_0() {\n        long[] array = new long[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));                  /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionLongArray$catena_1() {\n        long[] array = new long[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionLongArray$catena_2() {\n        long[] array = new long[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testReflectionLongArray$catena_0() {\n        long[] array = new long[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));                  /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testReflectionLongArray$catena_1() {\n        long[] array = new long[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testReflectionLongArray$catena_2() {\n        long[] array = new long[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionhortArrayArray": {
            "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "check": [
                "Selector contains assertion"
            ],
            "Instance": "Begin: Pos(255, 12)\nEnd: Pos(262, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java\nName: testReflectionhortArrayArray\nChilds: [StatementAssertion<Begin: Pos(258, 9), End: Pos(258, 98)>,\nStatementAssertion<Begin: Pos(260, 9), End: Pos(260, 47)>,\nStatementAssertion<Begin: Pos(261, 9), End: Pos(261, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "name": "testReflectionhortArrayArray",
            "begin": "Pos(255, 12)",
            "end": "Pos(262, 5)",
            "begin_line_no": 255,
            "end_line_no": 262,
            "child": [
                "Begin: Pos(258, 9)\nEnd: Pos(258, 98)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(260, 9)\nEnd: Pos(260, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(261, 9)\nEnd: Pos(261, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testReflectionhortArrayArray$catena_0() {\n        short[][] array = new short[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));          /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionhortArrayArray$catena_1() {\n        short[][] array = new short[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionhortArrayArray$catena_2() {\n        short[][] array = new short[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testReflectionhortArrayArray$catena_0() {\n        short[][] array = new short[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));          /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testReflectionhortArrayArray$catena_1() {\n        short[][] array = new short[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testReflectionhortArrayArray$catena_2() {\n        short[][] array = new short[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionObjectArray": {
            "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "check": [
                "Selector contains assertion"
            ],
            "Instance": "Begin: Pos(144, 12)\nEnd: Pos(151, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java\nName: testReflectionObjectArray\nChilds: [StatementAssertion<Begin: Pos(147, 9), End: Pos(147, 96)>,\nStatementAssertion<Begin: Pos(149, 9), End: Pos(149, 47)>,\nStatementAssertion<Begin: Pos(150, 9), End: Pos(150, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "name": "testReflectionObjectArray",
            "begin": "Pos(144, 12)",
            "end": "Pos(151, 5)",
            "begin_line_no": 144,
            "end_line_no": 151,
            "child": [
                "Begin: Pos(147, 9)\nEnd: Pos(147, 96)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(149, 9)\nEnd: Pos(149, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(150, 9)\nEnd: Pos(150, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testReflectionObjectArray$catena_0() {\n        Object[] array = new Object[] { null, base, new int[] { 3, 6 } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", ToStringBuilder.reflectionToString(array));            /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionObjectArray$catena_1() {\n        Object[] array = new Object[] { null, base, new int[] { 3, 6 } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", ToStringBuilder.reflectionToString(array));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionObjectArray$catena_2() {\n        Object[] array = new Object[] { null, base, new int[] { 3, 6 } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", ToStringBuilder.reflectionToString(array));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testReflectionObjectArray$catena_0() {\n        Object[] array = new Object[] { null, base, new int[] { 3, 6 } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", ToStringBuilder.reflectionToString(array));            /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testReflectionObjectArray$catena_1() {\n        Object[] array = new Object[] { null, base, new int[] { 3, 6 } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", ToStringBuilder.reflectionToString(array));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testReflectionObjectArray$catena_2() {\n        Object[] array = new Object[] { null, base, new int[] { 3, 6 } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", ToStringBuilder.reflectionToString(array));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionObjectCycle": {
            "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "check": [
                "Selector contains assertion"
            ],
            "Instance": "Begin: Pos(542, 12)\nEnd: Pos(551, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java\nName: testReflectionObjectCycle\nChilds: [StatementAssertion<Begin: Pos(547, 9), End: Pos(549, 26)>,\nStatementAssertion<Begin: Pos(550, 9), End: Pos(550, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "name": "testReflectionObjectCycle",
            "begin": "Pos(542, 12)",
            "end": "Pos(551, 5)",
            "begin_line_no": 542,
            "end_line_no": 551,
            "child": [
                "Begin: Pos(547, 9)\nEnd: Pos(549, 26)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(550, 9)\nEnd: Pos(550, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testReflectionObjectCycle$catena_0() throws Exception {\n        ReflectionTestCycleA a = new ReflectionTestCycleA();\n        ReflectionTestCycleB b = new ReflectionTestCycleB();\n        a.b = b;\n        b.a = a;\n        assertEquals(\n            this.toBaseString(a) + \"[b=\" + this.toBaseString(b) + \"[a=\" + this.toBaseString(a) + \"]]\",\n            a.toString());                                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionObjectCycle$catena_1() throws Exception {\n        ReflectionTestCycleA a = new ReflectionTestCycleA();\n        ReflectionTestCycleB b = new ReflectionTestCycleB();\n        a.b = b;\n        b.a = a;\n        try{ assertEquals(\n            this.toBaseString(a) + \"[b=\" + this.toBaseString(b) + \"[a=\" + this.toBaseString(a) + \"]]\",\n            a.toString());                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testReflectionObjectCycle$catena_0() throws Exception {\n        ReflectionTestCycleA a = new ReflectionTestCycleA();\n        ReflectionTestCycleB b = new ReflectionTestCycleB();\n        a.b = b;\n        b.a = a;\n        assertEquals(\n            this.toBaseString(a) + \"[b=\" + this.toBaseString(b) + \"[a=\" + this.toBaseString(a) + \"]]\",\n            a.toString());                                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testReflectionObjectCycle$catena_1() throws Exception {\n        ReflectionTestCycleA a = new ReflectionTestCycleA();\n        ReflectionTestCycleB b = new ReflectionTestCycleB();\n        a.b = b;\n        b.a = a;\n        try{ assertEquals(\n            this.toBaseString(a) + \"[b=\" + this.toBaseString(b) + \"[a=\" + this.toBaseString(a) + \"]]\",\n            a.toString());                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionBooleanArrayArray": {
            "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "check": [
                "Selector contains assertion"
            ],
            "Instance": "Begin: Pos(291, 12)\nEnd: Pos(299, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java\nName: testReflectionBooleanArrayArray\nChilds: [StatementAssertion<Begin: Pos(294, 9), End: Pos(294, 109)>,\nStatementAssertion<Begin: Pos(295, 9), End: Pos(295, 109)>,\nStatementAssertion<Begin: Pos(297, 9), End: Pos(297, 47)>,\nStatementAssertion<Begin: Pos(298, 9), End: Pos(298, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "name": "testReflectionBooleanArrayArray",
            "begin": "Pos(291, 12)",
            "end": "Pos(299, 5)",
            "begin_line_no": 291,
            "end_line_no": 299,
            "child": [
                "Begin: Pos(294, 9)\nEnd: Pos(294, 109)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(295, 9)\nEnd: Pos(295, 109)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(297, 9)\nEnd: Pos(297, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(298, 9)\nEnd: Pos(298, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testReflectionBooleanArrayArray$catena_0() {\n        boolean[][] array = new boolean[][] { { true, false }, null, { false } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionBooleanArrayArray$catena_1() {\n        boolean[][] array = new boolean[][] { { true, false }, null, { false } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));         /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionBooleanArrayArray$catena_2() {\n        boolean[][] array = new boolean[][] { { true, false }, null, { false } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionBooleanArrayArray$catena_3() {\n        boolean[][] array = new boolean[][] { { true, false }, null, { false } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testReflectionBooleanArrayArray$catena_0() {\n        boolean[][] array = new boolean[][] { { true, false }, null, { false } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testReflectionBooleanArrayArray$catena_1() {\n        boolean[][] array = new boolean[][] { { true, false }, null, { false } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));         /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testReflectionBooleanArrayArray$catena_2() {\n        boolean[][] array = new boolean[][] { { true, false }, null, { false } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void testReflectionBooleanArrayArray$catena_3() {\n        boolean[][] array = new boolean[][] { { true, false }, null, { false } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.builder.ToStringBuilderTest::testSimpleReflectionObjectCycle": {
            "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "check": [
                "Selector contains assertion"
            ],
            "Instance": "Begin: Pos(506, 12)\nEnd: Pos(511, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java\nName: testSimpleReflectionObjectCycle\nChilds: [StatementAssertion<Begin: Pos(509, 9), End: Pos(509, 109)>,\nStatementAssertion<Begin: Pos(510, 9), End: Pos(510, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "name": "testSimpleReflectionObjectCycle",
            "begin": "Pos(506, 12)",
            "end": "Pos(511, 5)",
            "begin_line_no": 506,
            "end_line_no": 511,
            "child": [
                "Begin: Pos(509, 9)\nEnd: Pos(509, 109)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(510, 9)\nEnd: Pos(510, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testSimpleReflectionObjectCycle$catena_0() throws Exception {\n        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture();\n        simple.o = simple;\n        assertEquals(this.toBaseString(simple) + \"[o=\" + this.toBaseString(simple) + \"]\", simple.toString());         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testSimpleReflectionObjectCycle_catena_1() throws Exception {\n        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture();\n        simple.o = simple;\n        try{ assertEquals(this.toBaseString(simple) + \"[o=\" + this.toBaseString(simple) + \"]\", simple.toString());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testSimpleReflectionObjectCycle$catena_0() throws Exception {\n        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture();\n        simple.o = simple;\n        assertEquals(this.toBaseString(simple) + \"[o=\" + this.toBaseString(simple) + \"]\", simple.toString());         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testSimpleReflectionObjectCycle_catena_1() throws Exception {\n        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture();\n        simple.o = simple;\n        try{ assertEquals(this.toBaseString(simple) + \"[o=\" + this.toBaseString(simple) + \"]\", simple.toString());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionByteArrayArray": {
            "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "check": [
                "Selector contains assertion"
            ],
            "Instance": "Begin: Pos(264, 12)\nEnd: Pos(271, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java\nName: testReflectionByteArrayArray\nChilds: [StatementAssertion<Begin: Pos(267, 9), End: Pos(267, 98)>,\nStatementAssertion<Begin: Pos(269, 9), End: Pos(269, 47)>,\nStatementAssertion<Begin: Pos(270, 9), End: Pos(270, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "name": "testReflectionByteArrayArray",
            "begin": "Pos(264, 12)",
            "end": "Pos(271, 5)",
            "begin_line_no": 264,
            "end_line_no": 271,
            "child": [
                "Begin: Pos(267, 9)\nEnd: Pos(267, 98)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(269, 9)\nEnd: Pos(269, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(270, 9)\nEnd: Pos(270, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testReflectionByteArrayArray$catena_0() {\n        byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));          /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionByteArrayArray$catena_1() {\n        byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionByteArrayArray$catena_2() {\n        byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testReflectionByteArrayArray$catena_0() {\n        byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));          /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testReflectionByteArrayArray$catena_1() {\n        byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testReflectionByteArrayArray$catena_2() {\n        byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayCycleLevel2": {
            "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "check": [
                "Selector contains assertion"
            ],
            "Instance": "Begin: Pos(388, 12)\nEnd: Pos(400, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java\nName: testReflectionArrayCycleLevel2\nChilds: [StatementAssertion<Begin: Pos(393, 9), End: Pos(395, 57)>,\nStatementAssertion<Begin: Pos(396, 9), End: Pos(398, 63)>,\nStatementAssertion<Begin: Pos(399, 9), End: Pos(399, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "name": "testReflectionArrayCycleLevel2",
            "begin": "Pos(388, 12)",
            "end": "Pos(400, 5)",
            "begin_line_no": 388,
            "end_line_no": 400,
            "child": [
                "Begin: Pos(393, 9)\nEnd: Pos(395, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(396, 9)\nEnd: Pos(398, 63)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(399, 9)\nEnd: Pos(399, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testReflectionArrayCycleLevel2$catena_0() throws Exception {\n        Object[] objects = new Object[1];\n        Object[] objectsLevel2 = new Object[1];\n        objects[0] = objectsLevel2;\n        objectsLevel2[0] = objects;\n        assertEquals(\n            this.toBaseString(objects) + \"[{{\" + this.toBaseString(objects) + \"}}]\",\n            ToStringBuilder.reflectionToString(objects));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\n            this.toBaseString(objectsLevel2) + \"[{{\" + this.toBaseString(objectsLevel2) + \"}}]\",\n            ToStringBuilder.reflectionToString(objectsLevel2));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionArrayCycleLevel2$catena_1() throws Exception {\n        Object[] objects = new Object[1];\n        Object[] objectsLevel2 = new Object[1];\n        objects[0] = objectsLevel2;\n        objectsLevel2[0] = objects;\n        try{ assertEquals(\n            this.toBaseString(objects) + \"[{{\" + this.toBaseString(objects) + \"}}]\",\n            ToStringBuilder.reflectionToString(objects));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\n            this.toBaseString(objectsLevel2) + \"[{{\" + this.toBaseString(objectsLevel2) + \"}}]\",\n            ToStringBuilder.reflectionToString(objectsLevel2));                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionArrayCycleLevel2$catena_2() throws Exception {\n        Object[] objects = new Object[1];\n        Object[] objectsLevel2 = new Object[1];\n        objects[0] = objectsLevel2;\n        objectsLevel2[0] = objects;\n        try{ assertEquals(\n            this.toBaseString(objects) + \"[{{\" + this.toBaseString(objects) + \"}}]\",\n            ToStringBuilder.reflectionToString(objects));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\n            this.toBaseString(objectsLevel2) + \"[{{\" + this.toBaseString(objectsLevel2) + \"}}]\",\n            ToStringBuilder.reflectionToString(objectsLevel2));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testReflectionArrayCycleLevel2$catena_0() throws Exception {\n        Object[] objects = new Object[1];\n        Object[] objectsLevel2 = new Object[1];\n        objects[0] = objectsLevel2;\n        objectsLevel2[0] = objects;\n        assertEquals(\n            this.toBaseString(objects) + \"[{{\" + this.toBaseString(objects) + \"}}]\",\n            ToStringBuilder.reflectionToString(objects));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\n            this.toBaseString(objectsLevel2) + \"[{{\" + this.toBaseString(objectsLevel2) + \"}}]\",\n            ToStringBuilder.reflectionToString(objectsLevel2));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testReflectionArrayCycleLevel2$catena_1() throws Exception {\n        Object[] objects = new Object[1];\n        Object[] objectsLevel2 = new Object[1];\n        objects[0] = objectsLevel2;\n        objectsLevel2[0] = objects;\n        try{ assertEquals(\n            this.toBaseString(objects) + \"[{{\" + this.toBaseString(objects) + \"}}]\",\n            ToStringBuilder.reflectionToString(objects));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\n            this.toBaseString(objectsLevel2) + \"[{{\" + this.toBaseString(objectsLevel2) + \"}}]\",\n            ToStringBuilder.reflectionToString(objectsLevel2));                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testReflectionArrayCycleLevel2$catena_2() throws Exception {\n        Object[] objects = new Object[1];\n        Object[] objectsLevel2 = new Object[1];\n        objects[0] = objectsLevel2;\n        objectsLevel2[0] = objects;\n        try{ assertEquals(\n            this.toBaseString(objects) + \"[{{\" + this.toBaseString(objects) + \"}}]\",\n            ToStringBuilder.reflectionToString(objects));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\n            this.toBaseString(objectsLevel2) + \"[{{\" + this.toBaseString(objectsLevel2) + \"}}]\",\n            ToStringBuilder.reflectionToString(objectsLevel2));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayAndObjectCycle": {
            "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "check": [
                "Selector contains assertion"
            ],
            "Instance": "Begin: Pos(559, 12)\nEnd: Pos(579, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java\nName: testReflectionArrayAndObjectCycle\nChilds: [StatementAssertion<Begin: Pos(563, 9), End: Pos(571, 57)>,\nStatementAssertion<Begin: Pos(572, 9), End: Pos(577, 56)>,\nStatementAssertion<Begin: Pos(578, 9), End: Pos(578, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "name": "testReflectionArrayAndObjectCycle",
            "begin": "Pos(559, 12)",
            "end": "Pos(579, 5)",
            "begin_line_no": 559,
            "end_line_no": 579,
            "child": [
                "Begin: Pos(563, 9)\nEnd: Pos(571, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(572, 9)\nEnd: Pos(577, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(578, 9)\nEnd: Pos(578, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testReflectionArrayAndObjectCycle$catena_0() throws Exception {\n        Object[] objects = new Object[1];\n        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture(objects);\n        objects[0] = simple;\n        assertEquals(\n            this.toBaseString(objects)\n                + \"[{\"\n                + this.toBaseString(simple)\n                + \"[o=\"\n                + this.toBaseString(objects)\n                + \"]\"\n                + \"}]\",\n            ToStringBuilder.reflectionToString(objects));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\n            this.toBaseString(simple)\n                + \"[o={\"\n                + this.toBaseString(simple)\n                + \"}]\",\n            ToStringBuilder.reflectionToString(simple));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionArrayAndObjectCycle$catena_1() throws Exception {\n        Object[] objects = new Object[1];\n        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture(objects);\n        objects[0] = simple;\n        try{ assertEquals(\n            this.toBaseString(objects)\n                + \"[{\"\n                + this.toBaseString(simple)\n                + \"[o=\"\n                + this.toBaseString(objects)\n                + \"]\"\n                + \"}]\",\n            ToStringBuilder.reflectionToString(objects));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\n            this.toBaseString(simple)\n                + \"[o={\"\n                + this.toBaseString(simple)\n                + \"}]\",\n            ToStringBuilder.reflectionToString(simple));                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionArrayAndObjectCycle$catena_2() throws Exception {\n        Object[] objects = new Object[1];\n        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture(objects);\n        objects[0] = simple;\n        try{ assertEquals(\n            this.toBaseString(objects)\n                + \"[{\"\n                + this.toBaseString(simple)\n                + \"[o=\"\n                + this.toBaseString(objects)\n                + \"]\"\n                + \"}]\",\n            ToStringBuilder.reflectionToString(objects));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\n            this.toBaseString(simple)\n                + \"[o={\"\n                + this.toBaseString(simple)\n                + \"}]\",\n            ToStringBuilder.reflectionToString(simple));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testReflectionArrayAndObjectCycle$catena_0() throws Exception {\n        Object[] objects = new Object[1];\n        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture(objects);\n        objects[0] = simple;\n        assertEquals(\n            this.toBaseString(objects)\n                + \"[{\"\n                + this.toBaseString(simple)\n                + \"[o=\"\n                + this.toBaseString(objects)\n                + \"]\"\n                + \"}]\",\n            ToStringBuilder.reflectionToString(objects));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\n            this.toBaseString(simple)\n                + \"[o={\"\n                + this.toBaseString(simple)\n                + \"}]\",\n            ToStringBuilder.reflectionToString(simple));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testReflectionArrayAndObjectCycle$catena_1() throws Exception {\n        Object[] objects = new Object[1];\n        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture(objects);\n        objects[0] = simple;\n        try{ assertEquals(\n            this.toBaseString(objects)\n                + \"[{\"\n                + this.toBaseString(simple)\n                + \"[o=\"\n                + this.toBaseString(objects)\n                + \"]\"\n                + \"}]\",\n            ToStringBuilder.reflectionToString(objects));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\n            this.toBaseString(simple)\n                + \"[o={\"\n                + this.toBaseString(simple)\n                + \"}]\",\n            ToStringBuilder.reflectionToString(simple));                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testReflectionArrayAndObjectCycle$catena_2() throws Exception {\n        Object[] objects = new Object[1];\n        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture(objects);\n        objects[0] = simple;\n        try{ assertEquals(\n            this.toBaseString(objects)\n                + \"[{\"\n                + this.toBaseString(simple)\n                + \"[o=\"\n                + this.toBaseString(objects)\n                + \"]\"\n                + \"}]\",\n            ToStringBuilder.reflectionToString(objects));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\n            this.toBaseString(simple)\n                + \"[o={\"\n                + this.toBaseString(simple)\n                + \"}]\",\n            ToStringBuilder.reflectionToString(simple));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionCharArrayArray": {
            "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "check": [
                "Selector contains assertion"
            ],
            "Instance": "Begin: Pos(273, 12)\nEnd: Pos(280, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java\nName: testReflectionCharArrayArray\nChilds: [StatementAssertion<Begin: Pos(276, 9), End: Pos(276, 98)>,\nStatementAssertion<Begin: Pos(278, 9), End: Pos(278, 47)>,\nStatementAssertion<Begin: Pos(279, 9), End: Pos(279, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "name": "testReflectionCharArrayArray",
            "begin": "Pos(273, 12)",
            "end": "Pos(280, 5)",
            "begin_line_no": 273,
            "end_line_no": 280,
            "child": [
                "Begin: Pos(276, 9)\nEnd: Pos(276, 98)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(278, 9)\nEnd: Pos(278, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(279, 9)\nEnd: Pos(279, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testReflectionCharArrayArray$catena_0() {\n        char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{A,B},<null>,{p}}]\", ToStringBuilder.reflectionToString(array));          /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionCharArrayArray$catena_1() {\n        char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{A,B},<null>,{p}}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionCharArrayArray$catena_2() {\n        char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{A,B},<null>,{p}}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testReflectionCharArrayArray$catena_0() {\n        char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{A,B},<null>,{p}}]\", ToStringBuilder.reflectionToString(array));          /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testReflectionCharArrayArray$catena_1() {\n        char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{A,B},<null>,{p}}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testReflectionCharArrayArray$catena_2() {\n        char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{A,B},<null>,{p}}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionShortArray": {
            "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "check": [
                "Selector contains assertion"
            ],
            "Instance": "Begin: Pos(171, 12)\nEnd: Pos(178, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java\nName: testReflectionShortArray\nChilds: [StatementAssertion<Begin: Pos(174, 9), End: Pos(174, 90)>,\nStatementAssertion<Begin: Pos(176, 9), End: Pos(176, 47)>,\nStatementAssertion<Begin: Pos(177, 9), End: Pos(177, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "name": "testReflectionShortArray",
            "begin": "Pos(171, 12)",
            "end": "Pos(178, 5)",
            "begin_line_no": 171,
            "end_line_no": 178,
            "child": [
                "Begin: Pos(174, 9)\nEnd: Pos(174, 90)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(176, 9)\nEnd: Pos(176, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(177, 9)\nEnd: Pos(177, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testReflectionShortArray$catena_0() {\n        short[] array = new short[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));                  /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionShortArray$catena_1() {\n        short[] array = new short[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionShortArray$catena_2() {\n        short[] array = new short[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testReflectionShortArray$catena_0() {\n        short[] array = new short[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));                  /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testReflectionShortArray$catena_1() {\n        short[] array = new short[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testReflectionShortArray$catena_2() {\n        short[] array = new short[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.builder.ToStringBuilderTest::testSelfInstanceVarReflectionObjectCycle": {
            "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "check": [
                "Selector contains assertion"
            ],
            "Instance": "Begin: Pos(518, 12)\nEnd: Pos(522, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java\nName: testSelfInstanceVarReflectionObjectCycle\nChilds: [StatementAssertion<Begin: Pos(520, 9), End: Pos(520, 112)>,\nStatementAssertion<Begin: Pos(521, 9), End: Pos(521, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "name": "testSelfInstanceVarReflectionObjectCycle",
            "begin": "Pos(518, 12)",
            "end": "Pos(522, 5)",
            "begin_line_no": 518,
            "end_line_no": 522,
            "child": [
                "Begin: Pos(520, 9)\nEnd: Pos(520, 112)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(521, 9)\nEnd: Pos(521, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testSelfInstanceVarReflectionObjectCycle$catena_0() throws Exception {\n        SelfInstanceVarReflectionTestFixture test = new SelfInstanceVarReflectionTestFixture();\n        assertEquals(this.toBaseString(test) + \"[typeIsSelf=\" + this.toBaseString(test) + \"]\", test.toString());         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testSelfInstanceVarReflectionObjectCycle$catena_1() throws Exception {\n        SelfInstanceVarReflectionTestFixture test = new SelfInstanceVarReflectionTestFixture();\n        try{ assertEquals(this.toBaseString(test) + \"[typeIsSelf=\" + this.toBaseString(test) + \"]\", test.toString());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testSelfInstanceVarReflectionObjectCycle$catena_0() throws Exception {\n        SelfInstanceVarReflectionTestFixture test = new SelfInstanceVarReflectionTestFixture();\n        assertEquals(this.toBaseString(test) + \"[typeIsSelf=\" + this.toBaseString(test) + \"]\", test.toString());         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testSelfInstanceVarReflectionObjectCycle$catena_1() throws Exception {\n        SelfInstanceVarReflectionTestFixture test = new SelfInstanceVarReflectionTestFixture();\n        try{ assertEquals(this.toBaseString(test) + \"[typeIsSelf=\" + this.toBaseString(test) + \"]\", test.toString());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionIntArray": {
            "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "check": [
                "Selector contains assertion"
            ],
            "Instance": "Begin: Pos(162, 12)\nEnd: Pos(169, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java\nName: testReflectionIntArray\nChilds: [StatementAssertion<Begin: Pos(165, 9), End: Pos(165, 90)>,\nStatementAssertion<Begin: Pos(167, 9), End: Pos(167, 47)>,\nStatementAssertion<Begin: Pos(168, 9), End: Pos(168, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "name": "testReflectionIntArray",
            "begin": "Pos(162, 12)",
            "end": "Pos(169, 5)",
            "begin_line_no": 162,
            "end_line_no": 169,
            "child": [
                "Begin: Pos(165, 9)\nEnd: Pos(165, 90)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(167, 9)\nEnd: Pos(167, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(168, 9)\nEnd: Pos(168, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testReflectionIntArray$catena_0() {\n        int[] array = new int[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));                  /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionIntArray$catena_1() {\n        int[] array = new int[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionIntArray$catena_2() {\n        int[] array = new int[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testReflectionIntArray$catena_0() {\n        int[] array = new int[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));                  /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testReflectionIntArray$catena_1() {\n        int[] array = new int[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testReflectionIntArray$catena_2() {\n        int[] array = new int[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionCharArray": {
            "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "check": [
                "Selector contains assertion"
            ],
            "Instance": "Begin: Pos(189, 12)\nEnd: Pos(196, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java\nName: testReflectionCharArray\nChilds: [StatementAssertion<Begin: Pos(192, 9), End: Pos(192, 89)>,\nStatementAssertion<Begin: Pos(194, 9), End: Pos(194, 47)>,\nStatementAssertion<Begin: Pos(195, 9), End: Pos(195, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "name": "testReflectionCharArray",
            "begin": "Pos(189, 12)",
            "end": "Pos(196, 5)",
            "begin_line_no": 189,
            "end_line_no": 196,
            "child": [
                "Begin: Pos(192, 9)\nEnd: Pos(192, 89)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(194, 9)\nEnd: Pos(194, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(195, 9)\nEnd: Pos(195, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testReflectionCharArray$catena_0() {\n        char[] array = new char[] { 'A', '2', '_', 'D' };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{A,2,_,D}]\", ToStringBuilder.reflectionToString(array));                   /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionCharArray$catena_1() {\n        char[] array = new char[] { 'A', '2', '_', 'D' };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{A,2,_,D}]\", ToStringBuilder.reflectionToString(array));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionCharArray$catena_2() {\n        char[] array = new char[] { 'A', '2', '_', 'D' };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{A,2,_,D}]\", ToStringBuilder.reflectionToString(array));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testReflectionCharArray$catena_0() {\n        char[] array = new char[] { 'A', '2', '_', 'D' };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{A,2,_,D}]\", ToStringBuilder.reflectionToString(array));                   /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testReflectionCharArray$catena_1() {\n        char[] array = new char[] { 'A', '2', '_', 'D' };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{A,2,_,D}]\", ToStringBuilder.reflectionToString(array));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testReflectionCharArray$catena_2() {\n        char[] array = new char[] { 'A', '2', '_', 'D' };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{A,2,_,D}]\", ToStringBuilder.reflectionToString(array));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionFloatArrayArray": {
            "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "check": [
                "Selector contains assertion"
            ],
            "Instance": "Begin: Pos(227, 12)\nEnd: Pos(234, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java\nName: testReflectionFloatArrayArray\nChilds: [StatementAssertion<Begin: Pos(230, 9), End: Pos(230, 108)>,\nStatementAssertion<Begin: Pos(232, 9), End: Pos(232, 47)>,\nStatementAssertion<Begin: Pos(233, 9), End: Pos(233, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java",
            "name": "testReflectionFloatArrayArray",
            "begin": "Pos(227, 12)",
            "end": "Pos(234, 5)",
            "begin_line_no": 227,
            "end_line_no": 234,
            "child": [
                "Begin: Pos(230, 9)\nEnd: Pos(230, 108)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(232, 9)\nEnd: Pos(232, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(233, 9)\nEnd: Pos(233, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testReflectionFloatArrayArray$catena_0() {\n        float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));         /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionFloatArrayArray$catena_1() {\n        float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReflectionFloatArrayArray$catena_2() {\n        float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testReflectionFloatArrayArray$catena_0() {\n        float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));         /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testReflectionFloatArrayArray$catena_1() {\n        float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testReflectionFloatArrayArray$catena_2() {\n        float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "11": {
        "failing_tests": [
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionByteArrayArray$catena_2",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionObjectArray$catena_2",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionCharArray$catena_2",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionHierarchy$catena_16",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testSelfInstanceTwoVarsReflectionObjectCycle$catena_1",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionShortArray$catena_2",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionyteArray$catena_2",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionIntArray$catena_2",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionDoubleArrayArray_catena_2",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionhortArrayArray$catena_2",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionBooleanArrayArray$catena_3",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionFloatArrayArray$catena_2",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionCharArrayArray$catena_2",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testSimpleReflectionObjectCycle_catena_1",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionDoubleArray$catena_2",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayAndObjectCycle$catena_2",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testObjectCycle$catena_1",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionFloatArray$catena_2",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testSelfInstanceVarReflectionObjectCycle$catena_1",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionLongArray$catena_2",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionIntArrayArray$catena_2",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayArrayCycle_catena_1",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionObjectCycle$catena_1",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayCycle$catena_1",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionBooleanArray$catena_2",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionLongArrayArray$catena_2",
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayCycleLevel2$catena_2"
        ]
    }
}