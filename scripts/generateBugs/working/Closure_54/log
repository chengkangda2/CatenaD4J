---
Begin generate bug_id: Closure_54
num_of_hunks: 5
use working dir: ./working/data/Closure_54
Try to checkout Closure_54
build dir: ['./working/data/Closure_54/build/classes', './working/data/Closure_54/build/test']
init FileManager
trace file: src/com/google/javascript/jscomp/TypedScopeCreator.java
trace file: src/com/google/javascript/rhino/jstype/FunctionType.java
trace file: src/com/google/javascript/rhino/jstype/FunctionType.java
trace file: src/com/google/javascript/rhino/jstype/FunctionType.java
trace file: src/com/google/javascript/rhino/jstype/FunctionType.java
trying to replace old failing tests
edit: replace from 365 range 15 at test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
to
  public void testPropertyOnUnknownSuperClass2$catena_0() {
    testSame(
        "var goog = this.foo();" +
        "/** @constructor \n * @extends {goog.Unknown} */" +
        "function Foo() {}" +
        "Foo.prototype = {bar: 1};" +
        "var x = new Foo();",
        RhinoErrorReporter.TYPE_PARSE_ERROR);                                                               /***** ORIGINAL ASSERTION IS HERE *****/
    ObjectType x = (ObjectType) findNameType("x", globalScope);
    try{ assertEquals("Foo", x.toString());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("Foo.prototype", x.getImplicitPrototype().toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(x.getImplicitPrototype().hasOwnProperty("bar"));                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("?", x.getPropertyType("bar").toString());                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(x.isPropertyTypeInferred("bar"));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testPropertyOnUnknownSuperClass2$catena_1() {
    try{ testSame(
        "var goog = this.foo();" +
        "/** @constructor \n * @extends {goog.Unknown} */" +
        "function Foo() {}" +
        "Foo.prototype = {bar: 1};" +
        "var x = new Foo();",
        RhinoErrorReporter.TYPE_PARSE_ERROR);                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    ObjectType x = (ObjectType) findNameType("x", globalScope);
    assertEquals("Foo", x.toString());                                                                      /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertEquals("Foo.prototype", x.getImplicitPrototype().toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(x.getImplicitPrototype().hasOwnProperty("bar"));                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("?", x.getPropertyType("bar").toString());                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(x.isPropertyTypeInferred("bar"));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testPropertyOnUnknownSuperClass2$catena_2() {
    try{ testSame(
        "var goog = this.foo();" +
        "/** @constructor \n * @extends {goog.Unknown} */" +
        "function Foo() {}" +
        "Foo.prototype = {bar: 1};" +
        "var x = new Foo();",
        RhinoErrorReporter.TYPE_PARSE_ERROR);                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    ObjectType x = (ObjectType) findNameType("x", globalScope);
    try{ assertEquals("Foo", x.toString());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    assertEquals("Foo.prototype", x.getImplicitPrototype().toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertTrue(x.getImplicitPrototype().hasOwnProperty("bar"));                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("?", x.getPropertyType("bar").toString());                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(x.isPropertyTypeInferred("bar"));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testPropertyOnUnknownSuperClass2$catena_3() {
    try{ testSame(
        "var goog = this.foo();" +
        "/** @constructor \n * @extends {goog.Unknown} */" +
        "function Foo() {}" +
        "Foo.prototype = {bar: 1};" +
        "var x = new Foo();",
        RhinoErrorReporter.TYPE_PARSE_ERROR);                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    ObjectType x = (ObjectType) findNameType("x", globalScope);
    try{ assertEquals("Foo", x.toString());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("Foo.prototype", x.getImplicitPrototype().toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}
    assertTrue(x.getImplicitPrototype().hasOwnProperty("bar"));                                             /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertEquals("?", x.getPropertyType("bar").toString());                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(x.isPropertyTypeInferred("bar"));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testPropertyOnUnknownSuperClass2$catena_4() {
    try{ testSame(
        "var goog = this.foo();" +
        "/** @constructor \n * @extends {goog.Unknown} */" +
        "function Foo() {}" +
        "Foo.prototype = {bar: 1};" +
        "var x = new Foo();",
        RhinoErrorReporter.TYPE_PARSE_ERROR);                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    ObjectType x = (ObjectType) findNameType("x", globalScope);
    try{ assertEquals("Foo", x.toString());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("Foo.prototype", x.getImplicitPrototype().toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(x.getImplicitPrototype().hasOwnProperty("bar"));                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    assertEquals("?", x.getPropertyType("bar").toString());                                                 /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertTrue(x.isPropertyTypeInferred("bar"));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testPropertyOnUnknownSuperClass2$catena_5() {
    try{ testSame(
        "var goog = this.foo();" +
        "/** @constructor \n * @extends {goog.Unknown} */" +
        "function Foo() {}" +
        "Foo.prototype = {bar: 1};" +
        "var x = new Foo();",
        RhinoErrorReporter.TYPE_PARSE_ERROR);                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    ObjectType x = (ObjectType) findNameType("x", globalScope);
    try{ assertEquals("Foo", x.toString());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("Foo.prototype", x.getImplicitPrototype().toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(x.getImplicitPrototype().hasOwnProperty("bar"));                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("?", x.getPropertyType("bar").toString());                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    assertTrue(x.isPropertyTypeInferred("bar"));                                                            /***** ORIGINAL ASSERTION IS HERE *****/
  }
trace file: test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
new test num: 6
ori test num: 2
pattern: 00000
patches are written to file
running tests...
used time: Finished in 257.58 seconds
Failing tests: 3
	com.google.javascript.jscomp.TypeCheckTest::testIssue537a
	com.google.javascript.jscomp.TypeCheckTest::testIssue537b
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertyOnUnknownSuperClass2$catena_4
pattern: 00001
try to fix hunk: 4
insert before 374 with       oldPrototype.setOwnerFunction(null);
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 00010
try to fix hunk: 3
insert before 372 with     if (oldPrototype != null) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 00100
try to fix hunk: 2
replace from 366 with range 1 to
    PrototypeObjectType oldPrototype = this.prototype;
    boolean replacedPrototype = oldPrototype != null;

patches are written to file
running tests...
used time: Finished in 228.29 seconds
Failing tests: 3
	com.google.javascript.jscomp.TypeCheckTest::testIssue537a
	com.google.javascript.jscomp.TypeCheckTest::testIssue537b
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertyOnUnknownSuperClass2$catena_4
No new failing tests but only 1 hunk
pattern: 01000
try to fix hunk: 1
delete from 341 with range 1
patches are written to file
running tests...
used time: Finished in 227.69 seconds
Failing tests: 3
	com.google.javascript.jscomp.TypeCheckTest::testIssue537a
	com.google.javascript.jscomp.TypeCheckTest::testIssue537b
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertyOnUnknownSuperClass2$catena_4
No new failing tests but only 1 hunk
pattern: 10000
try to fix hunk: 0
replace from 1413 with range 1 to
          ObjectType qVarType = ObjectType.cast(qVar.getType());
          if (qVarType != null &&
              rhsValue != null &&
              rhsValue.getType() == Token.OBJECTLIT) {
            typeRegistry.resetImplicitPrototype(
                rhsValue.getJSType(), qVarType.getImplicitPrototype());
          } else if (!qVar.isTypeInferred()) {

patches are written to file
running tests...
used time: Finished in 214.48 seconds
Failing tests: 1
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertyOnUnknownSuperClass2$catena_3
Includes new failing tests, set to unusable
pattern: 00011
try to fix hunk: 3
insert before 372 with     if (oldPrototype != null) {

try to fix hunk: 4
insert before 374 with       oldPrototype.setOwnerFunction(null);
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 00101
try to fix hunk: 2
replace from 366 with range 1 to
    PrototypeObjectType oldPrototype = this.prototype;
    boolean replacedPrototype = oldPrototype != null;

try to fix hunk: 4
insert before 374 with       oldPrototype.setOwnerFunction(null);
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 00110
try to fix hunk: 2
replace from 366 with range 1 to
    PrototypeObjectType oldPrototype = this.prototype;
    boolean replacedPrototype = oldPrototype != null;

try to fix hunk: 3
insert before 372 with     if (oldPrototype != null) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 01001
try to fix hunk: 1
delete from 341 with range 1
try to fix hunk: 4
insert before 374 with       oldPrototype.setOwnerFunction(null);
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 01010
try to fix hunk: 1
delete from 341 with range 1
try to fix hunk: 3
insert before 372 with     if (oldPrototype != null) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 01100
try to fix hunk: 1
delete from 341 with range 1
try to fix hunk: 2
replace from 366 with range 1 to
    PrototypeObjectType oldPrototype = this.prototype;
    boolean replacedPrototype = oldPrototype != null;

patches are written to file
running tests...
used time: Finished in 200.60 seconds
Failing tests: 3
	com.google.javascript.jscomp.TypeCheckTest::testIssue537a
	com.google.javascript.jscomp.TypeCheckTest::testIssue537b
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertyOnUnknownSuperClass2$catena_4
Can independently fix []
Could not fix independently
pattern: 10001
try to fix hunk: 0
replace from 1413 with range 1 to
          ObjectType qVarType = ObjectType.cast(qVar.getType());
          if (qVarType != null &&
              rhsValue != null &&
              rhsValue.getType() == Token.OBJECTLIT) {
            typeRegistry.resetImplicitPrototype(
                rhsValue.getJSType(), qVarType.getImplicitPrototype());
          } else if (!qVar.isTypeInferred()) {

try to fix hunk: 4
insert before 374 with       oldPrototype.setOwnerFunction(null);
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 10010
try to fix hunk: 0
replace from 1413 with range 1 to
          ObjectType qVarType = ObjectType.cast(qVar.getType());
          if (qVarType != null &&
              rhsValue != null &&
              rhsValue.getType() == Token.OBJECTLIT) {
            typeRegistry.resetImplicitPrototype(
                rhsValue.getJSType(), qVarType.getImplicitPrototype());
          } else if (!qVar.isTypeInferred()) {

try to fix hunk: 3
insert before 372 with     if (oldPrototype != null) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 10100
try to fix hunk: 0
replace from 1413 with range 1 to
          ObjectType qVarType = ObjectType.cast(qVar.getType());
          if (qVarType != null &&
              rhsValue != null &&
              rhsValue.getType() == Token.OBJECTLIT) {
            typeRegistry.resetImplicitPrototype(
                rhsValue.getJSType(), qVarType.getImplicitPrototype());
          } else if (!qVar.isTypeInferred()) {

try to fix hunk: 2
replace from 366 with range 1 to
    PrototypeObjectType oldPrototype = this.prototype;
    boolean replacedPrototype = oldPrototype != null;

patches are written to file
running tests...
used time: Finished in 213.55 seconds
Failing tests: 1
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertyOnUnknownSuperClass2$catena_3
Includes new failing tests, set to unusable
pattern: 11000
try to fix hunk: 0
replace from 1413 with range 1 to
          ObjectType qVarType = ObjectType.cast(qVar.getType());
          if (qVarType != null &&
              rhsValue != null &&
              rhsValue.getType() == Token.OBJECTLIT) {
            typeRegistry.resetImplicitPrototype(
                rhsValue.getJSType(), qVarType.getImplicitPrototype());
          } else if (!qVar.isTypeInferred()) {

try to fix hunk: 1
delete from 341 with range 1
patches are written to file
running tests...
used time: Finished in 196.22 seconds
Failing tests: 0
Can independently fix ['com.google.javascript.jscomp.TypeCheckTest::testIssue537a', 'com.google.javascript.jscomp.TypeCheckTest::testIssue537b', 'com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertyOnUnknownSuperClass2$catena_4']
select new bug
Pattern: 11000
failing tests: com.google.javascript.jscomp.TypeCheckTest::testIssue537a@com.google.javascript.jscomp.TypeCheckTest::testIssue537b@com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertyOnUnknownSuperClass2$catena_4
pattern: 00111
try to fix hunk: 2
replace from 366 with range 1 to
    PrototypeObjectType oldPrototype = this.prototype;
    boolean replacedPrototype = oldPrototype != null;

try to fix hunk: 3
insert before 372 with     if (oldPrototype != null) {

try to fix hunk: 4
insert before 374 with       oldPrototype.setOwnerFunction(null);
    }

patches are written to file
running tests...
used time: Finished in 207.54 seconds
Failing tests: 3
	com.google.javascript.jscomp.TypeCheckTest::testIssue537a
	com.google.javascript.jscomp.TypeCheckTest::testIssue537b
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertyOnUnknownSuperClass2$catena_4
Can independently fix []
Could not fix independently
pattern: 01011
try to fix hunk: 1
delete from 341 with range 1
try to fix hunk: 3
insert before 372 with     if (oldPrototype != null) {

try to fix hunk: 4
insert before 374 with       oldPrototype.setOwnerFunction(null);
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 01101
try to fix hunk: 1
delete from 341 with range 1
try to fix hunk: 2
replace from 366 with range 1 to
    PrototypeObjectType oldPrototype = this.prototype;
    boolean replacedPrototype = oldPrototype != null;

try to fix hunk: 4
insert before 374 with       oldPrototype.setOwnerFunction(null);
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 01110
try to fix hunk: 1
delete from 341 with range 1
try to fix hunk: 2
replace from 366 with range 1 to
    PrototypeObjectType oldPrototype = this.prototype;
    boolean replacedPrototype = oldPrototype != null;

try to fix hunk: 3
insert before 372 with     if (oldPrototype != null) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 10011
try to fix hunk: 0
replace from 1413 with range 1 to
          ObjectType qVarType = ObjectType.cast(qVar.getType());
          if (qVarType != null &&
              rhsValue != null &&
              rhsValue.getType() == Token.OBJECTLIT) {
            typeRegistry.resetImplicitPrototype(
                rhsValue.getJSType(), qVarType.getImplicitPrototype());
          } else if (!qVar.isTypeInferred()) {

try to fix hunk: 3
insert before 372 with     if (oldPrototype != null) {

try to fix hunk: 4
insert before 374 with       oldPrototype.setOwnerFunction(null);
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 10101
try to fix hunk: 0
replace from 1413 with range 1 to
          ObjectType qVarType = ObjectType.cast(qVar.getType());
          if (qVarType != null &&
              rhsValue != null &&
              rhsValue.getType() == Token.OBJECTLIT) {
            typeRegistry.resetImplicitPrototype(
                rhsValue.getJSType(), qVarType.getImplicitPrototype());
          } else if (!qVar.isTypeInferred()) {

try to fix hunk: 2
replace from 366 with range 1 to
    PrototypeObjectType oldPrototype = this.prototype;
    boolean replacedPrototype = oldPrototype != null;

try to fix hunk: 4
insert before 374 with       oldPrototype.setOwnerFunction(null);
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 10110
try to fix hunk: 0
replace from 1413 with range 1 to
          ObjectType qVarType = ObjectType.cast(qVar.getType());
          if (qVarType != null &&
              rhsValue != null &&
              rhsValue.getType() == Token.OBJECTLIT) {
            typeRegistry.resetImplicitPrototype(
                rhsValue.getJSType(), qVarType.getImplicitPrototype());
          } else if (!qVar.isTypeInferred()) {

try to fix hunk: 2
replace from 366 with range 1 to
    PrototypeObjectType oldPrototype = this.prototype;
    boolean replacedPrototype = oldPrototype != null;

try to fix hunk: 3
insert before 372 with     if (oldPrototype != null) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 11001
try to fix hunk: 0
replace from 1413 with range 1 to
          ObjectType qVarType = ObjectType.cast(qVar.getType());
          if (qVarType != null &&
              rhsValue != null &&
              rhsValue.getType() == Token.OBJECTLIT) {
            typeRegistry.resetImplicitPrototype(
                rhsValue.getJSType(), qVarType.getImplicitPrototype());
          } else if (!qVar.isTypeInferred()) {

try to fix hunk: 1
delete from 341 with range 1
try to fix hunk: 4
insert before 374 with       oldPrototype.setOwnerFunction(null);
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 11010
try to fix hunk: 0
replace from 1413 with range 1 to
          ObjectType qVarType = ObjectType.cast(qVar.getType());
          if (qVarType != null &&
              rhsValue != null &&
              rhsValue.getType() == Token.OBJECTLIT) {
            typeRegistry.resetImplicitPrototype(
                rhsValue.getJSType(), qVarType.getImplicitPrototype());
          } else if (!qVar.isTypeInferred()) {

try to fix hunk: 1
delete from 341 with range 1
try to fix hunk: 3
insert before 372 with     if (oldPrototype != null) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 11100
try to fix hunk: 0
replace from 1413 with range 1 to
          ObjectType qVarType = ObjectType.cast(qVar.getType());
          if (qVarType != null &&
              rhsValue != null &&
              rhsValue.getType() == Token.OBJECTLIT) {
            typeRegistry.resetImplicitPrototype(
                rhsValue.getJSType(), qVarType.getImplicitPrototype());
          } else if (!qVar.isTypeInferred()) {

try to fix hunk: 1
delete from 341 with range 1
try to fix hunk: 2
replace from 366 with range 1 to
    PrototypeObjectType oldPrototype = this.prototype;
    boolean replacedPrototype = oldPrototype != null;

patches are written to file
running tests...
used time: Finished in 190.28 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
pattern: 01111
try to fix hunk: 1
delete from 341 with range 1
try to fix hunk: 2
replace from 366 with range 1 to
    PrototypeObjectType oldPrototype = this.prototype;
    boolean replacedPrototype = oldPrototype != null;

try to fix hunk: 3
insert before 372 with     if (oldPrototype != null) {

try to fix hunk: 4
insert before 374 with       oldPrototype.setOwnerFunction(null);
    }

patches are written to file
running tests...
used time: Finished in 158.50 seconds
Failing tests: 3
	com.google.javascript.jscomp.TypeCheckTest::testIssue537a
	com.google.javascript.jscomp.TypeCheckTest::testIssue537b
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertyOnUnknownSuperClass2$catena_4
Can independently fix []
Could not fix independently
pattern: 10111
try to fix hunk: 0
replace from 1413 with range 1 to
          ObjectType qVarType = ObjectType.cast(qVar.getType());
          if (qVarType != null &&
              rhsValue != null &&
              rhsValue.getType() == Token.OBJECTLIT) {
            typeRegistry.resetImplicitPrototype(
                rhsValue.getJSType(), qVarType.getImplicitPrototype());
          } else if (!qVar.isTypeInferred()) {

try to fix hunk: 2
replace from 366 with range 1 to
    PrototypeObjectType oldPrototype = this.prototype;
    boolean replacedPrototype = oldPrototype != null;

try to fix hunk: 3
insert before 372 with     if (oldPrototype != null) {

try to fix hunk: 4
insert before 374 with       oldPrototype.setOwnerFunction(null);
    }

patches are written to file
running tests...
used time: Finished in 144.14 seconds
Failing tests: 1
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertyOnUnknownSuperClass2$catena_3
Includes new failing tests, set to unusable
pattern: 11011
try to fix hunk: 0
replace from 1413 with range 1 to
          ObjectType qVarType = ObjectType.cast(qVar.getType());
          if (qVarType != null &&
              rhsValue != null &&
              rhsValue.getType() == Token.OBJECTLIT) {
            typeRegistry.resetImplicitPrototype(
                rhsValue.getJSType(), qVarType.getImplicitPrototype());
          } else if (!qVar.isTypeInferred()) {

try to fix hunk: 1
delete from 341 with range 1
try to fix hunk: 3
insert before 372 with     if (oldPrototype != null) {

try to fix hunk: 4
insert before 374 with       oldPrototype.setOwnerFunction(null);
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 11101
try to fix hunk: 0
replace from 1413 with range 1 to
          ObjectType qVarType = ObjectType.cast(qVar.getType());
          if (qVarType != null &&
              rhsValue != null &&
              rhsValue.getType() == Token.OBJECTLIT) {
            typeRegistry.resetImplicitPrototype(
                rhsValue.getJSType(), qVarType.getImplicitPrototype());
          } else if (!qVar.isTypeInferred()) {

try to fix hunk: 1
delete from 341 with range 1
try to fix hunk: 2
replace from 366 with range 1 to
    PrototypeObjectType oldPrototype = this.prototype;
    boolean replacedPrototype = oldPrototype != null;

try to fix hunk: 4
insert before 374 with       oldPrototype.setOwnerFunction(null);
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 11110
try to fix hunk: 0
replace from 1413 with range 1 to
          ObjectType qVarType = ObjectType.cast(qVar.getType());
          if (qVarType != null &&
              rhsValue != null &&
              rhsValue.getType() == Token.OBJECTLIT) {
            typeRegistry.resetImplicitPrototype(
                rhsValue.getJSType(), qVarType.getImplicitPrototype());
          } else if (!qVar.isTypeInferred()) {

try to fix hunk: 1
delete from 341 with range 1
try to fix hunk: 2
replace from 366 with range 1 to
    PrototypeObjectType oldPrototype = this.prototype;
    boolean replacedPrototype = oldPrototype != null;

try to fix hunk: 3
insert before 372 with     if (oldPrototype != null) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 11111
try to fix hunk: 0
replace from 1413 with range 1 to
          ObjectType qVarType = ObjectType.cast(qVar.getType());
          if (qVarType != null &&
              rhsValue != null &&
              rhsValue.getType() == Token.OBJECTLIT) {
            typeRegistry.resetImplicitPrototype(
                rhsValue.getJSType(), qVarType.getImplicitPrototype());
          } else if (!qVar.isTypeInferred()) {

try to fix hunk: 1
delete from 341 with range 1
try to fix hunk: 2
replace from 366 with range 1 to
    PrototypeObjectType oldPrototype = this.prototype;
    boolean replacedPrototype = oldPrototype != null;

try to fix hunk: 3
insert before 372 with     if (oldPrototype != null) {

try to fix hunk: 4
insert before 374 with       oldPrototype.setOwnerFunction(null);
    }

patches are written to file
running tests...
used time: Finished in 102.85 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
Find 1 new bugs
