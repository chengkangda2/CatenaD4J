{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/main/java/org/apache/commons/math3/fraction/BigFraction.java",
            "replaced_with": "                if (epsilon == 0.0 && FastMath.abs(q1) < maxDenominator) {\n                    break;\n                }\n",
            "patch_type": "insert",
            "next_line_no": 306
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/math3/fraction/Fraction.java",
            "replaced_with": "                if (epsilon == 0.0 && FastMath.abs(q1) < maxDenominator) {\n                    break;\n                }\n",
            "patch_type": "insert",
            "next_line_no": 215
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math3.fraction.BigFractionTest::testDigitLimitConstructor",
            "org.apache.commons.math3.fraction.FractionTest::testDigitLimitConstructor"
        ],
        "org.apache.commons.math3.fraction.BigFractionTest::testDigitLimitConstructor": {
            "file_path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
            "Instance": "Begin: Pos(147, 5)\nEnd: Pos(160, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_1/src/test/java//org/apache/commons/math3/fraction/BigFractionTest.java\nName: testDigitLimitConstructor\nChilds: [StatementAssertion<Begin: Pos(149, 9), End: Pos(149, 54)>,\nStatementAssertion<Begin: Pos(150, 9), End: Pos(150, 55)>,\nStatementAssertion<Begin: Pos(151, 9), End: Pos(151, 56)>,\nStatementAssertion<Begin: Pos(153, 9), End: Pos(153, 57)>,\nStatementAssertion<Begin: Pos(154, 9), End: Pos(154, 59)>,\nStatementAssertion<Begin: Pos(155, 9), End: Pos(155, 63)>,\nStatementAssertion<Begin: Pos(156, 9), End: Pos(156, 65)>,\nStatementAssertion<Begin: Pos(159, 9), End: Pos(159, 64)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_1/src/test/java//org/apache/commons/math3/fraction/BigFractionTest.java",
            "name": "testDigitLimitConstructor",
            "begin": "Pos(147, 5)",
            "end": "Pos(160, 5)",
            "begin_line_no": 147,
            "end_line_no": 160,
            "child": [
                "Begin: Pos(149, 9)\nEnd: Pos(149, 54)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(150, 9)\nEnd: Pos(150, 55)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(151, 9)\nEnd: Pos(151, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(153, 9)\nEnd: Pos(153, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(154, 9)\nEnd: Pos(154, 59)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(155, 9)\nEnd: Pos(155, 63)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(156, 9)\nEnd: Pos(156, 65)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(159, 9)\nEnd: Pos(159, 64)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void testDigitLimitConstructor$catena_0() throws ConvergenceException {\n        assertFraction(2, 5, new BigFraction(0.4, 9));                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFraction(2, 5, new BigFraction(0.4, 99));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new BigFraction(0.4, 999));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertFraction(3, 5, new BigFraction(0.6152, 9));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(8, 13, new BigFraction(0.6152, 99));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(510, 829, new BigFraction(0.6152, 999));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(769, 1250, new BigFraction(0.6152, 9999));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // MATH-996\n        try{ assertFraction(1, 2, new BigFraction(0.5000000001, 10));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testDigitLimitConstructor$catena_1() throws ConvergenceException {\n        try{ assertFraction(2, 5, new BigFraction(0.4, 9));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFraction(2, 5, new BigFraction(0.4, 99));                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFraction(2, 5, new BigFraction(0.4, 999));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertFraction(3, 5, new BigFraction(0.6152, 9));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(8, 13, new BigFraction(0.6152, 99));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(510, 829, new BigFraction(0.6152, 999));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(769, 1250, new BigFraction(0.6152, 9999));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // MATH-996\n        try{ assertFraction(1, 2, new BigFraction(0.5000000001, 10));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testDigitLimitConstructor$catena_2() throws ConvergenceException {\n        try{ assertFraction(2, 5, new BigFraction(0.4, 9));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new BigFraction(0.4, 99));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFraction(2, 5, new BigFraction(0.4, 999));                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertFraction(3, 5, new BigFraction(0.6152, 9));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(8, 13, new BigFraction(0.6152, 99));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(510, 829, new BigFraction(0.6152, 999));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(769, 1250, new BigFraction(0.6152, 9999));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // MATH-996\n        try{ assertFraction(1, 2, new BigFraction(0.5000000001, 10));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testDigitLimitConstructor$catena_3() throws ConvergenceException {\n        try{ assertFraction(2, 5, new BigFraction(0.4, 9));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new BigFraction(0.4, 99));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new BigFraction(0.4, 999));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertFraction(3, 5, new BigFraction(0.6152, 9));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFraction(8, 13, new BigFraction(0.6152, 99));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(510, 829, new BigFraction(0.6152, 999));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(769, 1250, new BigFraction(0.6152, 9999));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // MATH-996\n        try{ assertFraction(1, 2, new BigFraction(0.5000000001, 10));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testDigitLimitConstructor$catena_4() throws ConvergenceException {\n        try{ assertFraction(2, 5, new BigFraction(0.4, 9));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new BigFraction(0.4, 99));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new BigFraction(0.4, 999));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertFraction(3, 5, new BigFraction(0.6152, 9));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFraction(8, 13, new BigFraction(0.6152, 99));                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFraction(510, 829, new BigFraction(0.6152, 999));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(769, 1250, new BigFraction(0.6152, 9999));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // MATH-996\n        try{ assertFraction(1, 2, new BigFraction(0.5000000001, 10));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testDigitLimitConstructor$catena_5() throws ConvergenceException {\n        try{ assertFraction(2, 5, new BigFraction(0.4, 9));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new BigFraction(0.4, 99));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new BigFraction(0.4, 999));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertFraction(3, 5, new BigFraction(0.6152, 9));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(8, 13, new BigFraction(0.6152, 99));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFraction(510, 829, new BigFraction(0.6152, 999));                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFraction(769, 1250, new BigFraction(0.6152, 9999));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // MATH-996\n        try{ assertFraction(1, 2, new BigFraction(0.5000000001, 10));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testDigitLimitConstructor$catena_6() throws ConvergenceException {\n        try{ assertFraction(2, 5, new BigFraction(0.4, 9));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new BigFraction(0.4, 99));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new BigFraction(0.4, 999));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertFraction(3, 5, new BigFraction(0.6152, 9));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(8, 13, new BigFraction(0.6152, 99));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(510, 829, new BigFraction(0.6152, 999));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFraction(769, 1250, new BigFraction(0.6152, 9999));                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // MATH-996\n        try{ assertFraction(1, 2, new BigFraction(0.5000000001, 10));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testDigitLimitConstructor$catena_7() throws ConvergenceException {\n        try{ assertFraction(2, 5, new BigFraction(0.4, 9));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new BigFraction(0.4, 99));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new BigFraction(0.4, 999));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertFraction(3, 5, new BigFraction(0.6152, 9));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(8, 13, new BigFraction(0.6152, 99));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(510, 829, new BigFraction(0.6152, 999));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(769, 1250, new BigFraction(0.6152, 9999));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // MATH-996\n        assertFraction(1, 2, new BigFraction(0.5000000001, 10));                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void testDigitLimitConstructor$catena_0() throws ConvergenceException {\n        assertFraction(2, 5, new BigFraction(0.4, 9));                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFraction(2, 5, new BigFraction(0.4, 99));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new BigFraction(0.4, 999));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertFraction(3, 5, new BigFraction(0.6152, 9));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(8, 13, new BigFraction(0.6152, 99));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(510, 829, new BigFraction(0.6152, 999));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(769, 1250, new BigFraction(0.6152, 9999));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // MATH-996\n        try{ assertFraction(1, 2, new BigFraction(0.5000000001, 10));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void testDigitLimitConstructor$catena_1() throws ConvergenceException {\n        try{ assertFraction(2, 5, new BigFraction(0.4, 9));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFraction(2, 5, new BigFraction(0.4, 99));                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFraction(2, 5, new BigFraction(0.4, 999));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertFraction(3, 5, new BigFraction(0.6152, 9));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(8, 13, new BigFraction(0.6152, 99));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(510, 829, new BigFraction(0.6152, 999));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(769, 1250, new BigFraction(0.6152, 9999));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // MATH-996\n        try{ assertFraction(1, 2, new BigFraction(0.5000000001, 10));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    @Test\n    public void testDigitLimitConstructor$catena_2() throws ConvergenceException {\n        try{ assertFraction(2, 5, new BigFraction(0.4, 9));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new BigFraction(0.4, 99));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFraction(2, 5, new BigFraction(0.4, 999));                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertFraction(3, 5, new BigFraction(0.6152, 9));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(8, 13, new BigFraction(0.6152, 99));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(510, 829, new BigFraction(0.6152, 999));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(769, 1250, new BigFraction(0.6152, 9999));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // MATH-996\n        try{ assertFraction(1, 2, new BigFraction(0.5000000001, 10));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    @Test\n    public void testDigitLimitConstructor$catena_3() throws ConvergenceException {\n        try{ assertFraction(2, 5, new BigFraction(0.4, 9));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new BigFraction(0.4, 99));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new BigFraction(0.4, 999));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertFraction(3, 5, new BigFraction(0.6152, 9));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFraction(8, 13, new BigFraction(0.6152, 99));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(510, 829, new BigFraction(0.6152, 999));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(769, 1250, new BigFraction(0.6152, 9999));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // MATH-996\n        try{ assertFraction(1, 2, new BigFraction(0.5000000001, 10));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    @Test\n    public void testDigitLimitConstructor$catena_4() throws ConvergenceException {\n        try{ assertFraction(2, 5, new BigFraction(0.4, 9));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new BigFraction(0.4, 99));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new BigFraction(0.4, 999));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertFraction(3, 5, new BigFraction(0.6152, 9));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFraction(8, 13, new BigFraction(0.6152, 99));                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFraction(510, 829, new BigFraction(0.6152, 999));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(769, 1250, new BigFraction(0.6152, 9999));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // MATH-996\n        try{ assertFraction(1, 2, new BigFraction(0.5000000001, 10));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    @Test\n    public void testDigitLimitConstructor$catena_5() throws ConvergenceException {\n        try{ assertFraction(2, 5, new BigFraction(0.4, 9));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new BigFraction(0.4, 99));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new BigFraction(0.4, 999));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertFraction(3, 5, new BigFraction(0.6152, 9));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(8, 13, new BigFraction(0.6152, 99));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFraction(510, 829, new BigFraction(0.6152, 999));                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFraction(769, 1250, new BigFraction(0.6152, 9999));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // MATH-996\n        try{ assertFraction(1, 2, new BigFraction(0.5000000001, 10));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "6": "    @Test\n    public void testDigitLimitConstructor$catena_6() throws ConvergenceException {\n        try{ assertFraction(2, 5, new BigFraction(0.4, 9));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new BigFraction(0.4, 99));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new BigFraction(0.4, 999));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertFraction(3, 5, new BigFraction(0.6152, 9));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(8, 13, new BigFraction(0.6152, 99));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(510, 829, new BigFraction(0.6152, 999));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFraction(769, 1250, new BigFraction(0.6152, 9999));                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // MATH-996\n        try{ assertFraction(1, 2, new BigFraction(0.5000000001, 10));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "7": "    @Test\n    public void testDigitLimitConstructor$catena_7() throws ConvergenceException {\n        try{ assertFraction(2, 5, new BigFraction(0.4, 9));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new BigFraction(0.4, 99));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new BigFraction(0.4, 999));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertFraction(3, 5, new BigFraction(0.6152, 9));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(8, 13, new BigFraction(0.6152, 99));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(510, 829, new BigFraction(0.6152, 999));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(769, 1250, new BigFraction(0.6152, 9999));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // MATH-996\n        assertFraction(1, 2, new BigFraction(0.5000000001, 10));                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.math3.fraction.FractionTest::testDigitLimitConstructor": {
            "file_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
            "Instance": "Begin: Pos(122, 5)\nEnd: Pos(135, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_1/src/test/java//org/apache/commons/math3/fraction/FractionTest.java\nName: testDigitLimitConstructor\nChilds: [StatementAssertion<Begin: Pos(124, 9), End: Pos(124, 53)>,\nStatementAssertion<Begin: Pos(125, 9), End: Pos(125, 53)>,\nStatementAssertion<Begin: Pos(126, 9), End: Pos(126, 53)>,\nStatementAssertion<Begin: Pos(128, 9), End: Pos(128, 62)>,\nStatementAssertion<Begin: Pos(129, 9), End: Pos(129, 62)>,\nStatementAssertion<Begin: Pos(130, 9), End: Pos(130, 62)>,\nStatementAssertion<Begin: Pos(131, 9), End: Pos(131, 62)>,\nStatementAssertion<Begin: Pos(134, 9), End: Pos(134, 61)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_1/src/test/java//org/apache/commons/math3/fraction/FractionTest.java",
            "name": "testDigitLimitConstructor",
            "begin": "Pos(122, 5)",
            "end": "Pos(135, 5)",
            "begin_line_no": 122,
            "end_line_no": 135,
            "child": [
                "Begin: Pos(124, 9)\nEnd: Pos(124, 53)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(125, 9)\nEnd: Pos(125, 53)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(126, 9)\nEnd: Pos(126, 53)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(128, 9)\nEnd: Pos(128, 62)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(129, 9)\nEnd: Pos(129, 62)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(130, 9)\nEnd: Pos(130, 62)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(131, 9)\nEnd: Pos(131, 62)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(134, 9)\nEnd: Pos(134, 61)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void testDigitLimitConstructor$catena_0() throws ConvergenceException  {\n        assertFraction(2, 5, new Fraction(0.4,   9));                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFraction(2, 5, new Fraction(0.4,  99));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new Fraction(0.4, 999));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertFraction(3, 5,      new Fraction(0.6152,    9));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(8, 13,     new Fraction(0.6152,   99));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(510, 829,  new Fraction(0.6152,  999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(769, 1250, new Fraction(0.6152, 9999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // MATH-996\n        try{ assertFraction(1, 2, new Fraction(0.5000000001, 10));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testDigitLimitConstructor$catena_1() throws ConvergenceException  {\n        try{ assertFraction(2, 5, new Fraction(0.4,   9));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFraction(2, 5, new Fraction(0.4,  99));                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFraction(2, 5, new Fraction(0.4, 999));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertFraction(3, 5,      new Fraction(0.6152,    9));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(8, 13,     new Fraction(0.6152,   99));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(510, 829,  new Fraction(0.6152,  999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(769, 1250, new Fraction(0.6152, 9999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // MATH-996\n        try{ assertFraction(1, 2, new Fraction(0.5000000001, 10));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testDigitLimitConstructor$catena_2() throws ConvergenceException  {\n        try{ assertFraction(2, 5, new Fraction(0.4,   9));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new Fraction(0.4,  99));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFraction(2, 5, new Fraction(0.4, 999));                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertFraction(3, 5,      new Fraction(0.6152,    9));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(8, 13,     new Fraction(0.6152,   99));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(510, 829,  new Fraction(0.6152,  999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(769, 1250, new Fraction(0.6152, 9999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // MATH-996\n        try{ assertFraction(1, 2, new Fraction(0.5000000001, 10));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testDigitLimitConstructor$catena_3() throws ConvergenceException  {\n        try{ assertFraction(2, 5, new Fraction(0.4,   9));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new Fraction(0.4,  99));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new Fraction(0.4, 999));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertFraction(3, 5,      new Fraction(0.6152,    9));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFraction(8, 13,     new Fraction(0.6152,   99));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(510, 829,  new Fraction(0.6152,  999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(769, 1250, new Fraction(0.6152, 9999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // MATH-996\n        try{ assertFraction(1, 2, new Fraction(0.5000000001, 10));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testDigitLimitConstructor$catena_4() throws ConvergenceException  {\n        try{ assertFraction(2, 5, new Fraction(0.4,   9));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new Fraction(0.4,  99));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new Fraction(0.4, 999));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertFraction(3, 5,      new Fraction(0.6152,    9));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFraction(8, 13,     new Fraction(0.6152,   99));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFraction(510, 829,  new Fraction(0.6152,  999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(769, 1250, new Fraction(0.6152, 9999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // MATH-996\n        try{ assertFraction(1, 2, new Fraction(0.5000000001, 10));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testDigitLimitConstructor$catena_5() throws ConvergenceException  {\n        try{ assertFraction(2, 5, new Fraction(0.4,   9));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new Fraction(0.4,  99));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new Fraction(0.4, 999));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertFraction(3, 5,      new Fraction(0.6152,    9));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(8, 13,     new Fraction(0.6152,   99));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFraction(510, 829,  new Fraction(0.6152,  999));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFraction(769, 1250, new Fraction(0.6152, 9999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // MATH-996\n        try{ assertFraction(1, 2, new Fraction(0.5000000001, 10));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testDigitLimitConstructor$catena_6() throws ConvergenceException  {\n        try{ assertFraction(2, 5, new Fraction(0.4,   9));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new Fraction(0.4,  99));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new Fraction(0.4, 999));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertFraction(3, 5,      new Fraction(0.6152,    9));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(8, 13,     new Fraction(0.6152,   99));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(510, 829,  new Fraction(0.6152,  999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFraction(769, 1250, new Fraction(0.6152, 9999));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // MATH-996\n        try{ assertFraction(1, 2, new Fraction(0.5000000001, 10));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testDigitLimitConstructor$catena_7() throws ConvergenceException  {\n        try{ assertFraction(2, 5, new Fraction(0.4,   9));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new Fraction(0.4,  99));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new Fraction(0.4, 999));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertFraction(3, 5,      new Fraction(0.6152,    9));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(8, 13,     new Fraction(0.6152,   99));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(510, 829,  new Fraction(0.6152,  999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(769, 1250, new Fraction(0.6152, 9999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // MATH-996\n        assertFraction(1, 2, new Fraction(0.5000000001, 10));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void testDigitLimitConstructor$catena_0() throws ConvergenceException  {\n        assertFraction(2, 5, new Fraction(0.4,   9));                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFraction(2, 5, new Fraction(0.4,  99));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new Fraction(0.4, 999));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertFraction(3, 5,      new Fraction(0.6152,    9));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(8, 13,     new Fraction(0.6152,   99));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(510, 829,  new Fraction(0.6152,  999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(769, 1250, new Fraction(0.6152, 9999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // MATH-996\n        try{ assertFraction(1, 2, new Fraction(0.5000000001, 10));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void testDigitLimitConstructor$catena_1() throws ConvergenceException  {\n        try{ assertFraction(2, 5, new Fraction(0.4,   9));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFraction(2, 5, new Fraction(0.4,  99));                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFraction(2, 5, new Fraction(0.4, 999));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertFraction(3, 5,      new Fraction(0.6152,    9));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(8, 13,     new Fraction(0.6152,   99));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(510, 829,  new Fraction(0.6152,  999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(769, 1250, new Fraction(0.6152, 9999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // MATH-996\n        try{ assertFraction(1, 2, new Fraction(0.5000000001, 10));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    @Test\n    public void testDigitLimitConstructor$catena_2() throws ConvergenceException  {\n        try{ assertFraction(2, 5, new Fraction(0.4,   9));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new Fraction(0.4,  99));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFraction(2, 5, new Fraction(0.4, 999));                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertFraction(3, 5,      new Fraction(0.6152,    9));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(8, 13,     new Fraction(0.6152,   99));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(510, 829,  new Fraction(0.6152,  999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(769, 1250, new Fraction(0.6152, 9999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // MATH-996\n        try{ assertFraction(1, 2, new Fraction(0.5000000001, 10));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    @Test\n    public void testDigitLimitConstructor$catena_3() throws ConvergenceException  {\n        try{ assertFraction(2, 5, new Fraction(0.4,   9));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new Fraction(0.4,  99));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new Fraction(0.4, 999));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertFraction(3, 5,      new Fraction(0.6152,    9));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFraction(8, 13,     new Fraction(0.6152,   99));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(510, 829,  new Fraction(0.6152,  999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(769, 1250, new Fraction(0.6152, 9999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // MATH-996\n        try{ assertFraction(1, 2, new Fraction(0.5000000001, 10));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    @Test\n    public void testDigitLimitConstructor$catena_4() throws ConvergenceException  {\n        try{ assertFraction(2, 5, new Fraction(0.4,   9));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new Fraction(0.4,  99));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new Fraction(0.4, 999));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertFraction(3, 5,      new Fraction(0.6152,    9));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFraction(8, 13,     new Fraction(0.6152,   99));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFraction(510, 829,  new Fraction(0.6152,  999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(769, 1250, new Fraction(0.6152, 9999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // MATH-996\n        try{ assertFraction(1, 2, new Fraction(0.5000000001, 10));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    @Test\n    public void testDigitLimitConstructor$catena_5() throws ConvergenceException  {\n        try{ assertFraction(2, 5, new Fraction(0.4,   9));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new Fraction(0.4,  99));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new Fraction(0.4, 999));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertFraction(3, 5,      new Fraction(0.6152,    9));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(8, 13,     new Fraction(0.6152,   99));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFraction(510, 829,  new Fraction(0.6152,  999));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFraction(769, 1250, new Fraction(0.6152, 9999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // MATH-996\n        try{ assertFraction(1, 2, new Fraction(0.5000000001, 10));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "6": "    @Test\n    public void testDigitLimitConstructor$catena_6() throws ConvergenceException  {\n        try{ assertFraction(2, 5, new Fraction(0.4,   9));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new Fraction(0.4,  99));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new Fraction(0.4, 999));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertFraction(3, 5,      new Fraction(0.6152,    9));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(8, 13,     new Fraction(0.6152,   99));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(510, 829,  new Fraction(0.6152,  999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFraction(769, 1250, new Fraction(0.6152, 9999));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // MATH-996\n        try{ assertFraction(1, 2, new Fraction(0.5000000001, 10));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "7": "    @Test\n    public void testDigitLimitConstructor$catena_7() throws ConvergenceException  {\n        try{ assertFraction(2, 5, new Fraction(0.4,   9));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new Fraction(0.4,  99));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(2, 5, new Fraction(0.4, 999));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertFraction(3, 5,      new Fraction(0.6152,    9));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(8, 13,     new Fraction(0.6152,   99));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(510, 829,  new Fraction(0.6152,  999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFraction(769, 1250, new Fraction(0.6152, 9999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // MATH-996\n        assertFraction(1, 2, new Fraction(0.5000000001, 10));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "01": {
        "failing_tests": [
            "org.apache.commons.math3.fraction.FractionTest::testDigitLimitConstructor$catena_7"
        ]
    },
    "10": {
        "failing_tests": [
            "org.apache.commons.math3.fraction.BigFractionTest::testDigitLimitConstructor$catena_7"
        ]
    }
}