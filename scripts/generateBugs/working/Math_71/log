---
Begin generate bug_id: Math_71
num_of_hunks: 2
use working dir: ./working/data/Math_71
Try to checkout Math_71
build dir: ['./working/data/Math_71/target/classes', './working/data/Math_71/target/test-classes']
init FileManager
trace file: src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
trace file: src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java
trying to replace old failing tests
edit: replace from 44 range 52 at src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java
to
  public void testMissedEndEvent$catena_0() throws IntegratorException, DerivativeException {
      final double   t0     = 1878250320.0000029;
      final double   tEvent = 1878250379.9999986;
      final double[] k      = { 1.0e-4, 1.0e-5, 1.0e-6 };
      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {

          public int getDimension() {
              return k.length;
          }

          public void computeDerivatives(double t, double[] y, double[] yDot) {
              for (int i = 0; i < y.length; ++i) {
                  yDot[i] = k[i] * y[i];
              }
          }
      };

      ClassicalRungeKuttaIntegrator integrator = new ClassicalRungeKuttaIntegrator(60.0);

      double[] y0   = new double[k.length];
      for (int i = 0; i < y0.length; ++i) {
          y0[i] = i + 1;
      }
      double[] y    = new double[k.length];

      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);
      Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                          /***** ORIGINAL ASSERTION IS HERE *****/
      for (int i = 0; i < y.length; ++i) {
          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}
      }

      integrator.addEventHandler(new EventHandler() {

          public void resetState(double t, double[] y) {
          }

          public double g(double t, double[] y) {
              return t - tEvent;
          }

          public int eventOccurred(double t, double[] y, boolean increasing) {
              try{ Assert.assertEquals(tEvent, t, 5.0e-6);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
              return CONTINUE;
          }
      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);
      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);
      try{ Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                               }catch(Throwable __SHOULD_BE_IGNORED){}
      for (int i = 0; i < y.length; ++i) {
          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}
      }

  }   public void testMissedEndEvent$catena_1() throws IntegratorException, DerivativeException {
      final double   t0     = 1878250320.0000029;
      final double   tEvent = 1878250379.9999986;
      final double[] k      = { 1.0e-4, 1.0e-5, 1.0e-6 };
      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {

          public int getDimension() {
              return k.length;
          }

          public void computeDerivatives(double t, double[] y, double[] yDot) {
              for (int i = 0; i < y.length; ++i) {
                  yDot[i] = k[i] * y[i];
              }
          }
      };

      ClassicalRungeKuttaIntegrator integrator = new ClassicalRungeKuttaIntegrator(60.0);

      double[] y0   = new double[k.length];
      for (int i = 0; i < y0.length; ++i) {
          y0[i] = i + 1;
      }
      double[] y    = new double[k.length];

      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);
      try{ Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
      for (int i = 0; i < y.length; ++i) {
          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                        /***** ORIGINAL ASSERTION IS HERE *****/
      }

      integrator.addEventHandler(new EventHandler() {

          public void resetState(double t, double[] y) {
          }

          public double g(double t, double[] y) {
              return t - tEvent;
          }

          public int eventOccurred(double t, double[] y, boolean increasing) {
              try{ Assert.assertEquals(tEvent, t, 5.0e-6);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
              return CONTINUE;
          }
      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);
      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);
      try{ Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                               }catch(Throwable __SHOULD_BE_IGNORED){}
      for (int i = 0; i < y.length; ++i) {
          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}
      }

  }   public void testMissedEndEvent$catena_2() throws IntegratorException, DerivativeException {
      final double   t0     = 1878250320.0000029;
      final double   tEvent = 1878250379.9999986;
      final double[] k      = { 1.0e-4, 1.0e-5, 1.0e-6 };
      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {

          public int getDimension() {
              return k.length;
          }

          public void computeDerivatives(double t, double[] y, double[] yDot) {
              for (int i = 0; i < y.length; ++i) {
                  yDot[i] = k[i] * y[i];
              }
          }
      };

      ClassicalRungeKuttaIntegrator integrator = new ClassicalRungeKuttaIntegrator(60.0);

      double[] y0   = new double[k.length];
      for (int i = 0; i < y0.length; ++i) {
          y0[i] = i + 1;
      }
      double[] y    = new double[k.length];

      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);
      try{ Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
      for (int i = 0; i < y.length; ++i) {
          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}
      }

      integrator.addEventHandler(new EventHandler() {

          public void resetState(double t, double[] y) {
          }

          public double g(double t, double[] y) {
              return t - tEvent;
          }

          public int eventOccurred(double t, double[] y, boolean increasing) {
              Assert.assertEquals(tEvent, t, 5.0e-6);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
              return CONTINUE;
          }
      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);
      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);
      try{ Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                               }catch(Throwable __SHOULD_BE_IGNORED){}
      for (int i = 0; i < y.length; ++i) {
          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}
      }

  }   public void testMissedEndEvent$catena_3() throws IntegratorException, DerivativeException {
      final double   t0     = 1878250320.0000029;
      final double   tEvent = 1878250379.9999986;
      final double[] k      = { 1.0e-4, 1.0e-5, 1.0e-6 };
      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {

          public int getDimension() {
              return k.length;
          }

          public void computeDerivatives(double t, double[] y, double[] yDot) {
              for (int i = 0; i < y.length; ++i) {
                  yDot[i] = k[i] * y[i];
              }
          }
      };

      ClassicalRungeKuttaIntegrator integrator = new ClassicalRungeKuttaIntegrator(60.0);

      double[] y0   = new double[k.length];
      for (int i = 0; i < y0.length; ++i) {
          y0[i] = i + 1;
      }
      double[] y    = new double[k.length];

      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);
      try{ Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
      for (int i = 0; i < y.length; ++i) {
          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}
      }

      integrator.addEventHandler(new EventHandler() {

          public void resetState(double t, double[] y) {
          }

          public double g(double t, double[] y) {
              return t - tEvent;
          }

          public int eventOccurred(double t, double[] y, boolean increasing) {
              try{ Assert.assertEquals(tEvent, t, 5.0e-6);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
              return CONTINUE;
          }
      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);
      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);
      Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                                    /***** ORIGINAL ASSERTION IS HERE *****/
      for (int i = 0; i < y.length; ++i) {
          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}
      }

  }   public void testMissedEndEvent$catena_4() throws IntegratorException, DerivativeException {
      final double   t0     = 1878250320.0000029;
      final double   tEvent = 1878250379.9999986;
      final double[] k      = { 1.0e-4, 1.0e-5, 1.0e-6 };
      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {

          public int getDimension() {
              return k.length;
          }

          public void computeDerivatives(double t, double[] y, double[] yDot) {
              for (int i = 0; i < y.length; ++i) {
                  yDot[i] = k[i] * y[i];
              }
          }
      };

      ClassicalRungeKuttaIntegrator integrator = new ClassicalRungeKuttaIntegrator(60.0);

      double[] y0   = new double[k.length];
      for (int i = 0; i < y0.length; ++i) {
          y0[i] = i + 1;
      }
      double[] y    = new double[k.length];

      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);
      try{ Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
      for (int i = 0; i < y.length; ++i) {
          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}
      }

      integrator.addEventHandler(new EventHandler() {

          public void resetState(double t, double[] y) {
          }

          public double g(double t, double[] y) {
              return t - tEvent;
          }

          public int eventOccurred(double t, double[] y, boolean increasing) {
              try{ Assert.assertEquals(tEvent, t, 5.0e-6);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
              return CONTINUE;
          }
      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);
      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);
      try{ Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                               }catch(Throwable __SHOULD_BE_IGNORED){}
      for (int i = 0; i < y.length; ++i) {
          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                        /***** ORIGINAL ASSERTION IS HERE *****/
      }

  }
edit: replace from 44 range 55 at src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java
to
  public void testMissedEndEvent$catena_0() throws IntegratorException, DerivativeException {
      final double   t0     = 1878250320.0000029;
      final double   tEvent = 1878250379.9999986;
      final double[] k  = { 1.0e-4, 1.0e-5, 1.0e-6 };
      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {

          public int getDimension() {
              return k.length;
          }

          public void computeDerivatives(double t, double[] y, double[] yDot) {
              for (int i = 0; i < y.length; ++i) {
                  yDot[i] = k[i] * y[i];
              }
          }
      };

      DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0,
                                                                             1.0e-10, 1.0e-10);

      double[] y0   = new double[k.length];
      for (int i = 0; i < y0.length; ++i) {
          y0[i] = i + 1;
      }
      double[] y    = new double[k.length];

      integrator.setInitialStepSize(60.0);
      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);
      Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                          /***** ORIGINAL ASSERTION IS HERE *****/
      for (int i = 0; i < y.length; ++i) {
          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}
      }

      integrator.setInitialStepSize(60.0);
      integrator.addEventHandler(new EventHandler() {

          public void resetState(double t, double[] y) {
          }

          public double g(double t, double[] y) {
              return t - tEvent;
          }

          public int eventOccurred(double t, double[] y, boolean increasing) {
              try{ Assert.assertEquals(tEvent, t, 5.0e-6);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
              return CONTINUE;
          }
      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);
      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);
      try{ Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                               }catch(Throwable __SHOULD_BE_IGNORED){}
      for (int i = 0; i < y.length; ++i) {
          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}
      }

  }   public void testMissedEndEvent$catena_1() throws IntegratorException, DerivativeException {
      final double   t0     = 1878250320.0000029;
      final double   tEvent = 1878250379.9999986;
      final double[] k  = { 1.0e-4, 1.0e-5, 1.0e-6 };
      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {

          public int getDimension() {
              return k.length;
          }

          public void computeDerivatives(double t, double[] y, double[] yDot) {
              for (int i = 0; i < y.length; ++i) {
                  yDot[i] = k[i] * y[i];
              }
          }
      };

      DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0,
                                                                             1.0e-10, 1.0e-10);

      double[] y0   = new double[k.length];
      for (int i = 0; i < y0.length; ++i) {
          y0[i] = i + 1;
      }
      double[] y    = new double[k.length];

      integrator.setInitialStepSize(60.0);
      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);
      try{ Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
      for (int i = 0; i < y.length; ++i) {
          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                        /***** ORIGINAL ASSERTION IS HERE *****/
      }

      integrator.setInitialStepSize(60.0);
      integrator.addEventHandler(new EventHandler() {

          public void resetState(double t, double[] y) {
          }

          public double g(double t, double[] y) {
              return t - tEvent;
          }

          public int eventOccurred(double t, double[] y, boolean increasing) {
              try{ Assert.assertEquals(tEvent, t, 5.0e-6);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
              return CONTINUE;
          }
      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);
      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);
      try{ Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                               }catch(Throwable __SHOULD_BE_IGNORED){}
      for (int i = 0; i < y.length; ++i) {
          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}
      }

  }   public void testMissedEndEvent$catena_2() throws IntegratorException, DerivativeException {
      final double   t0     = 1878250320.0000029;
      final double   tEvent = 1878250379.9999986;
      final double[] k  = { 1.0e-4, 1.0e-5, 1.0e-6 };
      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {

          public int getDimension() {
              return k.length;
          }

          public void computeDerivatives(double t, double[] y, double[] yDot) {
              for (int i = 0; i < y.length; ++i) {
                  yDot[i] = k[i] * y[i];
              }
          }
      };

      DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0,
                                                                             1.0e-10, 1.0e-10);

      double[] y0   = new double[k.length];
      for (int i = 0; i < y0.length; ++i) {
          y0[i] = i + 1;
      }
      double[] y    = new double[k.length];

      integrator.setInitialStepSize(60.0);
      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);
      try{ Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
      for (int i = 0; i < y.length; ++i) {
          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}
      }

      integrator.setInitialStepSize(60.0);
      integrator.addEventHandler(new EventHandler() {

          public void resetState(double t, double[] y) {
          }

          public double g(double t, double[] y) {
              return t - tEvent;
          }

          public int eventOccurred(double t, double[] y, boolean increasing) {
              Assert.assertEquals(tEvent, t, 5.0e-6);                                                       /***** ORIGINAL ASSERTION IS HERE *****/
              return CONTINUE;
          }
      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);
      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);
      try{ Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                               }catch(Throwable __SHOULD_BE_IGNORED){}
      for (int i = 0; i < y.length; ++i) {
          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}
      }

  }   public void testMissedEndEvent$catena_3() throws IntegratorException, DerivativeException {
      final double   t0     = 1878250320.0000029;
      final double   tEvent = 1878250379.9999986;
      final double[] k  = { 1.0e-4, 1.0e-5, 1.0e-6 };
      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {

          public int getDimension() {
              return k.length;
          }

          public void computeDerivatives(double t, double[] y, double[] yDot) {
              for (int i = 0; i < y.length; ++i) {
                  yDot[i] = k[i] * y[i];
              }
          }
      };

      DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0,
                                                                             1.0e-10, 1.0e-10);

      double[] y0   = new double[k.length];
      for (int i = 0; i < y0.length; ++i) {
          y0[i] = i + 1;
      }
      double[] y    = new double[k.length];

      integrator.setInitialStepSize(60.0);
      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);
      try{ Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
      for (int i = 0; i < y.length; ++i) {
          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}
      }

      integrator.setInitialStepSize(60.0);
      integrator.addEventHandler(new EventHandler() {

          public void resetState(double t, double[] y) {
          }

          public double g(double t, double[] y) {
              return t - tEvent;
          }

          public int eventOccurred(double t, double[] y, boolean increasing) {
              try{ Assert.assertEquals(tEvent, t, 5.0e-6);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
              return CONTINUE;
          }
      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);
      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);
      Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                                    /***** ORIGINAL ASSERTION IS HERE *****/
      for (int i = 0; i < y.length; ++i) {
          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}
      }

  }   public void testMissedEndEvent$catena_4() throws IntegratorException, DerivativeException {
      final double   t0     = 1878250320.0000029;
      final double   tEvent = 1878250379.9999986;
      final double[] k  = { 1.0e-4, 1.0e-5, 1.0e-6 };
      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {

          public int getDimension() {
              return k.length;
          }

          public void computeDerivatives(double t, double[] y, double[] yDot) {
              for (int i = 0; i < y.length; ++i) {
                  yDot[i] = k[i] * y[i];
              }
          }
      };

      DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0,
                                                                             1.0e-10, 1.0e-10);

      double[] y0   = new double[k.length];
      for (int i = 0; i < y0.length; ++i) {
          y0[i] = i + 1;
      }
      double[] y    = new double[k.length];

      integrator.setInitialStepSize(60.0);
      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);
      try{ Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
      for (int i = 0; i < y.length; ++i) {
          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}
      }

      integrator.setInitialStepSize(60.0);
      integrator.addEventHandler(new EventHandler() {

          public void resetState(double t, double[] y) {
          }

          public double g(double t, double[] y) {
              return t - tEvent;
          }

          public int eventOccurred(double t, double[] y, boolean increasing) {
              try{ Assert.assertEquals(tEvent, t, 5.0e-6);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
              return CONTINUE;
          }
      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);
      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);
      try{ Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                               }catch(Throwable __SHOULD_BE_IGNORED){}
      for (int i = 0; i < y.length; ++i) {
          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                        /***** ORIGINAL ASSERTION IS HERE *****/
      }

  }
trace file: src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java
trace file: src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java
new test num: 10
ori test num: 0
pattern: 00
patches are written to file
running tests...
used time: Finished in 40.62 seconds
Failing tests: 3
	org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest::testMissedEndEvent$catena_0
	org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest::testMissedEndEvent$catena_3
	org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest::testMissedEndEvent$catena_0
pattern: 01
try to fix hunk: 1
insert before 180 with                 interpolator.storeTime(stepStart);
                System.arraycopy(y, 0, yTmp, 0, y0.length);
                stepSize = 0;

patches are written to file
running tests...
used time: Finished in 28.39 seconds
Failing tests: 1
	org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest::testMissedEndEvent$catena_0
No new failing tests but only 1 hunk
pattern: 10
try to fix hunk: 0
insert before 300 with                   interpolator.storeTime(stepStart);
                  System.arraycopy(y, 0, yTmp, 0, y0.length);
                  hNew     = 0;
                  stepSize = 0;

patches are written to file
running tests...
used time: Finished in 27.37 seconds
Failing tests: 2
	org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest::testMissedEndEvent$catena_0
	org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest::testMissedEndEvent$catena_3
No new failing tests but only 1 hunk
pattern: 11
try to fix hunk: 0
insert before 300 with                   interpolator.storeTime(stepStart);
                  System.arraycopy(y, 0, yTmp, 0, y0.length);
                  hNew     = 0;
                  stepSize = 0;

try to fix hunk: 1
insert before 180 with                 interpolator.storeTime(stepStart);
                System.arraycopy(y, 0, yTmp, 0, y0.length);
                stepSize = 0;

patches are written to file
running tests...
used time: Finished in 24.84 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
Find 0 new bugs
