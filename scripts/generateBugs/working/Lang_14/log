---
Begin generate bug_id: Lang_14
num_of_hunks: 2
timeout for running: 3600
use working dir: ./working/data/Lang_14
Try to checkout Lang_14
build dir: ['./working/data/Lang_14/target/classes', './working/data/Lang_14/target/tests']
init FileManager
trace file: src/main/java/org/apache/commons/lang3/StringUtils.java
trying to replace old failing tests
edit: replace from 486 range 15 at src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
to
    public void testEquals$catena_0() {
        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;
        assertTrue(StringUtils.equals(null, null));                                                              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testEquals$catena_1() {
        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;
        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue(StringUtils.equals(fooCs, fooCs));                                                            /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testEquals$catena_2() {
        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;
        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                            /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testEquals$catena_3() {
        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;
        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));          /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testEquals$catena_4() {
        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;
        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                       /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testEquals$catena_5() {
        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;
        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                       /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testEquals$catena_6() {
        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;
        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}
        assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));         /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testEquals$catena_7() {
        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;
        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}
        assertFalse(StringUtils.equals(fooCs, barCs));                                                           /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testEquals$catena_8() {
        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;
        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        assertFalse(StringUtils.equals(fooCs, null));                                                            /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testEquals$catena_9() {
        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;
        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        assertFalse(StringUtils.equals(null, fooCs));                                                            /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testEquals$catena_10() {
        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;
        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        assertFalse(StringUtils.equals(fooCs, foobarCs));                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testEquals$catena_11() {
        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;
        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        assertFalse(StringUtils.equals(foobarCs, fooCs));                                                        /***** ORIGINAL ASSERTION IS HERE *****/
    }
trace file: src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
new test num: 12
ori test num: 0
pattern: 00
patches are written to file
running tests...
used time: Finished in 31.42 seconds
Failing tests: 3
	org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testEquals$catena_2
	org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testEquals$catena_4
	org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testEquals$catena_5
processed: 00
pattern: 01
try to fix hunk: 1
insert before 789 with         }
        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01
pattern: 10
try to fix hunk: 0
insert before 788 with         if (cs1 instanceof String && cs2 instanceof String) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10
pattern: 11
try to fix hunk: 0
insert before 788 with         if (cs1 instanceof String && cs2 instanceof String) {

try to fix hunk: 1
insert before 789 with         }
        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));

patches are written to file
running tests...
used time: Finished in 27.06 seconds
Failing tests: 0
Can independently fix ['org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testEquals$catena_4', 'org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testEquals$catena_5', 'org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testEquals$catena_2']
select new bug
Pattern: 11
new failing tests:
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testEquals$catena_4
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testEquals$catena_5
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testEquals$catena_2
Save found bug
processed: 11
Find 1 new bugs
