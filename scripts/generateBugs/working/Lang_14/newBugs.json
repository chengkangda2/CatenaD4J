{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "replaced_with": "        if (cs1 instanceof String && cs2 instanceof String) {\n",
            "patch_type": "insert",
            "next_line_no": 788
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "replaced_with": "        }\n        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n",
            "patch_type": "insert",
            "next_line_no": 789
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testEquals"
        ],
        "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testEquals": {
            "file_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
            "Instance": "Begin: Pos(486, 12)\nEnd: Pos(500, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_14/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\nName: testEquals\nChilds: [StatementAssertion<Begin: Pos(488, 9), End: Pos(488, 51)>,\nStatementAssertion<Begin: Pos(489, 9), End: Pos(489, 53)>,\nStatementAssertion<Begin: Pos(490, 9), End: Pos(490, 85)>,\nStatementAssertion<Begin: Pos(491, 9), End: Pos(491, 103)>,\nStatementAssertion<Begin: Pos(492, 9), End: Pos(492, 90)>,\nStatementAssertion<Begin: Pos(493, 9), End: Pos(493, 90)>,\nStatementAssertion<Begin: Pos(494, 9), End: Pos(494, 104)>,\nStatementAssertion<Begin: Pos(495, 9), End: Pos(495, 54)>,\nStatementAssertion<Begin: Pos(496, 9), End: Pos(496, 53)>,\nStatementAssertion<Begin: Pos(497, 9), End: Pos(497, 53)>,\nStatementAssertion<Begin: Pos(498, 9), End: Pos(498, 57)>,\nStatementAssertion<Begin: Pos(499, 9), End: Pos(499, 57)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_14/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
            "name": "testEquals",
            "begin": "Pos(486, 12)",
            "end": "Pos(500, 5)",
            "begin_line_no": 486,
            "end_line_no": 500,
            "child": [
                "Begin: Pos(488, 9)\nEnd: Pos(488, 51)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(489, 9)\nEnd: Pos(489, 53)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(490, 9)\nEnd: Pos(490, 85)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(491, 9)\nEnd: Pos(491, 103)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(492, 9)\nEnd: Pos(492, 90)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(493, 9)\nEnd: Pos(493, 90)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(494, 9)\nEnd: Pos(494, 104)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(495, 9)\nEnd: Pos(495, 54)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(496, 9)\nEnd: Pos(496, 53)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(497, 9)\nEnd: Pos(497, 53)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(498, 9)\nEnd: Pos(498, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(499, 9)\nEnd: Pos(499, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testEquals$catena_0() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        assertTrue(StringUtils.equals(null, null));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testEquals$catena_1() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(StringUtils.equals(fooCs, fooCs));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testEquals$catena_2() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testEquals$catena_3() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testEquals$catena_4() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testEquals$catena_5() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testEquals$catena_6() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testEquals$catena_7() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(StringUtils.equals(fooCs, barCs));                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testEquals$catena_8() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(StringUtils.equals(fooCs, null));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testEquals$catena_9() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(StringUtils.equals(null, fooCs));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testEquals$catena_10() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(StringUtils.equals(fooCs, foobarCs));                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testEquals$catena_11() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(StringUtils.equals(foobarCs, fooCs));                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testEquals$catena_0() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        assertTrue(StringUtils.equals(null, null));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testEquals$catena_1() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(StringUtils.equals(fooCs, fooCs));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testEquals$catena_2() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void testEquals$catena_3() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    public void testEquals$catena_4() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    public void testEquals$catena_5() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "6": "    public void testEquals$catena_6() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "7": "    public void testEquals$catena_7() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(StringUtils.equals(fooCs, barCs));                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "8": "    public void testEquals$catena_8() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(StringUtils.equals(fooCs, null));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "9": "    public void testEquals$catena_9() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(StringUtils.equals(null, fooCs));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "10": "    public void testEquals$catena_10() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(StringUtils.equals(fooCs, foobarCs));                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "11": "    public void testEquals$catena_11() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(StringUtils.equals(foobarCs, fooCs));                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "11": {
        "failing_tests": [
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testEquals$catena_5",
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testEquals$catena_4",
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testEquals$catena_2"
        ]
    }
}