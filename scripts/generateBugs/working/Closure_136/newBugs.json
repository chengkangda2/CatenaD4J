{
    "original": {
        "num_of_hunks": 4,
        "0": {
            "file_name": "src/com/google/javascript/jscomp/MethodCompilerPass.java",
            "from_line_no": 102,
            "to_line_no": 102,
            "replaced": "    boolean signatureAdded = false;\n",
            "patch_type": "delete",
            "next_line_no": 103
        },
        "1": {
            "file_name": "src/com/google/javascript/jscomp/MethodCompilerPass.java",
            "from_line_no": 106,
            "to_line_no": 125,
            "replaced_with": "    } else {\n",
            "replaced": "      signatureAdded = true;\n    } else if (node.getType() == Token.NAME) {\n      String functionName = node.getString();\n      Scope.Var v = t.getScope().getVar(functionName);\n      if (v == null) {\n        if (compiler.isIdeMode()) {\n          return;\n        } else {\n          throw new IllegalStateException(\n              \"VarCheck should have caught this undefined function\");\n        }\n      }\n      Node function = v.getInitialValue();\n      if (function != null &&\n          function.getType() == Token.FUNCTION) {\n        addSignature(name, function, v.getInputName());\n        signatureAdded = true;\n      }\n    }\n    if (!signatureAdded) {\n",
            "patch_type": "replace",
            "next_line_no": 126
        },
        "2": {
            "file_name": "src/com/google/javascript/jscomp/RenameVars.java",
            "replaced_with": "        if (local) {\n",
            "patch_type": "insert",
            "next_line_no": 203
        },
        "3": {
            "file_name": "src/com/google/javascript/jscomp/RenameVars.java",
            "replaced_with": "          String newName =\n            MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName(\n                name);\n          if (!newName.equals(name)) {\n            n.setString(newName);\n          }\n        }\n",
            "patch_type": "insert",
            "next_line_no": 204
        }
    },
    "method": {
        "failing_tests": [
            "com.google.javascript.jscomp.InlineGettersTest::testIssue2508576_1",
            "com.google.javascript.jscomp.InlineGettersTest::testIssue2508576_3",
            "com.google.javascript.jscomp.MethodCheckTest::testSeparateMethods",
            "com.google.javascript.jscomp.RenameVarsTest::testDollarSignSuperExport2"
        ],
        "com.google.javascript.jscomp.InlineGettersTest::testIssue2508576_1": {
            "file_path": "test/com/google/javascript/jscomp/InlineGettersTest.java",
            "Instance": "Begin: Pos(235, 10)\nEnd: Pos(239, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_136/test//com/google/javascript/jscomp/InlineGettersTest.java\nName: testIssue2508576_1\nChilds: [StatementAssertion<Begin: Pos(238, 5), End: Pos(238, 60)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_136/test//com/google/javascript/jscomp/InlineGettersTest.java",
            "name": "testIssue2508576_1",
            "begin": "Pos(235, 10)",
            "end": "Pos(239, 3)",
            "begin_line_no": 235,
            "end_line_no": 239,
            "child": [
                "Begin: Pos(238, 5)\nEnd: Pos(238, 60)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "com.google.javascript.jscomp.InlineGettersTest::testIssue2508576_3": {
            "file_path": "test/com/google/javascript/jscomp/InlineGettersTest.java",
            "Instance": "Begin: Pos(246, 10)\nEnd: Pos(249, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_136/test//com/google/javascript/jscomp/InlineGettersTest.java\nName: testIssue2508576_3\nChilds: [StatementAssertion<Begin: Pos(248, 5), End: Pos(248, 52)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_136/test//com/google/javascript/jscomp/InlineGettersTest.java",
            "name": "testIssue2508576_3",
            "begin": "Pos(246, 10)",
            "end": "Pos(249, 3)",
            "begin_line_no": 246,
            "end_line_no": 249,
            "child": [
                "Begin: Pos(248, 5)\nEnd: Pos(248, 52)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "com.google.javascript.jscomp.MethodCheckTest::testSeparateMethods": {
            "file_path": "test/com/google/javascript/jscomp/MethodCheckTest.java",
            "Instance": "Begin: Pos(94, 10)\nEnd: Pos(104, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_136/test//com/google/javascript/jscomp/MethodCheckTest.java\nName: testSeparateMethods\nChilds: [StatementAssertion<Begin: Pos(95, 5), End: Pos(95, 53)>,\nStatementAssertion<Begin: Pos(96, 5), End: Pos(96, 56)>,\nStatementAssertion<Begin: Pos(97, 5), End: Pos(97, 38)>,\nStatementAssertion<Begin: Pos(98, 5), End: Pos(98, 41)>,\nStatementAssertion<Begin: Pos(101, 5), End: Pos(101, 59)>,\nStatementAssertion<Begin: Pos(102, 5), End: Pos(102, 41)>,\nStatementAssertion<Begin: Pos(103, 5), End: Pos(103, 38)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_136/test//com/google/javascript/jscomp/MethodCheckTest.java",
            "name": "testSeparateMethods",
            "begin": "Pos(94, 10)",
            "end": "Pos(104, 3)",
            "begin_line_no": 94,
            "end_line_no": 104,
            "child": [
                "Begin: Pos(95, 5)\nEnd: Pos(95, 53)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(96, 5)\nEnd: Pos(96, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(97, 5)\nEnd: Pos(97, 38)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(98, 5)\nEnd: Pos(98, 41)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(101, 5)\nEnd: Pos(101, 59)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(102, 5)\nEnd: Pos(102, 41)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(103, 5)\nEnd: Pos(103, 38)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testSeparateMethods$catena_0() {\n    testSame(\"var f = new Foo();f.oneOrTwoArg2(1);\");                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"var f = new Baz();f.oneOrTwoArg2(1, 2);\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod1(1);\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod2(1, 2);\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Can't detect these incorrect usuages as they are defined indirectly.\n    try{ testSame(\"var f = new Bar();f.oneOrTwoArg2(1, 2, 3);\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod1(1, 2);\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod2(1);\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testSeparateMethods$catena_1() {\n    try{ testSame(\"var f = new Foo();f.oneOrTwoArg2(1);\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"var f = new Baz();f.oneOrTwoArg2(1, 2);\");                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"Boz.staticMethod1(1);\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod2(1, 2);\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Can't detect these incorrect usuages as they are defined indirectly.\n    try{ testSame(\"var f = new Bar();f.oneOrTwoArg2(1, 2, 3);\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod1(1, 2);\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod2(1);\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testSeparateMethods$catena_2() {\n    try{ testSame(\"var f = new Foo();f.oneOrTwoArg2(1);\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = new Baz();f.oneOrTwoArg2(1, 2);\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"Boz.staticMethod1(1);\");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"Boz.staticMethod2(1, 2);\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Can't detect these incorrect usuages as they are defined indirectly.\n    try{ testSame(\"var f = new Bar();f.oneOrTwoArg2(1, 2, 3);\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod1(1, 2);\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod2(1);\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testSeparateMethods$catena_3() {\n    try{ testSame(\"var f = new Foo();f.oneOrTwoArg2(1);\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = new Baz();f.oneOrTwoArg2(1, 2);\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod1(1);\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"Boz.staticMethod2(1, 2);\");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // Can't detect these incorrect usuages as they are defined indirectly.\n    try{ testSame(\"var f = new Bar();f.oneOrTwoArg2(1, 2, 3);\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod1(1, 2);\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod2(1);\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testSeparateMethods$catena_4() {\n    try{ testSame(\"var f = new Foo();f.oneOrTwoArg2(1);\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = new Baz();f.oneOrTwoArg2(1, 2);\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod1(1);\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod2(1, 2);\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Can't detect these incorrect usuages as they are defined indirectly.\n    testSame(\"var f = new Bar();f.oneOrTwoArg2(1, 2, 3);\");                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"Boz.staticMethod1(1, 2);\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod2(1);\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testSeparateMethods$catena_5() {\n    try{ testSame(\"var f = new Foo();f.oneOrTwoArg2(1);\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = new Baz();f.oneOrTwoArg2(1, 2);\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod1(1);\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod2(1, 2);\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Can't detect these incorrect usuages as they are defined indirectly.\n    try{ testSame(\"var f = new Bar();f.oneOrTwoArg2(1, 2, 3);\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"Boz.staticMethod1(1, 2);\");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"Boz.staticMethod2(1);\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testSeparateMethods$catena_6() {\n    try{ testSame(\"var f = new Foo();f.oneOrTwoArg2(1);\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = new Baz();f.oneOrTwoArg2(1, 2);\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod1(1);\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod2(1, 2);\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Can't detect these incorrect usuages as they are defined indirectly.\n    try{ testSame(\"var f = new Bar();f.oneOrTwoArg2(1, 2, 3);\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod1(1, 2);\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"Boz.staticMethod2(1);\");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testSeparateMethods$catena_0() {\n    testSame(\"var f = new Foo();f.oneOrTwoArg2(1);\");                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"var f = new Baz();f.oneOrTwoArg2(1, 2);\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod1(1);\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod2(1, 2);\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Can't detect these incorrect usuages as they are defined indirectly.\n    try{ testSame(\"var f = new Bar();f.oneOrTwoArg2(1, 2, 3);\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod1(1, 2);\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod2(1);\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testSeparateMethods$catena_1() {\n    try{ testSame(\"var f = new Foo();f.oneOrTwoArg2(1);\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"var f = new Baz();f.oneOrTwoArg2(1, 2);\");                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"Boz.staticMethod1(1);\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod2(1, 2);\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Can't detect these incorrect usuages as they are defined indirectly.\n    try{ testSame(\"var f = new Bar();f.oneOrTwoArg2(1, 2, 3);\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod1(1, 2);\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod2(1);\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testSeparateMethods$catena_2() {\n    try{ testSame(\"var f = new Foo();f.oneOrTwoArg2(1);\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = new Baz();f.oneOrTwoArg2(1, 2);\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"Boz.staticMethod1(1);\");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"Boz.staticMethod2(1, 2);\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Can't detect these incorrect usuages as they are defined indirectly.\n    try{ testSame(\"var f = new Bar();f.oneOrTwoArg2(1, 2, 3);\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod1(1, 2);\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod2(1);\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "3": "  public void testSeparateMethods$catena_3() {\n    try{ testSame(\"var f = new Foo();f.oneOrTwoArg2(1);\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = new Baz();f.oneOrTwoArg2(1, 2);\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod1(1);\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"Boz.staticMethod2(1, 2);\");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // Can't detect these incorrect usuages as they are defined indirectly.\n    try{ testSame(\"var f = new Bar();f.oneOrTwoArg2(1, 2, 3);\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod1(1, 2);\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod2(1);\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "4": "  public void testSeparateMethods$catena_4() {\n    try{ testSame(\"var f = new Foo();f.oneOrTwoArg2(1);\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = new Baz();f.oneOrTwoArg2(1, 2);\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod1(1);\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod2(1, 2);\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Can't detect these incorrect usuages as they are defined indirectly.\n    testSame(\"var f = new Bar();f.oneOrTwoArg2(1, 2, 3);\");                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"Boz.staticMethod1(1, 2);\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod2(1);\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "5": "  public void testSeparateMethods$catena_5() {\n    try{ testSame(\"var f = new Foo();f.oneOrTwoArg2(1);\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = new Baz();f.oneOrTwoArg2(1, 2);\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod1(1);\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod2(1, 2);\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Can't detect these incorrect usuages as they are defined indirectly.\n    try{ testSame(\"var f = new Bar();f.oneOrTwoArg2(1, 2, 3);\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"Boz.staticMethod1(1, 2);\");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"Boz.staticMethod2(1);\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "6": "  public void testSeparateMethods$catena_6() {\n    try{ testSame(\"var f = new Foo();f.oneOrTwoArg2(1);\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = new Baz();f.oneOrTwoArg2(1, 2);\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod1(1);\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod2(1, 2);\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Can't detect these incorrect usuages as they are defined indirectly.\n    try{ testSame(\"var f = new Bar();f.oneOrTwoArg2(1, 2, 3);\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod1(1, 2);\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"Boz.staticMethod2(1);\");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        },
        "com.google.javascript.jscomp.RenameVarsTest::testDollarSignSuperExport2": {
            "file_path": "test/com/google/javascript/jscomp/RenameVarsTest.java",
            "Instance": "Begin: Pos(459, 10)\nEnd: Pos(480, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_136/test//com/google/javascript/jscomp/RenameVarsTest.java\nName: testDollarSignSuperExport2\nChilds: [StatementAssertion<Begin: Pos(465, 5), End: Pos(468, 49)>,\nStatementAssertion<Begin: Pos(471, 5), End: Pos(471, 40)>,\nStatementAssertion<Begin: Pos(474, 5), End: Pos(477, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_136/test//com/google/javascript/jscomp/RenameVarsTest.java",
            "name": "testDollarSignSuperExport2",
            "begin": "Pos(459, 10)",
            "end": "Pos(480, 3)",
            "begin_line_no": 459,
            "end_line_no": 480,
            "child": [
                "Begin: Pos(465, 5)\nEnd: Pos(468, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(471, 5)\nEnd: Pos(471, 40)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(474, 5)\nEnd: Pos(477, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testDollarSignSuperExport2$catena_0() {\n    boolean normalizedExpectedJs = false;\n    super.enableNormalize(false);\n\n    useGoogleCodingConvention = false;\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=32\n    test(\"var x = function($super,duper,$fantastic){};\" +\n            \"var y = function($super,duper){};\",\n         \"var c = function($super,    a,         b){};\" +\n            \"var d = function($super,    a){};\");                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n    localRenamingOnly = false;\n    try{ test(\"var $super = 1\", \"var a = 1\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    useGoogleCodingConvention = true;\n    try{ test(\"var x = function($super,duper,$fantastic){};\" +\n            \"var y = function($super,duper){};\",\n         \"var d = function(a,     b,    c         ){};\" +\n            \"var e = function(     a,    b){};\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    super.disableNormalize();\n  }",
                "  public void testDollarSignSuperExport2$catena_1() {\n    boolean normalizedExpectedJs = false;\n    super.enableNormalize(false);\n\n    useGoogleCodingConvention = false;\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=32\n    try{ test(\"var x = function($super,duper,$fantastic){};\" +\n            \"var y = function($super,duper){};\",\n         \"var c = function($super,    a,         b){};\" +\n            \"var d = function($super,    a){};\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    localRenamingOnly = false;\n    test(\"var $super = 1\", \"var a = 1\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n\n    useGoogleCodingConvention = true;\n    try{ test(\"var x = function($super,duper,$fantastic){};\" +\n            \"var y = function($super,duper){};\",\n         \"var d = function(a,     b,    c         ){};\" +\n            \"var e = function(     a,    b){};\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    super.disableNormalize();\n  }",
                "  public void testDollarSignSuperExport2$catena_2() {\n    boolean normalizedExpectedJs = false;\n    super.enableNormalize(false);\n\n    useGoogleCodingConvention = false;\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=32\n    try{ test(\"var x = function($super,duper,$fantastic){};\" +\n            \"var y = function($super,duper){};\",\n         \"var c = function($super,    a,         b){};\" +\n            \"var d = function($super,    a){};\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    localRenamingOnly = false;\n    try{ test(\"var $super = 1\", \"var a = 1\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    useGoogleCodingConvention = true;\n    test(\"var x = function($super,duper,$fantastic){};\" +\n            \"var y = function($super,duper){};\",\n         \"var d = function(a,     b,    c         ){};\" +\n            \"var e = function(     a,    b){};\");                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n    super.disableNormalize();\n  }"
            ],
            "func": {
                "0": "  public void testDollarSignSuperExport2$catena_0() {\n    boolean normalizedExpectedJs = false;\n    super.enableNormalize(false);\n\n    useGoogleCodingConvention = false;\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=32\n    test(\"var x = function($super,duper,$fantastic){};\" +\n            \"var y = function($super,duper){};\",\n         \"var c = function($super,    a,         b){};\" +\n            \"var d = function($super,    a){};\");                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n    localRenamingOnly = false;\n    try{ test(\"var $super = 1\", \"var a = 1\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    useGoogleCodingConvention = true;\n    try{ test(\"var x = function($super,duper,$fantastic){};\" +\n            \"var y = function($super,duper){};\",\n         \"var d = function(a,     b,    c         ){};\" +\n            \"var e = function(     a,    b){};\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    super.disableNormalize();\n  }",
                "1": "  public void testDollarSignSuperExport2$catena_1() {\n    boolean normalizedExpectedJs = false;\n    super.enableNormalize(false);\n\n    useGoogleCodingConvention = false;\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=32\n    try{ test(\"var x = function($super,duper,$fantastic){};\" +\n            \"var y = function($super,duper){};\",\n         \"var c = function($super,    a,         b){};\" +\n            \"var d = function($super,    a){};\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    localRenamingOnly = false;\n    test(\"var $super = 1\", \"var a = 1\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n\n    useGoogleCodingConvention = true;\n    try{ test(\"var x = function($super,duper,$fantastic){};\" +\n            \"var y = function($super,duper){};\",\n         \"var d = function(a,     b,    c         ){};\" +\n            \"var e = function(     a,    b){};\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    super.disableNormalize();\n  }",
                "2": "  public void testDollarSignSuperExport2$catena_2() {\n    boolean normalizedExpectedJs = false;\n    super.enableNormalize(false);\n\n    useGoogleCodingConvention = false;\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=32\n    try{ test(\"var x = function($super,duper,$fantastic){};\" +\n            \"var y = function($super,duper){};\",\n         \"var c = function($super,    a,         b){};\" +\n            \"var d = function($super,    a){};\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    localRenamingOnly = false;\n    try{ test(\"var $super = 1\", \"var a = 1\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    useGoogleCodingConvention = true;\n    test(\"var x = function($super,duper,$fantastic){};\" +\n            \"var y = function($super,duper){};\",\n         \"var d = function(a,     b,    c         ){};\" +\n            \"var e = function(     a,    b){};\");                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n    super.disableNormalize();\n  }"
            }
        }
    },
    "0100": {
        "failing_tests": [
            "com.google.javascript.jscomp.MethodCheckTest::testSeparateMethods$catena_4",
            "com.google.javascript.jscomp.InlineGettersTest::testIssue2508576_3",
            "com.google.javascript.jscomp.InlineGettersTest::testIssue2508576_1",
            "com.google.javascript.jscomp.MethodCheckTest::testSeparateMethods$catena_6",
            "com.google.javascript.jscomp.MethodCheckTest::testSeparateMethods$catena_5"
        ]
    },
    "0011": {
        "failing_tests": [
            "com.google.javascript.jscomp.RenameVarsTest::testDollarSignSuperExport2$catena_0"
        ]
    }
}