{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/main/java/org/joda/time/base/BasePeriod.java",
            "from_line_no": 222,
            "to_line_no": 222,
            "replaced_with": "        super();\n",
            "replaced": "        this(duration, null, null);\n",
            "patch_type": "replace",
            "next_line_no": 223
        },
        "1": {
            "file_name": "src/main/java/org/joda/time/base/BasePeriod.java",
            "replaced_with": "        iType = PeriodType.time();\n        int[] values = ISOChronology.getInstanceUTC().get(this, duration);\n        iType = PeriodType.standard();\n        iValues = new int[8];\n        System.arraycopy(values, 0, iValues, 4, 4);\n",
            "patch_type": "insert",
            "next_line_no": 224
        }
    },
    "method": {
        "failing_tests": [
            "org.joda.time.TestDuration_Basics::testToPeriod_fixedZone",
            "org.joda.time.TestPeriod_Constructors::testConstructor_long_fixedZone"
        ],
        "org.joda.time.TestDuration_Basics::testToPeriod_fixedZone": {
            "file_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
            "Instance": "Begin: Pos(470, 12)\nEnd: Pos(492, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Time_22/src/test/java//org/joda/time/TestDuration_Basics.java\nName: testToPeriod_fixedZone\nChilds: [StatementAssertion<Begin: Pos(481, 13), End: Pos(481, 45)>,\nStatementAssertion<Begin: Pos(482, 13), End: Pos(482, 46)>,\nStatementAssertion<Begin: Pos(483, 13), End: Pos(483, 45)>,\nStatementAssertion<Begin: Pos(484, 13), End: Pos(484, 44)>,\nStatementAssertion<Begin: Pos(485, 13), End: Pos(485, 58)>,\nStatementAssertion<Begin: Pos(486, 13), End: Pos(486, 47)>,\nStatementAssertion<Begin: Pos(487, 13), End: Pos(487, 47)>,\nStatementAssertion<Begin: Pos(488, 13), End: Pos(488, 46)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Time_22/src/test/java//org/joda/time/TestDuration_Basics.java",
            "name": "testToPeriod_fixedZone",
            "begin": "Pos(470, 12)",
            "end": "Pos(492, 5)",
            "begin_line_no": 470,
            "end_line_no": 492,
            "child": [
                "Begin: Pos(481, 13)\nEnd: Pos(481, 45)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(482, 13)\nEnd: Pos(482, 46)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(483, 13)\nEnd: Pos(483, 45)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(484, 13)\nEnd: Pos(484, 44)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(485, 13)\nEnd: Pos(485, 58)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(486, 13)\nEnd: Pos(486, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(487, 13)\nEnd: Pos(487, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(488, 13)\nEnd: Pos(488, 46)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testToPeriod_fixedZone$catena_0() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Duration dur = new Duration(length);\n            Period test = dur.toPeriod();\n            assertEquals(0, test.getYears());                     /***** ORIGINAL ASSERTION IS HERE *****/  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
                "    public void testToPeriod_fixedZone$catena_1() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Duration dur = new Duration(length);\n            Period test = dur.toPeriod();\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            assertEquals(0, test.getMonths());                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
                "    public void testToPeriod_fixedZone$catena_2() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Duration dur = new Duration(length);\n            Period test = dur.toPeriod();\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(0, test.getWeeks());                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
                "    public void testToPeriod_fixedZone$catena_3() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Duration dur = new Duration(length);\n            Period test = dur.toPeriod();\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(0, test.getDays());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
                "    public void testToPeriod_fixedZone$catena_4() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Duration dur = new Duration(length);\n            Period test = dur.toPeriod();\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals((450 * 24) + 5, test.getHours());                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
                "    public void testToPeriod_fixedZone$catena_5() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Duration dur = new Duration(length);\n            Period test = dur.toPeriod();\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(6, test.getMinutes());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
                "    public void testToPeriod_fixedZone$catena_6() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Duration dur = new Duration(length);\n            Period test = dur.toPeriod();\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(7, test.getSeconds());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
                "    public void testToPeriod_fixedZone$catena_7() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Duration dur = new Duration(length);\n            Period test = dur.toPeriod();\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(8, test.getMillis());                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }"
            ],
            "func": {
                "0": "    public void testToPeriod_fixedZone$catena_0() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Duration dur = new Duration(length);\n            Period test = dur.toPeriod();\n            assertEquals(0, test.getYears());                     /***** ORIGINAL ASSERTION IS HERE *****/  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
                "1": "    public void testToPeriod_fixedZone$catena_1() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Duration dur = new Duration(length);\n            Period test = dur.toPeriod();\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            assertEquals(0, test.getMonths());                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
                "2": "    public void testToPeriod_fixedZone$catena_2() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Duration dur = new Duration(length);\n            Period test = dur.toPeriod();\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(0, test.getWeeks());                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
                "3": "    public void testToPeriod_fixedZone$catena_3() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Duration dur = new Duration(length);\n            Period test = dur.toPeriod();\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(0, test.getDays());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
                "4": "    public void testToPeriod_fixedZone$catena_4() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Duration dur = new Duration(length);\n            Period test = dur.toPeriod();\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals((450 * 24) + 5, test.getHours());                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
                "5": "    public void testToPeriod_fixedZone$catena_5() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Duration dur = new Duration(length);\n            Period test = dur.toPeriod();\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(6, test.getMinutes());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
                "6": "    public void testToPeriod_fixedZone$catena_6() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Duration dur = new Duration(length);\n            Period test = dur.toPeriod();\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(7, test.getSeconds());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
                "7": "    public void testToPeriod_fixedZone$catena_7() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Duration dur = new Duration(length);\n            Period test = dur.toPeriod();\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(8, test.getMillis());                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }"
            }
        },
        "org.joda.time.TestPeriod_Constructors::testConstructor_long_fixedZone": {
            "file_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
            "Instance": "Begin: Pos(174, 12)\nEnd: Pos(197, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Time_22/src/test/java//org/joda/time/TestPeriod_Constructors.java\nName: testConstructor_long_fixedZone\nChilds: [StatementAssertion<Begin: Pos(184, 13), End: Pos(184, 70)>,\nStatementAssertion<Begin: Pos(186, 13), End: Pos(186, 45)>,\nStatementAssertion<Begin: Pos(187, 13), End: Pos(187, 46)>,\nStatementAssertion<Begin: Pos(188, 13), End: Pos(188, 45)>,\nStatementAssertion<Begin: Pos(189, 13), End: Pos(189, 44)>,\nStatementAssertion<Begin: Pos(190, 13), End: Pos(190, 58)>,\nStatementAssertion<Begin: Pos(191, 13), End: Pos(191, 47)>,\nStatementAssertion<Begin: Pos(192, 13), End: Pos(192, 47)>,\nStatementAssertion<Begin: Pos(193, 13), End: Pos(193, 46)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Time_22/src/test/java//org/joda/time/TestPeriod_Constructors.java",
            "name": "testConstructor_long_fixedZone",
            "begin": "Pos(174, 12)",
            "end": "Pos(197, 5)",
            "begin_line_no": 174,
            "end_line_no": 197,
            "child": [
                "Begin: Pos(184, 13)\nEnd: Pos(184, 70)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(186, 13)\nEnd: Pos(186, 45)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(187, 13)\nEnd: Pos(187, 46)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(188, 13)\nEnd: Pos(188, 45)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(189, 13)\nEnd: Pos(189, 44)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(190, 13)\nEnd: Pos(190, 58)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(191, 13)\nEnd: Pos(191, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(192, 13)\nEnd: Pos(192, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(193, 13)\nEnd: Pos(193, 46)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testConstructor_long_fixedZone$catena_0() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Period test = new Period(length);\n            assertEquals(PeriodType.standard(), test.getPeriodType());                                      /***** ORIGINAL ASSERTION IS HERE *****/\n            // only time fields are precise in AllType\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
                "    public void testConstructor_long_fixedZone$catena_1() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Period test = new Period(length);\n            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            // only time fields are precise in AllType\n            assertEquals(0, test.getYears());                     /***** ORIGINAL ASSERTION IS HERE *****/  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
                "    public void testConstructor_long_fixedZone$catena_2() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Period test = new Period(length);\n            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            // only time fields are precise in AllType\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            assertEquals(0, test.getMonths());                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
                "    public void testConstructor_long_fixedZone$catena_3() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Period test = new Period(length);\n            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            // only time fields are precise in AllType\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(0, test.getWeeks());                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
                "    public void testConstructor_long_fixedZone$catena_4() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Period test = new Period(length);\n            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            // only time fields are precise in AllType\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(0, test.getDays());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
                "    public void testConstructor_long_fixedZone$catena_5() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Period test = new Period(length);\n            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            // only time fields are precise in AllType\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals((450 * 24) + 5, test.getHours());                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
                "    public void testConstructor_long_fixedZone$catena_6() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Period test = new Period(length);\n            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            // only time fields are precise in AllType\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(6, test.getMinutes());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
                "    public void testConstructor_long_fixedZone$catena_7() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Period test = new Period(length);\n            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            // only time fields are precise in AllType\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(7, test.getSeconds());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
                "    public void testConstructor_long_fixedZone$catena_8() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Period test = new Period(length);\n            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            // only time fields are precise in AllType\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(8, test.getMillis());                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }"
            ],
            "func": {
                "0": "    public void testConstructor_long_fixedZone$catena_0() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Period test = new Period(length);\n            assertEquals(PeriodType.standard(), test.getPeriodType());                                      /***** ORIGINAL ASSERTION IS HERE *****/\n            // only time fields are precise in AllType\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
                "1": "    public void testConstructor_long_fixedZone$catena_1() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Period test = new Period(length);\n            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            // only time fields are precise in AllType\n            assertEquals(0, test.getYears());                     /***** ORIGINAL ASSERTION IS HERE *****/  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
                "2": "    public void testConstructor_long_fixedZone$catena_2() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Period test = new Period(length);\n            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            // only time fields are precise in AllType\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            assertEquals(0, test.getMonths());                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
                "3": "    public void testConstructor_long_fixedZone$catena_3() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Period test = new Period(length);\n            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            // only time fields are precise in AllType\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(0, test.getWeeks());                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
                "4": "    public void testConstructor_long_fixedZone$catena_4() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Period test = new Period(length);\n            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            // only time fields are precise in AllType\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(0, test.getDays());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
                "5": "    public void testConstructor_long_fixedZone$catena_5() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Period test = new Period(length);\n            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            // only time fields are precise in AllType\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals((450 * 24) + 5, test.getHours());                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
                "6": "    public void testConstructor_long_fixedZone$catena_6() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Period test = new Period(length);\n            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            // only time fields are precise in AllType\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(6, test.getMinutes());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
                "7": "    public void testConstructor_long_fixedZone$catena_7() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Period test = new Period(length);\n            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            // only time fields are precise in AllType\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(7, test.getSeconds());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
                "8": "    public void testConstructor_long_fixedZone$catena_8() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Period test = new Period(length);\n            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            // only time fields are precise in AllType\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(8, test.getMillis());                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }"
            }
        }
    }
}