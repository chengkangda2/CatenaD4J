{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/java/org/apache/commons/math/util/MathUtils.java",
            "replaced_with": "            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {\n                throw MathRuntimeException.createArithmeticException(\n                        \"overflow: gcd({0}, {1}) is 2^31\",\n                        new Object[] { p, q });\n            }\n",
            "patch_type": "insert",
            "next_line_no": 543
        },
        "1": {
            "file_name": "src/java/org/apache/commons/math/util/MathUtils.java",
            "replaced_with": "        if (lcm == Integer.MIN_VALUE){\n            throw new ArithmeticException(\"overflow: lcm is 2^31\");\n        }\n",
            "patch_type": "insert",
            "next_line_no": 714
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math.util.MathUtilsTest::testGcd",
            "org.apache.commons.math.util.MathUtilsTest::testLcm"
        ],
        "org.apache.commons.math.util.MathUtilsTest::testGcd": {
            "file_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
            "Instance": "Begin: Pos(407, 12)\nEnd: Pos(455, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_99/src/test//org/apache/commons/math/util/MathUtilsTest.java\nName: testGcd\nChilds: [StatementAssertion<Begin: Pos(412, 9), End: Pos(412, 45)>,\nStatementAssertion<Begin: Pos(414, 9), End: Pos(414, 45)>,\nStatementAssertion<Begin: Pos(415, 9), End: Pos(415, 45)>,\nStatementAssertion<Begin: Pos(416, 9), End: Pos(416, 46)>,\nStatementAssertion<Begin: Pos(417, 9), End: Pos(417, 46)>,\nStatementAssertion<Begin: Pos(419, 9), End: Pos(419, 46)>,\nStatementAssertion<Begin: Pos(420, 9), End: Pos(420, 47)>,\nStatementAssertion<Begin: Pos(421, 9), End: Pos(421, 47)>,\nStatementAssertion<Begin: Pos(422, 9), End: Pos(422, 48)>,\nStatementAssertion<Begin: Pos(424, 9), End: Pos(424, 45)>,\nStatementAssertion<Begin: Pos(425, 9), End: Pos(425, 46)>,\nStatementAssertion<Begin: Pos(426, 9), End: Pos(426, 46)>,\nStatementAssertion<Begin: Pos(427, 9), End: Pos(427, 47)>,\nStatementAssertion<Begin: Pos(429, 9), End: Pos(429, 75)>,\nStatementAssertion<Begin: Pos(431, 9), End: Pos(431, 77)>,\nStatementAssertion<Begin: Pos(432, 9), End: Pos(432, 78)>,\nStatementAssertion<Begin: Pos(433, 9), End: Pos(433, 70)>,\nStatementAssertion<Begin: Pos(437, 13), End: Pos(437, 50)>,\nStatementAssertion<Begin: Pos(444, 13), End: Pos(444, 50)>,\nStatementAssertion<Begin: Pos(451, 13), End: Pos(451, 50)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_99/src/test//org/apache/commons/math/util/MathUtilsTest.java",
            "name": "testGcd",
            "begin": "Pos(407, 12)",
            "end": "Pos(455, 5)",
            "begin_line_no": 407,
            "end_line_no": 455,
            "child": [
                "Begin: Pos(412, 9)\nEnd: Pos(412, 45)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(414, 9)\nEnd: Pos(414, 45)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(415, 9)\nEnd: Pos(415, 45)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(416, 9)\nEnd: Pos(416, 46)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(417, 9)\nEnd: Pos(417, 46)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(419, 9)\nEnd: Pos(419, 46)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(420, 9)\nEnd: Pos(420, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(421, 9)\nEnd: Pos(421, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(422, 9)\nEnd: Pos(422, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(424, 9)\nEnd: Pos(424, 45)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(425, 9)\nEnd: Pos(425, 46)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(426, 9)\nEnd: Pos(426, 46)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(427, 9)\nEnd: Pos(427, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(429, 9)\nEnd: Pos(429, 75)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(431, 9)\nEnd: Pos(431, 77)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(432, 9)\nEnd: Pos(432, 78)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(433, 9)\nEnd: Pos(433, 70)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(437, 13)\nEnd: Pos(437, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(444, 13)\nEnd: Pos(444, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(451, 13)\nEnd: Pos(451, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testGcd$catena_0() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        assertEquals(0, MathUtils.gcd(0, 0));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "    public void testGcd$catena_1() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(b, MathUtils.gcd(0, b));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "    public void testGcd$catena_2() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(a, MathUtils.gcd(a, 0));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "    public void testGcd$catena_3() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(b, MathUtils.gcd(0, -b));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "    public void testGcd$catena_4() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(a, MathUtils.gcd(-a, 0));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "    public void testGcd$catena_5() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(10, MathUtils.gcd(a, b));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "    public void testGcd$catena_6() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(10, MathUtils.gcd(-a, b));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "    public void testGcd$catena_7() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(10, MathUtils.gcd(a, -b));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "    public void testGcd$catena_8() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(10, MathUtils.gcd(-a, -b));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "    public void testGcd$catena_9() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(1, MathUtils.gcd(a, c));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "    public void testGcd$catena_10() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, MathUtils.gcd(-a, c));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "    public void testGcd$catena_11() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, MathUtils.gcd(a, -c));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "    public void testGcd$catena_12() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, MathUtils.gcd(-a, -c));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "    public void testGcd$catena_13() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "    public void testGcd$catena_14() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "    public void testGcd$catena_15() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "    public void testGcd$catena_16() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "    public void testGcd$catena_17() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            fail(\"expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "    public void testGcd$catena_18() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "    public void testGcd$catena_19() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }"
            ],
            "func": {
                "0": "    public void testGcd$catena_0() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        assertEquals(0, MathUtils.gcd(0, 0));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "1": "    public void testGcd$catena_1() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(b, MathUtils.gcd(0, b));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "2": "    public void testGcd$catena_2() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(a, MathUtils.gcd(a, 0));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "3": "    public void testGcd$catena_3() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(b, MathUtils.gcd(0, -b));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "4": "    public void testGcd$catena_4() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(a, MathUtils.gcd(-a, 0));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "5": "    public void testGcd$catena_5() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(10, MathUtils.gcd(a, b));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "6": "    public void testGcd$catena_6() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(10, MathUtils.gcd(-a, b));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "7": "    public void testGcd$catena_7() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(10, MathUtils.gcd(a, -b));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "8": "    public void testGcd$catena_8() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(10, MathUtils.gcd(-a, -b));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "9": "    public void testGcd$catena_9() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(1, MathUtils.gcd(a, c));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "10": "    public void testGcd$catena_10() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, MathUtils.gcd(-a, c));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "11": "    public void testGcd$catena_11() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, MathUtils.gcd(a, -c));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "12": "    public void testGcd$catena_12() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, MathUtils.gcd(-a, -c));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "13": "    public void testGcd$catena_13() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "14": "    public void testGcd$catena_14() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "15": "    public void testGcd$catena_15() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "16": "    public void testGcd$catena_16() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "17": "    public void testGcd$catena_17() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            fail(\"expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "18": "    public void testGcd$catena_18() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "19": "    public void testGcd$catena_19() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }"
            }
        },
        "org.apache.commons.math.util.MathUtilsTest::testLcm": {
            "file_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
            "Instance": "Begin: Pos(565, 12)\nEnd: Pos(609, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_99/src/test//org/apache/commons/math/util/MathUtilsTest.java\nName: testLcm\nChilds: [StatementAssertion<Begin: Pos(570, 9), End: Pos(570, 45)>,\nStatementAssertion<Begin: Pos(571, 9), End: Pos(571, 45)>,\nStatementAssertion<Begin: Pos(572, 9), End: Pos(572, 45)>,\nStatementAssertion<Begin: Pos(573, 9), End: Pos(573, 45)>,\nStatementAssertion<Begin: Pos(574, 9), End: Pos(574, 47)>,\nStatementAssertion<Begin: Pos(575, 9), End: Pos(575, 48)>,\nStatementAssertion<Begin: Pos(576, 9), End: Pos(576, 48)>,\nStatementAssertion<Begin: Pos(577, 9), End: Pos(577, 49)>,\nStatementAssertion<Begin: Pos(578, 9), End: Pos(578, 48)>,\nStatementAssertion<Begin: Pos(582, 9), End: Pos(582, 70)>,\nStatementAssertion<Begin: Pos(585, 9), End: Pos(585, 45)>,\nStatementAssertion<Begin: Pos(590, 13), End: Pos(590, 50)>,\nStatementAssertion<Begin: Pos(598, 13), End: Pos(598, 50)>,\nStatementAssertion<Begin: Pos(605, 13), End: Pos(605, 50)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_99/src/test//org/apache/commons/math/util/MathUtilsTest.java",
            "name": "testLcm",
            "begin": "Pos(565, 12)",
            "end": "Pos(609, 5)",
            "begin_line_no": 565,
            "end_line_no": 609,
            "child": [
                "Begin: Pos(570, 9)\nEnd: Pos(570, 45)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(571, 9)\nEnd: Pos(571, 45)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(572, 9)\nEnd: Pos(572, 45)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(573, 9)\nEnd: Pos(573, 45)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(574, 9)\nEnd: Pos(574, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(575, 9)\nEnd: Pos(575, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(576, 9)\nEnd: Pos(576, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(577, 9)\nEnd: Pos(577, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(578, 9)\nEnd: Pos(578, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(582, 9)\nEnd: Pos(582, 70)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(585, 9)\nEnd: Pos(585, 45)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(590, 13)\nEnd: Pos(590, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(598, 13)\nEnd: Pos(598, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(605, 13)\nEnd: Pos(605, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testLcm$catena_0() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        assertEquals(0, MathUtils.lcm(0, b));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
                "    public void testLcm$catena_1() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, MathUtils.lcm(a, 0));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
                "    public void testLcm$catena_2() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(b, MathUtils.lcm(1, b));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
                "    public void testLcm$catena_3() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(a, MathUtils.lcm(a, 1));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
                "    public void testLcm$catena_4() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(150, MathUtils.lcm(a, b));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
                "    public void testLcm$catena_5() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(150, MathUtils.lcm(-a, b));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
                "    public void testLcm$catena_6() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(150, MathUtils.lcm(a, -b));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
                "    public void testLcm$catena_7() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(150, MathUtils.lcm(-a, -b));                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
                "    public void testLcm$catena_8() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(2310, MathUtils.lcm(a, c));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
                "    public void testLcm$catena_9() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
                "    public void testLcm$catena_10() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        assertEquals(0, MathUtils.lcm(0, 0));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
                "    public void testLcm$catena_11() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            fail(\"Expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
                "    public void testLcm$catena_12() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            fail(\"Expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
                "    public void testLcm$catena_13() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            fail(\"Expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }"
            ],
            "func": {
                "0": "    public void testLcm$catena_0() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        assertEquals(0, MathUtils.lcm(0, b));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
                "1": "    public void testLcm$catena_1() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, MathUtils.lcm(a, 0));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
                "2": "    public void testLcm$catena_2() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(b, MathUtils.lcm(1, b));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
                "3": "    public void testLcm$catena_3() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(a, MathUtils.lcm(a, 1));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
                "4": "    public void testLcm$catena_4() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(150, MathUtils.lcm(a, b));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
                "5": "    public void testLcm$catena_5() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(150, MathUtils.lcm(-a, b));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
                "6": "    public void testLcm$catena_6() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(150, MathUtils.lcm(a, -b));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
                "7": "    public void testLcm$catena_7() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(150, MathUtils.lcm(-a, -b));                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
                "8": "    public void testLcm$catena_8() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(2310, MathUtils.lcm(a, c));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
                "9": "    public void testLcm$catena_9() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
                "10": "    public void testLcm$catena_10() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        assertEquals(0, MathUtils.lcm(0, 0));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
                "11": "    public void testLcm$catena_11() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            fail(\"Expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
                "12": "    public void testLcm$catena_12() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            fail(\"Expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
                "13": "    public void testLcm$catena_13() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            fail(\"Expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }"
            }
        }
    }
}