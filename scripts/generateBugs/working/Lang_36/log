---
Begin generate bug_id: Lang_36
num_of_hunks: 2
use working dir: ./working/data/Lang_36
Try to checkout Lang_36
build dir: ['./working/data/Lang_36/target/classes', './working/data/Lang_36/target/test-classes']
init FileManager
trace file: src/java/org/apache/commons/lang3/math/NumberUtils.java
trace file: src/java/org/apache/commons/lang3/math/NumberUtils.java
trying to replace old failing tests
edit: replace from 176 range 39 at src/test/org/apache/commons/lang3/math/NumberUtilsTest.java
to
    public void testCreateNumber$catena_0() {
        // a lot of things can go wrong
        assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));               /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_1() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));               /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_2() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_3() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_4() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_5() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_6() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_7() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_8() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_9() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_10() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_11() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());                 /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_12() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_13() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));           /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_14() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_15() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));         /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_16() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));         /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_17() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                      /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_18() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      /***** ORIGINAL ASSERTION IS HERE *****/

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_19() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              /***** ORIGINAL ASSERTION IS HERE *****/
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_20() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_21() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_22() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        /***** ORIGINAL ASSERTION IS HERE *****/

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_23() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));                /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 1002 range 138 at src/test/org/apache/commons/lang3/math/NumberUtilsTest.java
to
    public void testIsNumber$catena_0() {
        String val = "12345";
        assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                                  /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_1() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));                /***** ORIGINAL ASSERTION IS HERE *****/
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_2() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                                  /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_3() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));                /***** ORIGINAL ASSERTION IS HERE *****/
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_4() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                                  /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_5() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));                /***** ORIGINAL ASSERTION IS HERE *****/
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_6() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                                  /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_7() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));                /***** ORIGINAL ASSERTION IS HERE *****/
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_8() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                                  /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_9() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));                /***** ORIGINAL ASSERTION IS HERE *****/
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_10() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                                  /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_11() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));                /***** ORIGINAL ASSERTION IS HERE *****/
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_12() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                                  /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_13() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));                /***** ORIGINAL ASSERTION IS HERE *****/
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_14() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                                  /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_15() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));                /***** ORIGINAL ASSERTION IS HERE *****/
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_16() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                                  /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_17() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));                /***** ORIGINAL ASSERTION IS HERE *****/
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_18() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                                 /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_19() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));               /***** ORIGINAL ASSERTION IS HERE *****/
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_20() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                                 /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_21() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));               /***** ORIGINAL ASSERTION IS HERE *****/
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_22() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                                 /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_23() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));               /***** ORIGINAL ASSERTION IS HERE *****/
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_24() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                                 /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_25() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));               /***** ORIGINAL ASSERTION IS HERE *****/
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_26() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                                 /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_27() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));               /***** ORIGINAL ASSERTION IS HERE *****/
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_28() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                                 /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_29() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));               /***** ORIGINAL ASSERTION IS HERE *****/
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_30() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                                 /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_31() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));               /***** ORIGINAL ASSERTION IS HERE *****/
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_32() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                                 /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_33() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));               /***** ORIGINAL ASSERTION IS HERE *****/
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_34() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                                 /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_35() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));               /***** ORIGINAL ASSERTION IS HERE *****/
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_36() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                                 /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_37() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));               /***** ORIGINAL ASSERTION IS HERE *****/
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_38() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                                 /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_39() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));               /***** ORIGINAL ASSERTION IS HERE *****/
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_40() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_41() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));           /***** ORIGINAL ASSERTION IS HERE *****/
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_42() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_43() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));           /***** ORIGINAL ASSERTION IS HERE *****/
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_44() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_45() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));           /***** ORIGINAL ASSERTION IS HERE *****/
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_46() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_47() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));           /***** ORIGINAL ASSERTION IS HERE *****/
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_48() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_49() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));           /***** ORIGINAL ASSERTION IS HERE *****/
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_50() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_51() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));           /***** ORIGINAL ASSERTION IS HERE *****/
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_52() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_53() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));           /***** ORIGINAL ASSERTION IS HERE *****/
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_54() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_55() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));           /***** ORIGINAL ASSERTION IS HERE *****/
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_56() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_57() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));           /***** ORIGINAL ASSERTION IS HERE *****/
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_58() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                            /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_59() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));          /***** ORIGINAL ASSERTION IS HERE *****/
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_60() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                            /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_61() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));          /***** ORIGINAL ASSERTION IS HERE *****/
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_62() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                            /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_63() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));          /***** ORIGINAL ASSERTION IS HERE *****/
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_64() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                            /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_65() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));          /***** ORIGINAL ASSERTION IS HERE *****/
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_66() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                            /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_67() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));          /***** ORIGINAL ASSERTION IS HERE *****/
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_68() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                            /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_69() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));         /***** ORIGINAL ASSERTION IS HERE *****/ 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_70() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                            /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_71() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));         /***** ORIGINAL ASSERTION IS HERE *****/ 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_72() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                            /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_73() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));         /***** ORIGINAL ASSERTION IS HERE *****/ 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_74() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                            /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_75() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));         /***** ORIGINAL ASSERTION IS HERE *****/ 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_76() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                            /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_77() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));         /***** ORIGINAL ASSERTION IS HERE *****/ 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_78() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                            /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_79() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));         /***** ORIGINAL ASSERTION IS HERE *****/ 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_80() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                            /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_81() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));         /***** ORIGINAL ASSERTION IS HERE *****/ 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_82() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                            /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_83() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));          /***** ORIGINAL ASSERTION IS HERE *****/
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_84() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                            /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_85() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));          /***** ORIGINAL ASSERTION IS HERE *****/
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_86() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                            /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_87() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));          /***** ORIGINAL ASSERTION IS HERE *****/

        // LANG-521
        val = "2.";
        try{ assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testIsNumber$catena_88() {
        String val = "12345";
        try{ assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234.5";
        try{ assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12345";
        try{ assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5";
        try{ assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E+5";
        try{ assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E-5";
        try{ assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E5";
        try{ assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234";
        try{ assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234.5";
        try{ assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-.12345";
        try{ assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-1234E5";
        try{ assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0";
        try{ assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0";
        try{ assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "01234";
        try{ assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-01234";
        try{ assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xABC123";
        try{ assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0x0";
        try{ assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E21D";
        try{ assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-221.23F";
        try{ assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "22338L";
        try{ assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}
        val = null;
        try{ assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "";
        try{ assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "--2.3";
        try{ assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".12.3";
        try{ assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E";
        try{ assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E+-212";
        try{ assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-123E2.12";
        try{ assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xGF";
        try{ assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "0xFAE-1";
        try{ assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}
        val = ".";
        try{ assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "-0ABC123";
        try{ assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4E-D";
        try{ assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "123.4ED";
        try{ assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1234E5l";
        try{ assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "11a";
        try{ assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "1a";
        try{ assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "a";
        try{ assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11g";
        try{ assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11z";
        try{ assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11def";
        try{ assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11d11";
        try{ assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} 
        val = "11 11";
        try{ assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = " 1111";
        try{ assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}
        val = "1111 ";
        try{ assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        val = "2.";
        assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));                           /***** ORIGINAL ASSERTION IS HERE *****/
    }
trace file: src/test/org/apache/commons/lang3/math/NumberUtilsTest.java
new test num: 113
ori test num: 0
pattern: 00
patches are written to file
running tests...
used time: Finished in 36.98 seconds
Failing tests: 2
	org.apache.commons.lang3.math.NumberUtilsTest::testIsNumber$catena_88
	org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber$catena_23
pattern: 01
try to fix hunk: 1
insert before 1388 with             if (chars[i] == '.') {
                if (hasDecPoint || hasExp) {
                    // two decimal points or dec in exponent
                    return false;
                }
                // single trailing decimal point after non-exponent is ok
                return foundDigit;
            }

patches are written to file
running tests...
used time: Finished in 17.58 seconds
Failing tests: 1
	org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber$catena_23
No new failing tests but only 1 hunk
pattern: 10
try to fix hunk: 0
replace from 491 with range 1 to
        if (!Character.isDigit(lastChar) && lastChar != '.') {

patches are written to file
running tests...
used time: Finished in 17.22 seconds
Failing tests: 1
	org.apache.commons.lang3.math.NumberUtilsTest::testIsNumber$catena_88
No new failing tests but only 1 hunk
pattern: 11
try to fix hunk: 0
replace from 491 with range 1 to
        if (!Character.isDigit(lastChar) && lastChar != '.') {

try to fix hunk: 1
insert before 1388 with             if (chars[i] == '.') {
                if (hasDecPoint || hasExp) {
                    // two decimal points or dec in exponent
                    return false;
                }
                // single trailing decimal point after non-exponent is ok
                return foundDigit;
            }

patches are written to file
running tests...
used time: Finished in 18.17 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
Find 0 new bugs
