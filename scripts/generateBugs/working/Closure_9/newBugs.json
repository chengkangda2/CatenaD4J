{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
            "replaced_with": "    filename = filename.replace(\"\\\\\", \"/\");\n",
            "patch_type": "insert",
            "next_line_no": 119
        },
        "1": {
            "file_name": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
            "from_line_no": 183,
            "to_line_no": 183,
            "replaced_with": "      String moduleName = guessCJSModuleName(script.getSourceFileName());\n",
            "replaced": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName()));\n",
            "patch_type": "replace",
            "next_line_no": 184
        }
    },
    "method": {
        "failing_tests": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest::testGuessModuleName"
        ],
        "com.google.javascript.jscomp.ProcessCommonJSModulesTest::testGuessModuleName": {
            "file_path": "test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java",
            "Instance": "Begin: Pos(128, 10)\nEnd: Pos(136, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_9/test//com/google/javascript/jscomp/ProcessCommonJSModulesTest.java\nName: testGuessModuleName\nChilds: [StatementAssertion<Begin: Pos(130, 5), End: Pos(131, 47)>,\nStatementAssertion<Begin: Pos(132, 5), End: Pos(133, 48)>,\nStatementAssertion<Begin: Pos(134, 5), End: Pos(135, 53)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_9/test//com/google/javascript/jscomp/ProcessCommonJSModulesTest.java",
            "name": "testGuessModuleName",
            "begin": "Pos(128, 10)",
            "end": "Pos(136, 3)",
            "begin_line_no": 128,
            "end_line_no": 136,
            "child": [
                "Begin: Pos(130, 5)\nEnd: Pos(131, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(132, 5)\nEnd: Pos(133, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(134, 5)\nEnd: Pos(135, 53)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testGuessModuleName$catena_0() {\n    ProcessCommonJSModules pass = new ProcessCommonJSModules(null, \"foo\");\n    assertEquals(\"module$baz\",\n        pass.guessCJSModuleName(\"foo/baz.js\"));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\"module$baz\",\n        pass.guessCJSModuleName(\"foo\\\\baz.js\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$bar$baz\",\n        pass.guessCJSModuleName(\"foo\\\\bar\\\\baz.js\"));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testGuessModuleName$catena_1() {\n    ProcessCommonJSModules pass = new ProcessCommonJSModules(null, \"foo\");\n    try{ assertEquals(\"module$baz\",\n        pass.guessCJSModuleName(\"foo/baz.js\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\"module$baz\",\n        pass.guessCJSModuleName(\"foo\\\\baz.js\"));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\"module$bar$baz\",\n        pass.guessCJSModuleName(\"foo\\\\bar\\\\baz.js\"));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testGuessModuleName$catena_2() {\n    ProcessCommonJSModules pass = new ProcessCommonJSModules(null, \"foo\");\n    try{ assertEquals(\"module$baz\",\n        pass.guessCJSModuleName(\"foo/baz.js\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\",\n        pass.guessCJSModuleName(\"foo\\\\baz.js\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\"module$bar$baz\",\n        pass.guessCJSModuleName(\"foo\\\\bar\\\\baz.js\"));                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testGuessModuleName$catena_0() {\n    ProcessCommonJSModules pass = new ProcessCommonJSModules(null, \"foo\");\n    assertEquals(\"module$baz\",\n        pass.guessCJSModuleName(\"foo/baz.js\"));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\"module$baz\",\n        pass.guessCJSModuleName(\"foo\\\\baz.js\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$bar$baz\",\n        pass.guessCJSModuleName(\"foo\\\\bar\\\\baz.js\"));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testGuessModuleName$catena_1() {\n    ProcessCommonJSModules pass = new ProcessCommonJSModules(null, \"foo\");\n    try{ assertEquals(\"module$baz\",\n        pass.guessCJSModuleName(\"foo/baz.js\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\"module$baz\",\n        pass.guessCJSModuleName(\"foo\\\\baz.js\"));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\"module$bar$baz\",\n        pass.guessCJSModuleName(\"foo\\\\bar\\\\baz.js\"));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testGuessModuleName$catena_2() {\n    ProcessCommonJSModules pass = new ProcessCommonJSModules(null, \"foo\");\n    try{ assertEquals(\"module$baz\",\n        pass.guessCJSModuleName(\"foo/baz.js\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\",\n        pass.guessCJSModuleName(\"foo\\\\baz.js\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\"module$bar$baz\",\n        pass.guessCJSModuleName(\"foo\\\\bar\\\\baz.js\"));                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        }
    }
}