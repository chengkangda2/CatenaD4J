{
    "original": {
        "num_of_hunks": 17,
        "0": {
            "file_name": "src/com/google/javascript/jscomp/CodeGenerator.java",
            "from_line_no": 343,
            "to_line_no": 343,
            "replaced_with": "        if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n",
            "replaced": "        if (TokenStream.isJSIdentifier(name) &&\n",
            "patch_type": "replace",
            "next_line_no": 344
        },
        "1": {
            "file_name": "src/com/google/javascript/jscomp/CodeGenerator.java",
            "from_line_no": 350,
            "to_line_no": 350,
            "replaced_with": "          double d = getSimpleNumber(name);\n          if (!Double.isNaN(d)) {\n            cc.addNumber(d);\n          } else {\n            add(jsString(n.getString(), outputCharsetEncoder));\n          }\n",
            "replaced": "          add(jsString(n.getString(), outputCharsetEncoder));\n",
            "patch_type": "replace",
            "next_line_no": 351
        },
        "2": {
            "file_name": "src/com/google/javascript/jscomp/CodeGenerator.java",
            "replaced_with": "            Preconditions.checkState(c.getType() == Token.STRING);\n            String key = c.getString();\n",
            "patch_type": "insert",
            "next_line_no": 654
        },
        "3": {
            "file_name": "src/com/google/javascript/jscomp/CodeGenerator.java",
            "from_line_no": 656,
            "to_line_no": 659,
            "replaced_with": "            if (!c.isQuotedString() &&\n                !TokenStream.isKeyword(key) &&\n                TokenStream.isJSIdentifier(key) &&\n",
            "replaced": "            if (c.getType() == Token.STRING &&\n                !c.isQuotedString() &&\n                !TokenStream.isKeyword(c.getString()) &&\n                TokenStream.isJSIdentifier(c.getString()) &&\n",
            "patch_type": "replace",
            "next_line_no": 660
        },
        "4": {
            "file_name": "src/com/google/javascript/jscomp/CodeGenerator.java",
            "from_line_no": 662,
            "to_line_no": 663,
            "replaced_with": "                NodeUtil.isLatin(key)) {\n              add(key);\n",
            "replaced": "                NodeUtil.isLatin(c.getString())) {\n              add(c.getString());\n",
            "patch_type": "replace",
            "next_line_no": 664
        },
        "5": {
            "file_name": "src/com/google/javascript/jscomp/CodeGenerator.java",
            "from_line_no": 666,
            "to_line_no": 666,
            "replaced_with": "              double d = getSimpleNumber(key);\n              if (!Double.isNaN(d)) {\n                cc.addNumber(d);\n              } else {\n                addExpr(c, 1);\n              }\n",
            "replaced": "              addExpr(c, 1);\n",
            "patch_type": "replace",
            "next_line_no": 667
        },
        "6": {
            "file_name": "src/com/google/javascript/jscomp/CodeGenerator.java",
            "replaced_with": "  static boolean isSimpleNumber(String s) {\n    int len = s.length();\n    for (int index = 0; index < len; index++) {\n      char c = s.charAt(index);\n      if (c < '0' || c > '9') {\n        return false;\n      }\n    }\n    return len > 0;\n  }\n",
            "patch_type": "insert",
            "next_line_no": 724
        },
        "7": {
            "file_name": "src/com/google/javascript/jscomp/CodeGenerator.java",
            "replaced_with": "  static double getSimpleNumber(String s) {\n    if (isSimpleNumber(s)) {\n      long l = Long.parseLong(s);\n      if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {\n        return l;\n      }\n    }\n    return Double.NaN;\n  }\n",
            "patch_type": "insert",
            "next_line_no": 725
        },
        "8": {
            "file_name": "src/com/google/javascript/jscomp/RenamePrototypes.java",
            "from_line_no": 336,
            "to_line_no": 336,
            "replaced_with": "              if (TokenStream.isJSIdentifier(child.getString())) {\n",
            "replaced": "              if (child.getType() != Token.NUMBER) {\n",
            "patch_type": "replace",
            "next_line_no": 337
        },
        "9": {
            "file_name": "src/com/google/javascript/jscomp/RenamePrototypes.java",
            "from_line_no": 377,
            "to_line_no": 377,
            "replaced_with": "              if (TokenStream.isJSIdentifier(key.getString())) {\n",
            "replaced": "              if (key.getType() != Token.NUMBER) {\n",
            "patch_type": "replace",
            "next_line_no": 378
        },
        "10": {
            "file_name": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
            "replaced_with": "  private Node transformNumberAsString(NumberLiteral literalNode) {\n    JSDocInfo jsDocInfo = handleJsDoc(literalNode);\n    Node irNode = newStringNode(getStringValue(literalNode.getNumber()));\n    if (jsDocInfo != null) {\n      irNode.setJSDocInfo(jsDocInfo);\n    }\n    setSourceInfo(irNode, literalNode);\n    return irNode;\n  }\n",
            "patch_type": "insert",
            "next_line_no": 255
        },
        "11": {
            "file_name": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
            "replaced_with": "  private static String getStringValue(double value) {\n    long longValue = (long) value;\n",
            "patch_type": "insert",
            "next_line_no": 256
        },
        "12": {
            "file_name": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
            "replaced_with": "    if (longValue == value) {\n      return Long.toString(longValue);\n    } else {\n      return Double.toString(value);\n    }\n  }\n",
            "patch_type": "insert",
            "next_line_no": 258
        },
        "13": {
            "file_name": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
            "replaced_with": "      } else if (n instanceof NumberLiteral) {\n        ret = transformNumberAsString((NumberLiteral)n);\n        ret.putBooleanProp(Node.QUOTED_PROP, true);\n",
            "patch_type": "insert",
            "next_line_no": 347
        },
        "14": {
            "file_name": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
            "from_line_no": 349,
            "to_line_no": 351,
            "replaced": "        Preconditions.checkState(ret.getType() == Token.NUMBER\n            || ret.getType() == Token.STRING);\n        if (ret.getType() == Token.STRING) {\n",
            "patch_type": "delete",
            "next_line_no": 352
        },
        "15": {
            "file_name": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
            "from_line_no": 353,
            "to_line_no": 353,
            "replaced": "        }\n",
            "patch_type": "delete",
            "next_line_no": 354
        },
        "16": {
            "file_name": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
            "replaced_with": "      Preconditions.checkState(ret.getType() == Token.STRING);\n",
            "patch_type": "insert",
            "next_line_no": 355
        }
    },
    "method": {
        "failing_tests": [
            "com.google.javascript.jscomp.CodePrinterTest::testObjectLit2",
            "com.google.javascript.jscomp.CodePrinterTest::testObjectLit3",
            "com.google.javascript.jscomp.CodePrinterTest::testGetter",
            "com.google.javascript.jscomp.CodePrinterTest::testSetter",
            "com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds",
            "com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys2",
            "com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys3",
            "com.google.javascript.jscomp.SimpleDefinitionFinderTest::testDefineNumber",
            "com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral6",
            "com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral7",
            "com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral8",
            "com.google.javascript.jscomp.parsing.ParserTest::testObjectLiteralDoc1"
        ],
        "com.google.javascript.jscomp.CodePrinterTest::testObjectLit2": {
            "file_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
            "Instance": "Begin: Pos(1125, 10)\nEnd: Pos(1131, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/CodePrinterTest.java\nName: testObjectLit2\nChilds: [StatementAssertion<Begin: Pos(1126, 5), End: Pos(1126, 46)>,\nStatementAssertion<Begin: Pos(1127, 5), End: Pos(1127, 48)>,\nStatementAssertion<Begin: Pos(1128, 5), End: Pos(1128, 56)>,\nStatementAssertion<Begin: Pos(1129, 5), End: Pos(1129, 54)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/CodePrinterTest.java",
            "name": "testObjectLit2",
            "begin": "Pos(1125, 10)",
            "end": "Pos(1131, 3)",
            "begin_line_no": 1125,
            "end_line_no": 1131,
            "child": [
                "Begin: Pos(1126, 5)\nEnd: Pos(1126, 46)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1127, 5)\nEnd: Pos(1127, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1128, 5)\nEnd: Pos(1128, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1129, 5)\nEnd: Pos(1129, 54)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testObjectLit2$catena_0() {\n    assertPrint(\"var x={1:1}\", \"var x={1:1}\");                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPrint(\"var x={'1':1}\", \"var x={1:1}\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'1.0':1}\", \"var x={\\\"1.0\\\":1}\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={1.5:1}\", \"var x={\\\"1.5\\\":1}\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
                "  public void testObjectLit2$catena_1() {\n    try{ assertPrint(\"var x={1:1}\", \"var x={1:1}\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPrint(\"var x={'1':1}\", \"var x={1:1}\");                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPrint(\"var x={'1.0':1}\", \"var x={\\\"1.0\\\":1}\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={1.5:1}\", \"var x={\\\"1.5\\\":1}\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
                "  public void testObjectLit2$catena_2() {\n    try{ assertPrint(\"var x={1:1}\", \"var x={1:1}\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'1':1}\", \"var x={1:1}\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPrint(\"var x={'1.0':1}\", \"var x={\\\"1.0\\\":1}\");                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPrint(\"var x={1.5:1}\", \"var x={\\\"1.5\\\":1}\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
                "  public void testObjectLit2$catena_3() {\n    try{ assertPrint(\"var x={1:1}\", \"var x={1:1}\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'1':1}\", \"var x={1:1}\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'1.0':1}\", \"var x={\\\"1.0\\\":1}\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPrint(\"var x={1.5:1}\", \"var x={\\\"1.5\\\":1}\");                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n  }"
            ],
            "func": {
                "0": "  public void testObjectLit2$catena_0() {\n    assertPrint(\"var x={1:1}\", \"var x={1:1}\");                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPrint(\"var x={'1':1}\", \"var x={1:1}\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'1.0':1}\", \"var x={\\\"1.0\\\":1}\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={1.5:1}\", \"var x={\\\"1.5\\\":1}\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
                "1": "  public void testObjectLit2$catena_1() {\n    try{ assertPrint(\"var x={1:1}\", \"var x={1:1}\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPrint(\"var x={'1':1}\", \"var x={1:1}\");                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPrint(\"var x={'1.0':1}\", \"var x={\\\"1.0\\\":1}\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={1.5:1}\", \"var x={\\\"1.5\\\":1}\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
                "2": "  public void testObjectLit2$catena_2() {\n    try{ assertPrint(\"var x={1:1}\", \"var x={1:1}\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'1':1}\", \"var x={1:1}\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPrint(\"var x={'1.0':1}\", \"var x={\\\"1.0\\\":1}\");                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPrint(\"var x={1.5:1}\", \"var x={\\\"1.5\\\":1}\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
                "3": "  public void testObjectLit2$catena_3() {\n    try{ assertPrint(\"var x={1:1}\", \"var x={1:1}\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'1':1}\", \"var x={1:1}\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'1.0':1}\", \"var x={\\\"1.0\\\":1}\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPrint(\"var x={1.5:1}\", \"var x={\\\"1.5\\\":1}\");                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n  }"
            }
        },
        "com.google.javascript.jscomp.CodePrinterTest::testObjectLit3": {
            "file_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
            "Instance": "Begin: Pos(1133, 10)\nEnd: Pos(1144, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/CodePrinterTest.java\nName: testObjectLit3\nChilds: [StatementAssertion<Begin: Pos(1134, 5), End: Pos(1135, 33)>,\nStatementAssertion<Begin: Pos(1136, 5), End: Pos(1137, 33)>,\nStatementAssertion<Begin: Pos(1138, 5), End: Pos(1139, 40)>,\nStatementAssertion<Begin: Pos(1140, 5), End: Pos(1141, 40)>,\nStatementAssertion<Begin: Pos(1142, 5), End: Pos(1143, 51)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/CodePrinterTest.java",
            "name": "testObjectLit3",
            "begin": "Pos(1133, 10)",
            "end": "Pos(1144, 3)",
            "begin_line_no": 1133,
            "end_line_no": 1144,
            "child": [
                "Begin: Pos(1134, 5)\nEnd: Pos(1135, 33)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1136, 5)\nEnd: Pos(1137, 33)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1138, 5)\nEnd: Pos(1139, 40)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1140, 5)\nEnd: Pos(1141, 40)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1142, 5)\nEnd: Pos(1143, 51)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testObjectLit3$catena_0() {\n    assertPrint(\"var x={3E9:1}\",\n                \"var x={3E9:1}\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPrint(\"var x={'3000000000':1}\", // More than 31 bits\n                \"var x={3E9:1}\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'3000000001':1}\",\n                \"var x={3000000001:1}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'6000000001':1}\",  // More than 32 bits\n                \"var x={6000000001:1}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={\\\"12345678901234567\\\":1}\",  // More than 53 bits\n                \"var x={\\\"12345678901234567\\\":1}\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testObjectLit3$catena_1() {\n    try{ assertPrint(\"var x={3E9:1}\",\n                \"var x={3E9:1}\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPrint(\"var x={'3000000000':1}\", // More than 31 bits\n                \"var x={3E9:1}\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPrint(\"var x={'3000000001':1}\",\n                \"var x={3000000001:1}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'6000000001':1}\",  // More than 32 bits\n                \"var x={6000000001:1}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={\\\"12345678901234567\\\":1}\",  // More than 53 bits\n                \"var x={\\\"12345678901234567\\\":1}\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testObjectLit3$catena_2() {\n    try{ assertPrint(\"var x={3E9:1}\",\n                \"var x={3E9:1}\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'3000000000':1}\", // More than 31 bits\n                \"var x={3E9:1}\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPrint(\"var x={'3000000001':1}\",\n                \"var x={3000000001:1}\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPrint(\"var x={'6000000001':1}\",  // More than 32 bits\n                \"var x={6000000001:1}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={\\\"12345678901234567\\\":1}\",  // More than 53 bits\n                \"var x={\\\"12345678901234567\\\":1}\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testObjectLit3$catena_3() {\n    try{ assertPrint(\"var x={3E9:1}\",\n                \"var x={3E9:1}\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'3000000000':1}\", // More than 31 bits\n                \"var x={3E9:1}\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'3000000001':1}\",\n                \"var x={3000000001:1}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPrint(\"var x={'6000000001':1}\",  // More than 32 bits\n                \"var x={6000000001:1}\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPrint(\"var x={\\\"12345678901234567\\\":1}\",  // More than 53 bits\n                \"var x={\\\"12345678901234567\\\":1}\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testObjectLit3$catena_4() {\n    try{ assertPrint(\"var x={3E9:1}\",\n                \"var x={3E9:1}\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'3000000000':1}\", // More than 31 bits\n                \"var x={3E9:1}\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'3000000001':1}\",\n                \"var x={3000000001:1}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'6000000001':1}\",  // More than 32 bits\n                \"var x={6000000001:1}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPrint(\"var x={\\\"12345678901234567\\\":1}\",  // More than 53 bits\n                \"var x={\\\"12345678901234567\\\":1}\");                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testObjectLit3$catena_0() {\n    assertPrint(\"var x={3E9:1}\",\n                \"var x={3E9:1}\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPrint(\"var x={'3000000000':1}\", // More than 31 bits\n                \"var x={3E9:1}\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'3000000001':1}\",\n                \"var x={3000000001:1}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'6000000001':1}\",  // More than 32 bits\n                \"var x={6000000001:1}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={\\\"12345678901234567\\\":1}\",  // More than 53 bits\n                \"var x={\\\"12345678901234567\\\":1}\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testObjectLit3$catena_1() {\n    try{ assertPrint(\"var x={3E9:1}\",\n                \"var x={3E9:1}\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPrint(\"var x={'3000000000':1}\", // More than 31 bits\n                \"var x={3E9:1}\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPrint(\"var x={'3000000001':1}\",\n                \"var x={3000000001:1}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'6000000001':1}\",  // More than 32 bits\n                \"var x={6000000001:1}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={\\\"12345678901234567\\\":1}\",  // More than 53 bits\n                \"var x={\\\"12345678901234567\\\":1}\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testObjectLit3$catena_2() {\n    try{ assertPrint(\"var x={3E9:1}\",\n                \"var x={3E9:1}\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'3000000000':1}\", // More than 31 bits\n                \"var x={3E9:1}\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPrint(\"var x={'3000000001':1}\",\n                \"var x={3000000001:1}\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPrint(\"var x={'6000000001':1}\",  // More than 32 bits\n                \"var x={6000000001:1}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={\\\"12345678901234567\\\":1}\",  // More than 53 bits\n                \"var x={\\\"12345678901234567\\\":1}\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "3": "  public void testObjectLit3$catena_3() {\n    try{ assertPrint(\"var x={3E9:1}\",\n                \"var x={3E9:1}\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'3000000000':1}\", // More than 31 bits\n                \"var x={3E9:1}\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'3000000001':1}\",\n                \"var x={3000000001:1}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPrint(\"var x={'6000000001':1}\",  // More than 32 bits\n                \"var x={6000000001:1}\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPrint(\"var x={\\\"12345678901234567\\\":1}\",  // More than 53 bits\n                \"var x={\\\"12345678901234567\\\":1}\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "4": "  public void testObjectLit3$catena_4() {\n    try{ assertPrint(\"var x={3E9:1}\",\n                \"var x={3E9:1}\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'3000000000':1}\", // More than 31 bits\n                \"var x={3E9:1}\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'3000000001':1}\",\n                \"var x={3000000001:1}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'6000000001':1}\",  // More than 32 bits\n                \"var x={6000000001:1}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPrint(\"var x={\\\"12345678901234567\\\":1}\",  // More than 53 bits\n                \"var x={\\\"12345678901234567\\\":1}\");                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        },
        "com.google.javascript.jscomp.CodePrinterTest::testGetter": {
            "file_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
            "Instance": "Begin: Pos(1146, 10)\nEnd: Pos(1164, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/CodePrinterTest.java\nName: testGetter\nChilds: [StatementAssertion<Begin: Pos(1147, 5), End: Pos(1147, 42)>,\nStatementAssertion<Begin: Pos(1148, 5), End: Pos(1148, 77)>,\nStatementAssertion<Begin: Pos(1149, 5), End: Pos(1151, 37)>,\nStatementAssertion<Begin: Pos(1153, 5), End: Pos(1155, 39)>,\nStatementAssertion<Begin: Pos(1157, 5), End: Pos(1159, 35)>,\nStatementAssertion<Begin: Pos(1161, 5), End: Pos(1163, 40)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/CodePrinterTest.java",
            "name": "testGetter",
            "begin": "Pos(1146, 10)",
            "end": "Pos(1164, 3)",
            "begin_line_no": 1146,
            "end_line_no": 1164,
            "child": [
                "Begin: Pos(1147, 5)\nEnd: Pos(1147, 42)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1148, 5)\nEnd: Pos(1148, 77)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1149, 5)\nEnd: Pos(1151, 37)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1153, 5)\nEnd: Pos(1155, 39)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1157, 5)\nEnd: Pos(1159, 35)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1161, 5)\nEnd: Pos(1163, 40)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testGetter$catena_0() {\n    assertPrint(\"var x = {}\", \"var x={}\");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPrint(\"var x = {get a() {return 1}}\", \"var x={get a(){return 1}}\");                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\n      \"var x = {get a() {}, get b(){}}\",\n      \"var x={get a(){},get b(){}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 1() {return 1}}\",\n      \"var x={get 1(){return 1}}\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get \\\"()\\\"() {return 1}}\",\n      \"var x={get \\\"()\\\"(){return 1}}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testGetter$catena_1() {\n    try{ assertPrint(\"var x = {}\", \"var x={}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPrint(\"var x = {get a() {return 1}}\", \"var x={get a(){return 1}}\");                               /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPrint(\n      \"var x = {get a() {}, get b(){}}\",\n      \"var x={get a(){},get b(){}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 1() {return 1}}\",\n      \"var x={get 1(){return 1}}\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get \\\"()\\\"() {return 1}}\",\n      \"var x={get \\\"()\\\"(){return 1}}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testGetter$catena_2() {\n    try{ assertPrint(\"var x = {}\", \"var x={}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x = {get a() {return 1}}\", \"var x={get a(){return 1}}\");                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPrint(\n      \"var x = {get a() {}, get b(){}}\",\n      \"var x={get a(){},get b(){}}\");                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 1() {return 1}}\",\n      \"var x={get 1(){return 1}}\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get \\\"()\\\"() {return 1}}\",\n      \"var x={get \\\"()\\\"(){return 1}}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testGetter$catena_3() {\n    try{ assertPrint(\"var x = {}\", \"var x={}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x = {get a() {return 1}}\", \"var x={get a(){return 1}}\");                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\n      \"var x = {get a() {}, get b(){}}\",\n      \"var x={get a(){},get b(){}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertPrint(\n      \"var x = {get 1() {return 1}}\",\n      \"var x={get 1(){return 1}}\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get \\\"()\\\"() {return 1}}\",\n      \"var x={get \\\"()\\\"(){return 1}}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testGetter$catena_4() {\n    try{ assertPrint(\"var x = {}\", \"var x={}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x = {get a() {return 1}}\", \"var x={get a(){return 1}}\");                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\n      \"var x = {get a() {}, get b(){}}\",\n      \"var x={get a(){},get b(){}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertPrint(\n      \"var x = {get 1() {return 1}}\",\n      \"var x={get 1(){return 1}}\");                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertPrint(\n      \"var x = {get \\\"()\\\"() {return 1}}\",\n      \"var x={get \\\"()\\\"(){return 1}}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testGetter$catena_5() {\n    try{ assertPrint(\"var x = {}\", \"var x={}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x = {get a() {return 1}}\", \"var x={get a(){return 1}}\");                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\n      \"var x = {get a() {}, get b(){}}\",\n      \"var x={get a(){},get b(){}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 1() {return 1}}\",\n      \"var x={get 1(){return 1}}\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertPrint(\n      \"var x = {get \\\"()\\\"() {return 1}}\",\n      \"var x={get \\\"()\\\"(){return 1}}\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testGetter$catena_0() {\n    assertPrint(\"var x = {}\", \"var x={}\");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPrint(\"var x = {get a() {return 1}}\", \"var x={get a(){return 1}}\");                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\n      \"var x = {get a() {}, get b(){}}\",\n      \"var x={get a(){},get b(){}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 1() {return 1}}\",\n      \"var x={get 1(){return 1}}\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get \\\"()\\\"() {return 1}}\",\n      \"var x={get \\\"()\\\"(){return 1}}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testGetter$catena_1() {\n    try{ assertPrint(\"var x = {}\", \"var x={}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPrint(\"var x = {get a() {return 1}}\", \"var x={get a(){return 1}}\");                               /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPrint(\n      \"var x = {get a() {}, get b(){}}\",\n      \"var x={get a(){},get b(){}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 1() {return 1}}\",\n      \"var x={get 1(){return 1}}\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get \\\"()\\\"() {return 1}}\",\n      \"var x={get \\\"()\\\"(){return 1}}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testGetter$catena_2() {\n    try{ assertPrint(\"var x = {}\", \"var x={}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x = {get a() {return 1}}\", \"var x={get a(){return 1}}\");                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPrint(\n      \"var x = {get a() {}, get b(){}}\",\n      \"var x={get a(){},get b(){}}\");                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 1() {return 1}}\",\n      \"var x={get 1(){return 1}}\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get \\\"()\\\"() {return 1}}\",\n      \"var x={get \\\"()\\\"(){return 1}}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "3": "  public void testGetter$catena_3() {\n    try{ assertPrint(\"var x = {}\", \"var x={}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x = {get a() {return 1}}\", \"var x={get a(){return 1}}\");                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\n      \"var x = {get a() {}, get b(){}}\",\n      \"var x={get a(){},get b(){}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertPrint(\n      \"var x = {get 1() {return 1}}\",\n      \"var x={get 1(){return 1}}\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get \\\"()\\\"() {return 1}}\",\n      \"var x={get \\\"()\\\"(){return 1}}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "4": "  public void testGetter$catena_4() {\n    try{ assertPrint(\"var x = {}\", \"var x={}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x = {get a() {return 1}}\", \"var x={get a(){return 1}}\");                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\n      \"var x = {get a() {}, get b(){}}\",\n      \"var x={get a(){},get b(){}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertPrint(\n      \"var x = {get 1() {return 1}}\",\n      \"var x={get 1(){return 1}}\");                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertPrint(\n      \"var x = {get \\\"()\\\"() {return 1}}\",\n      \"var x={get \\\"()\\\"(){return 1}}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "5": "  public void testGetter$catena_5() {\n    try{ assertPrint(\"var x = {}\", \"var x={}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x = {get a() {return 1}}\", \"var x={get a(){return 1}}\");                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\n      \"var x = {get a() {}, get b(){}}\",\n      \"var x={get a(){},get b(){}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 1() {return 1}}\",\n      \"var x={get 1(){return 1}}\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertPrint(\n      \"var x = {get \\\"()\\\"() {return 1}}\",\n      \"var x={get \\\"()\\\"(){return 1}}\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        },
        "com.google.javascript.jscomp.CodePrinterTest::testSetter": {
            "file_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
            "Instance": "Begin: Pos(1166, 10)\nEnd: Pos(1183, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/CodePrinterTest.java\nName: testSetter\nChilds: [StatementAssertion<Begin: Pos(1167, 5), End: Pos(1167, 42)>,\nStatementAssertion<Begin: Pos(1168, 5), End: Pos(1170, 37)>,\nStatementAssertion<Begin: Pos(1172, 5), End: Pos(1174, 39)>,\nStatementAssertion<Begin: Pos(1176, 5), End: Pos(1178, 36)>,\nStatementAssertion<Begin: Pos(1180, 5), End: Pos(1182, 42)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/CodePrinterTest.java",
            "name": "testSetter",
            "begin": "Pos(1166, 10)",
            "end": "Pos(1183, 3)",
            "begin_line_no": 1166,
            "end_line_no": 1183,
            "child": [
                "Begin: Pos(1167, 5)\nEnd: Pos(1167, 42)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1168, 5)\nEnd: Pos(1170, 37)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1172, 5)\nEnd: Pos(1174, 39)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1176, 5)\nEnd: Pos(1178, 36)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1180, 5)\nEnd: Pos(1182, 42)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testSetter$catena_0() {\n    assertPrint(\"var x = {}\", \"var x={}\");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPrint(\n       \"var x = {set a(y) {return 1}}\",\n       \"var x={set a(y){return 1}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {set 1(y) {return 1}}\",\n      \"var x={set 1(y){return 1}}\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {set \\\"(x)\\\"(y) {return 1}}\",\n      \"var x={set \\\"(x)\\\"(y){return 1}}\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testSetter$catena_1() {\n    try{ assertPrint(\"var x = {}\", \"var x={}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPrint(\n       \"var x = {set a(y) {return 1}}\",\n       \"var x={set a(y){return 1}}\");                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {set 1(y) {return 1}}\",\n      \"var x={set 1(y){return 1}}\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {set \\\"(x)\\\"(y) {return 1}}\",\n      \"var x={set \\\"(x)\\\"(y){return 1}}\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testSetter$catena_2() {\n    try{ assertPrint(\"var x = {}\", \"var x={}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\n       \"var x = {set a(y) {return 1}}\",\n       \"var x={set a(y){return 1}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertPrint(\n      \"var x = {set 1(y) {return 1}}\",\n      \"var x={set 1(y){return 1}}\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {set \\\"(x)\\\"(y) {return 1}}\",\n      \"var x={set \\\"(x)\\\"(y){return 1}}\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testSetter$catena_3() {\n    try{ assertPrint(\"var x = {}\", \"var x={}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\n       \"var x = {set a(y) {return 1}}\",\n       \"var x={set a(y){return 1}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertPrint(\n      \"var x = {set 1(y) {return 1}}\",\n      \"var x={set 1(y){return 1}}\");                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertPrint(\n      \"var x = {set \\\"(x)\\\"(y) {return 1}}\",\n      \"var x={set \\\"(x)\\\"(y){return 1}}\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testSetter$catena_4() {\n    try{ assertPrint(\"var x = {}\", \"var x={}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\n       \"var x = {set a(y) {return 1}}\",\n       \"var x={set a(y){return 1}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {set 1(y) {return 1}}\",\n      \"var x={set 1(y){return 1}}\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertPrint(\n      \"var x = {set \\\"(x)\\\"(y) {return 1}}\",\n      \"var x={set \\\"(x)\\\"(y){return 1}}\");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testSetter$catena_0() {\n    assertPrint(\"var x = {}\", \"var x={}\");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPrint(\n       \"var x = {set a(y) {return 1}}\",\n       \"var x={set a(y){return 1}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {set 1(y) {return 1}}\",\n      \"var x={set 1(y){return 1}}\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {set \\\"(x)\\\"(y) {return 1}}\",\n      \"var x={set \\\"(x)\\\"(y){return 1}}\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testSetter$catena_1() {\n    try{ assertPrint(\"var x = {}\", \"var x={}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPrint(\n       \"var x = {set a(y) {return 1}}\",\n       \"var x={set a(y){return 1}}\");                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {set 1(y) {return 1}}\",\n      \"var x={set 1(y){return 1}}\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {set \\\"(x)\\\"(y) {return 1}}\",\n      \"var x={set \\\"(x)\\\"(y){return 1}}\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testSetter$catena_2() {\n    try{ assertPrint(\"var x = {}\", \"var x={}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\n       \"var x = {set a(y) {return 1}}\",\n       \"var x={set a(y){return 1}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertPrint(\n      \"var x = {set 1(y) {return 1}}\",\n      \"var x={set 1(y){return 1}}\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {set \\\"(x)\\\"(y) {return 1}}\",\n      \"var x={set \\\"(x)\\\"(y){return 1}}\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "3": "  public void testSetter$catena_3() {\n    try{ assertPrint(\"var x = {}\", \"var x={}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\n       \"var x = {set a(y) {return 1}}\",\n       \"var x={set a(y){return 1}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertPrint(\n      \"var x = {set 1(y) {return 1}}\",\n      \"var x={set 1(y){return 1}}\");                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertPrint(\n      \"var x = {set \\\"(x)\\\"(y) {return 1}}\",\n      \"var x={set \\\"(x)\\\"(y){return 1}}\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "4": "  public void testSetter$catena_4() {\n    try{ assertPrint(\"var x = {}\", \"var x={}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\n       \"var x = {set a(y) {return 1}}\",\n       \"var x={set a(y){return 1}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {set 1(y) {return 1}}\",\n      \"var x={set 1(y){return 1}}\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertPrint(\n      \"var x = {set \\\"(x)\\\"(y) {return 1}}\",\n      \"var x={set \\\"(x)\\\"(y){return 1}}\");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        },
        "com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds": {
            "file_path": "test/com/google/javascript/jscomp/FunctionNamesTest.java",
            "Instance": "Begin: Pos(40, 10)\nEnd: Pos(93, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/FunctionNamesTest.java\nName: testFunctionsNamesAndIds\nChilds: [StatementAssertion<Begin: Pos(60, 5), End: Pos(60, 23)>,\nStatementAssertion<Begin: Pos(71, 5), End: Pos(71, 62)>,\nStatementAssertion<Begin: Pos(91, 5), End: Pos(92, 41)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/FunctionNamesTest.java",
            "name": "testFunctionsNamesAndIds",
            "begin": "Pos(40, 10)",
            "end": "Pos(93, 3)",
            "begin_line_no": 40,
            "end_line_no": 93,
            "child": [
                "Begin: Pos(60, 5)\nEnd: Pos(60, 23)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(71, 5)\nEnd: Pos(71, 62)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(91, 5)\nEnd: Pos(92, 41)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testFunctionsNamesAndIds$catena_0() {\n    final String jsSource =\n        \"goog.widget = function(str) {\\n\" +\n        \"  this.member_fn = function() {};\\n\" +\n        \"  local_fn = function() {};\\n\" +\n        \"  (function(a){})(1);\\n\" +\n        \"}\\n\" +\n        \"function foo() {\\n\" +\n        \"  function bar() {}\\n\" +\n        \"}\\n\" +\n        \"literal = {f1 : function(){}, f2 : function(){}};\\n\" +\n        \"goog.array.map(arr, function named(){});\\n\" +\n        \"goog.array.map(arr, function(){});\\n\" +\n        \"named_twice = function quax(){};\\n\" +\n        \"recliteral = {l1 : {l2 : function(){}}};\\n\" +\n        \"namedliteral = {n1 : function litnamed(){}};\\n\" +\n        \"namedrecliteral = {n1 : {n2 : function reclitnamed(){}}};\\n\" +\n        \"numliteral = {1 : function(){}};\\n\" +\n        \"recnumliteral = {1 : {a : function(){}}};\\n\";\n\n    testSame(jsSource);                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n    final Map<Integer, String> idNameMap = Maps.newLinkedHashMap();\n    int count = 0;\n    for (Node f : functionNames.getFunctionNodeList()) {\n      int id = functionNames.getFunctionId(f);\n      String name = functionNames.getFunctionName(f);\n      idNameMap.put(id, name);\n      count++;\n    }\n\n    try{ assertEquals(\"Unexpected number of functions\", 16, count);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    final Map<Integer, String> expectedMap = Maps.newLinkedHashMap();\n\n    expectedMap.put(0, \"goog.widget.member_fn\");\n    expectedMap.put(1, \"goog.widget::local_fn\");\n    expectedMap.put(2, \"goog.widget::<anonymous>\");\n    expectedMap.put(3, \"goog.widget\");\n    expectedMap.put(4, \"foo::bar\");\n    expectedMap.put(5, \"foo\");\n    expectedMap.put(6, \"literal.f1\");\n    expectedMap.put(7, \"literal.f2\");\n    expectedMap.put(8, \"named\");\n    expectedMap.put(9, \"<anonymous>\");\n    expectedMap.put(10, \"quax\");\n    expectedMap.put(11, \"recliteral.l1.l2\");\n    expectedMap.put(12, \"litnamed\");\n    expectedMap.put(13, \"reclitnamed\");\n    expectedMap.put(14, \"numliteral.__2\");\n    expectedMap.put(15, \"recnumliteral.__3.a\");\n    try{ assertEquals(\"Function id/name mismatch\",\n                 expectedMap, idNameMap);                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFunctionsNamesAndIds$catena_1() {\n    final String jsSource =\n        \"goog.widget = function(str) {\\n\" +\n        \"  this.member_fn = function() {};\\n\" +\n        \"  local_fn = function() {};\\n\" +\n        \"  (function(a){})(1);\\n\" +\n        \"}\\n\" +\n        \"function foo() {\\n\" +\n        \"  function bar() {}\\n\" +\n        \"}\\n\" +\n        \"literal = {f1 : function(){}, f2 : function(){}};\\n\" +\n        \"goog.array.map(arr, function named(){});\\n\" +\n        \"goog.array.map(arr, function(){});\\n\" +\n        \"named_twice = function quax(){};\\n\" +\n        \"recliteral = {l1 : {l2 : function(){}}};\\n\" +\n        \"namedliteral = {n1 : function litnamed(){}};\\n\" +\n        \"namedrecliteral = {n1 : {n2 : function reclitnamed(){}}};\\n\" +\n        \"numliteral = {1 : function(){}};\\n\" +\n        \"recnumliteral = {1 : {a : function(){}}};\\n\";\n\n    try{ testSame(jsSource);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    final Map<Integer, String> idNameMap = Maps.newLinkedHashMap();\n    int count = 0;\n    for (Node f : functionNames.getFunctionNodeList()) {\n      int id = functionNames.getFunctionId(f);\n      String name = functionNames.getFunctionName(f);\n      idNameMap.put(id, name);\n      count++;\n    }\n\n    assertEquals(\"Unexpected number of functions\", 16, count);                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n    final Map<Integer, String> expectedMap = Maps.newLinkedHashMap();\n\n    expectedMap.put(0, \"goog.widget.member_fn\");\n    expectedMap.put(1, \"goog.widget::local_fn\");\n    expectedMap.put(2, \"goog.widget::<anonymous>\");\n    expectedMap.put(3, \"goog.widget\");\n    expectedMap.put(4, \"foo::bar\");\n    expectedMap.put(5, \"foo\");\n    expectedMap.put(6, \"literal.f1\");\n    expectedMap.put(7, \"literal.f2\");\n    expectedMap.put(8, \"named\");\n    expectedMap.put(9, \"<anonymous>\");\n    expectedMap.put(10, \"quax\");\n    expectedMap.put(11, \"recliteral.l1.l2\");\n    expectedMap.put(12, \"litnamed\");\n    expectedMap.put(13, \"reclitnamed\");\n    expectedMap.put(14, \"numliteral.__2\");\n    expectedMap.put(15, \"recnumliteral.__3.a\");\n    try{ assertEquals(\"Function id/name mismatch\",\n                 expectedMap, idNameMap);                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFunctionsNamesAndIds$catena_2() {\n    final String jsSource =\n        \"goog.widget = function(str) {\\n\" +\n        \"  this.member_fn = function() {};\\n\" +\n        \"  local_fn = function() {};\\n\" +\n        \"  (function(a){})(1);\\n\" +\n        \"}\\n\" +\n        \"function foo() {\\n\" +\n        \"  function bar() {}\\n\" +\n        \"}\\n\" +\n        \"literal = {f1 : function(){}, f2 : function(){}};\\n\" +\n        \"goog.array.map(arr, function named(){});\\n\" +\n        \"goog.array.map(arr, function(){});\\n\" +\n        \"named_twice = function quax(){};\\n\" +\n        \"recliteral = {l1 : {l2 : function(){}}};\\n\" +\n        \"namedliteral = {n1 : function litnamed(){}};\\n\" +\n        \"namedrecliteral = {n1 : {n2 : function reclitnamed(){}}};\\n\" +\n        \"numliteral = {1 : function(){}};\\n\" +\n        \"recnumliteral = {1 : {a : function(){}}};\\n\";\n\n    try{ testSame(jsSource);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    final Map<Integer, String> idNameMap = Maps.newLinkedHashMap();\n    int count = 0;\n    for (Node f : functionNames.getFunctionNodeList()) {\n      int id = functionNames.getFunctionId(f);\n      String name = functionNames.getFunctionName(f);\n      idNameMap.put(id, name);\n      count++;\n    }\n\n    try{ assertEquals(\"Unexpected number of functions\", 16, count);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    final Map<Integer, String> expectedMap = Maps.newLinkedHashMap();\n\n    expectedMap.put(0, \"goog.widget.member_fn\");\n    expectedMap.put(1, \"goog.widget::local_fn\");\n    expectedMap.put(2, \"goog.widget::<anonymous>\");\n    expectedMap.put(3, \"goog.widget\");\n    expectedMap.put(4, \"foo::bar\");\n    expectedMap.put(5, \"foo\");\n    expectedMap.put(6, \"literal.f1\");\n    expectedMap.put(7, \"literal.f2\");\n    expectedMap.put(8, \"named\");\n    expectedMap.put(9, \"<anonymous>\");\n    expectedMap.put(10, \"quax\");\n    expectedMap.put(11, \"recliteral.l1.l2\");\n    expectedMap.put(12, \"litnamed\");\n    expectedMap.put(13, \"reclitnamed\");\n    expectedMap.put(14, \"numliteral.__2\");\n    expectedMap.put(15, \"recnumliteral.__3.a\");\n    assertEquals(\"Function id/name mismatch\",\n                 expectedMap, idNameMap);                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testFunctionsNamesAndIds$catena_0() {\n    final String jsSource =\n        \"goog.widget = function(str) {\\n\" +\n        \"  this.member_fn = function() {};\\n\" +\n        \"  local_fn = function() {};\\n\" +\n        \"  (function(a){})(1);\\n\" +\n        \"}\\n\" +\n        \"function foo() {\\n\" +\n        \"  function bar() {}\\n\" +\n        \"}\\n\" +\n        \"literal = {f1 : function(){}, f2 : function(){}};\\n\" +\n        \"goog.array.map(arr, function named(){});\\n\" +\n        \"goog.array.map(arr, function(){});\\n\" +\n        \"named_twice = function quax(){};\\n\" +\n        \"recliteral = {l1 : {l2 : function(){}}};\\n\" +\n        \"namedliteral = {n1 : function litnamed(){}};\\n\" +\n        \"namedrecliteral = {n1 : {n2 : function reclitnamed(){}}};\\n\" +\n        \"numliteral = {1 : function(){}};\\n\" +\n        \"recnumliteral = {1 : {a : function(){}}};\\n\";\n\n    testSame(jsSource);                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n    final Map<Integer, String> idNameMap = Maps.newLinkedHashMap();\n    int count = 0;\n    for (Node f : functionNames.getFunctionNodeList()) {\n      int id = functionNames.getFunctionId(f);\n      String name = functionNames.getFunctionName(f);\n      idNameMap.put(id, name);\n      count++;\n    }\n\n    try{ assertEquals(\"Unexpected number of functions\", 16, count);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    final Map<Integer, String> expectedMap = Maps.newLinkedHashMap();\n\n    expectedMap.put(0, \"goog.widget.member_fn\");\n    expectedMap.put(1, \"goog.widget::local_fn\");\n    expectedMap.put(2, \"goog.widget::<anonymous>\");\n    expectedMap.put(3, \"goog.widget\");\n    expectedMap.put(4, \"foo::bar\");\n    expectedMap.put(5, \"foo\");\n    expectedMap.put(6, \"literal.f1\");\n    expectedMap.put(7, \"literal.f2\");\n    expectedMap.put(8, \"named\");\n    expectedMap.put(9, \"<anonymous>\");\n    expectedMap.put(10, \"quax\");\n    expectedMap.put(11, \"recliteral.l1.l2\");\n    expectedMap.put(12, \"litnamed\");\n    expectedMap.put(13, \"reclitnamed\");\n    expectedMap.put(14, \"numliteral.__2\");\n    expectedMap.put(15, \"recnumliteral.__3.a\");\n    try{ assertEquals(\"Function id/name mismatch\",\n                 expectedMap, idNameMap);                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testFunctionsNamesAndIds$catena_1() {\n    final String jsSource =\n        \"goog.widget = function(str) {\\n\" +\n        \"  this.member_fn = function() {};\\n\" +\n        \"  local_fn = function() {};\\n\" +\n        \"  (function(a){})(1);\\n\" +\n        \"}\\n\" +\n        \"function foo() {\\n\" +\n        \"  function bar() {}\\n\" +\n        \"}\\n\" +\n        \"literal = {f1 : function(){}, f2 : function(){}};\\n\" +\n        \"goog.array.map(arr, function named(){});\\n\" +\n        \"goog.array.map(arr, function(){});\\n\" +\n        \"named_twice = function quax(){};\\n\" +\n        \"recliteral = {l1 : {l2 : function(){}}};\\n\" +\n        \"namedliteral = {n1 : function litnamed(){}};\\n\" +\n        \"namedrecliteral = {n1 : {n2 : function reclitnamed(){}}};\\n\" +\n        \"numliteral = {1 : function(){}};\\n\" +\n        \"recnumliteral = {1 : {a : function(){}}};\\n\";\n\n    try{ testSame(jsSource);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    final Map<Integer, String> idNameMap = Maps.newLinkedHashMap();\n    int count = 0;\n    for (Node f : functionNames.getFunctionNodeList()) {\n      int id = functionNames.getFunctionId(f);\n      String name = functionNames.getFunctionName(f);\n      idNameMap.put(id, name);\n      count++;\n    }\n\n    assertEquals(\"Unexpected number of functions\", 16, count);                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n    final Map<Integer, String> expectedMap = Maps.newLinkedHashMap();\n\n    expectedMap.put(0, \"goog.widget.member_fn\");\n    expectedMap.put(1, \"goog.widget::local_fn\");\n    expectedMap.put(2, \"goog.widget::<anonymous>\");\n    expectedMap.put(3, \"goog.widget\");\n    expectedMap.put(4, \"foo::bar\");\n    expectedMap.put(5, \"foo\");\n    expectedMap.put(6, \"literal.f1\");\n    expectedMap.put(7, \"literal.f2\");\n    expectedMap.put(8, \"named\");\n    expectedMap.put(9, \"<anonymous>\");\n    expectedMap.put(10, \"quax\");\n    expectedMap.put(11, \"recliteral.l1.l2\");\n    expectedMap.put(12, \"litnamed\");\n    expectedMap.put(13, \"reclitnamed\");\n    expectedMap.put(14, \"numliteral.__2\");\n    expectedMap.put(15, \"recnumliteral.__3.a\");\n    try{ assertEquals(\"Function id/name mismatch\",\n                 expectedMap, idNameMap);                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testFunctionsNamesAndIds$catena_2() {\n    final String jsSource =\n        \"goog.widget = function(str) {\\n\" +\n        \"  this.member_fn = function() {};\\n\" +\n        \"  local_fn = function() {};\\n\" +\n        \"  (function(a){})(1);\\n\" +\n        \"}\\n\" +\n        \"function foo() {\\n\" +\n        \"  function bar() {}\\n\" +\n        \"}\\n\" +\n        \"literal = {f1 : function(){}, f2 : function(){}};\\n\" +\n        \"goog.array.map(arr, function named(){});\\n\" +\n        \"goog.array.map(arr, function(){});\\n\" +\n        \"named_twice = function quax(){};\\n\" +\n        \"recliteral = {l1 : {l2 : function(){}}};\\n\" +\n        \"namedliteral = {n1 : function litnamed(){}};\\n\" +\n        \"namedrecliteral = {n1 : {n2 : function reclitnamed(){}}};\\n\" +\n        \"numliteral = {1 : function(){}};\\n\" +\n        \"recnumliteral = {1 : {a : function(){}}};\\n\";\n\n    try{ testSame(jsSource);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    final Map<Integer, String> idNameMap = Maps.newLinkedHashMap();\n    int count = 0;\n    for (Node f : functionNames.getFunctionNodeList()) {\n      int id = functionNames.getFunctionId(f);\n      String name = functionNames.getFunctionName(f);\n      idNameMap.put(id, name);\n      count++;\n    }\n\n    try{ assertEquals(\"Unexpected number of functions\", 16, count);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    final Map<Integer, String> expectedMap = Maps.newLinkedHashMap();\n\n    expectedMap.put(0, \"goog.widget.member_fn\");\n    expectedMap.put(1, \"goog.widget::local_fn\");\n    expectedMap.put(2, \"goog.widget::<anonymous>\");\n    expectedMap.put(3, \"goog.widget\");\n    expectedMap.put(4, \"foo::bar\");\n    expectedMap.put(5, \"foo\");\n    expectedMap.put(6, \"literal.f1\");\n    expectedMap.put(7, \"literal.f2\");\n    expectedMap.put(8, \"named\");\n    expectedMap.put(9, \"<anonymous>\");\n    expectedMap.put(10, \"quax\");\n    expectedMap.put(11, \"recliteral.l1.l2\");\n    expectedMap.put(12, \"litnamed\");\n    expectedMap.put(13, \"reclitnamed\");\n    expectedMap.put(14, \"numliteral.__2\");\n    expectedMap.put(15, \"recnumliteral.__3.a\");\n    assertEquals(\"Function id/name mismatch\",\n                 expectedMap, idNameMap);                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        },
        "com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys2": {
            "file_path": "test/com/google/javascript/jscomp/RenamePropertiesTest.java",
            "Instance": "Begin: Pos(70, 10)\nEnd: Pos(77, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/RenamePropertiesTest.java\nName: testPrototypePropertiesAsObjLitKeys2\nChilds: [StatementAssertion<Begin: Pos(71, 5), End: Pos(71, 53)>,\nStatementAssertion<Begin: Pos(73, 5), End: Pos(73, 57)>,\nStatementAssertion<Begin: Pos(75, 5), End: Pos(76, 48)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/RenamePropertiesTest.java",
            "name": "testPrototypePropertiesAsObjLitKeys2",
            "begin": "Pos(70, 10)",
            "end": "Pos(77, 3)",
            "begin_line_no": 70,
            "end_line_no": 77,
            "child": [
                "Begin: Pos(71, 5)\nEnd: Pos(71, 53)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(73, 5)\nEnd: Pos(73, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(75, 5)\nEnd: Pos(76, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testPrototypePropertiesAsObjLitKeys2$catena_0() {\n    testSame(\"Bar.prototype = {get 2(){}}; bar[2];\");                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ testSame(\"Bar.prototype = {get 'a'(){}}; bar['a'];\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"Bar.prototype = {get getA(){}}; bar.getA;\",\n         \"Bar.prototype = {get a(){}}; bar.a;\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testPrototypePropertiesAsObjLitKeys2$catena_1() {\n    try{ testSame(\"Bar.prototype = {get 2(){}}; bar[2];\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    testSame(\"Bar.prototype = {get 'a'(){}}; bar['a'];\");                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ test(\"Bar.prototype = {get getA(){}}; bar.getA;\",\n         \"Bar.prototype = {get a(){}}; bar.a;\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testPrototypePropertiesAsObjLitKeys2$catena_2() {\n    try{ testSame(\"Bar.prototype = {get 2(){}}; bar[2];\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ testSame(\"Bar.prototype = {get 'a'(){}}; bar['a'];\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    test(\"Bar.prototype = {get getA(){}}; bar.getA;\",\n         \"Bar.prototype = {get a(){}}; bar.a;\");                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testPrototypePropertiesAsObjLitKeys2$catena_0() {\n    testSame(\"Bar.prototype = {get 2(){}}; bar[2];\");                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ testSame(\"Bar.prototype = {get 'a'(){}}; bar['a'];\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"Bar.prototype = {get getA(){}}; bar.getA;\",\n         \"Bar.prototype = {get a(){}}; bar.a;\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testPrototypePropertiesAsObjLitKeys2$catena_1() {\n    try{ testSame(\"Bar.prototype = {get 2(){}}; bar[2];\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    testSame(\"Bar.prototype = {get 'a'(){}}; bar['a'];\");                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ test(\"Bar.prototype = {get getA(){}}; bar.getA;\",\n         \"Bar.prototype = {get a(){}}; bar.a;\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testPrototypePropertiesAsObjLitKeys2$catena_2() {\n    try{ testSame(\"Bar.prototype = {get 2(){}}; bar[2];\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ testSame(\"Bar.prototype = {get 'a'(){}}; bar['a'];\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    test(\"Bar.prototype = {get getA(){}}; bar.getA;\",\n         \"Bar.prototype = {get a(){}}; bar.a;\");                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        },
        "com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys3": {
            "file_path": "test/com/google/javascript/jscomp/RenamePropertiesTest.java",
            "Instance": "Begin: Pos(79, 10)\nEnd: Pos(86, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/RenamePropertiesTest.java\nName: testPrototypePropertiesAsObjLitKeys3\nChilds: [StatementAssertion<Begin: Pos(80, 5), End: Pos(80, 54)>,\nStatementAssertion<Begin: Pos(82, 5), End: Pos(82, 58)>,\nStatementAssertion<Begin: Pos(84, 5), End: Pos(85, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/RenamePropertiesTest.java",
            "name": "testPrototypePropertiesAsObjLitKeys3",
            "begin": "Pos(79, 10)",
            "end": "Pos(86, 3)",
            "begin_line_no": 79,
            "end_line_no": 86,
            "child": [
                "Begin: Pos(80, 5)\nEnd: Pos(80, 54)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(82, 5)\nEnd: Pos(82, 58)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(84, 5)\nEnd: Pos(85, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testPrototypePropertiesAsObjLitKeys3$catena_0() {\n    testSame(\"Bar.prototype = {set 2(x){}}; bar[2];\");                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ testSame(\"Bar.prototype = {set 'a'(x){}}; bar['a'];\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"Bar.prototype = {set getA(x){}}; bar.getA;\",\n         \"Bar.prototype = {set a(x){}}; bar.a;\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testPrototypePropertiesAsObjLitKeys3$catena_1() {\n    try{ testSame(\"Bar.prototype = {set 2(x){}}; bar[2];\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    testSame(\"Bar.prototype = {set 'a'(x){}}; bar['a'];\");                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ test(\"Bar.prototype = {set getA(x){}}; bar.getA;\",\n         \"Bar.prototype = {set a(x){}}; bar.a;\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testPrototypePropertiesAsObjLitKeys3$catena_2() {\n    try{ testSame(\"Bar.prototype = {set 2(x){}}; bar[2];\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ testSame(\"Bar.prototype = {set 'a'(x){}}; bar['a'];\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    test(\"Bar.prototype = {set getA(x){}}; bar.getA;\",\n         \"Bar.prototype = {set a(x){}}; bar.a;\");                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testPrototypePropertiesAsObjLitKeys3$catena_0() {\n    testSame(\"Bar.prototype = {set 2(x){}}; bar[2];\");                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ testSame(\"Bar.prototype = {set 'a'(x){}}; bar['a'];\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"Bar.prototype = {set getA(x){}}; bar.getA;\",\n         \"Bar.prototype = {set a(x){}}; bar.a;\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testPrototypePropertiesAsObjLitKeys3$catena_1() {\n    try{ testSame(\"Bar.prototype = {set 2(x){}}; bar[2];\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    testSame(\"Bar.prototype = {set 'a'(x){}}; bar['a'];\");                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ test(\"Bar.prototype = {set getA(x){}}; bar.getA;\",\n         \"Bar.prototype = {set a(x){}}; bar.a;\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testPrototypePropertiesAsObjLitKeys3$catena_2() {\n    try{ testSame(\"Bar.prototype = {set 2(x){}}; bar[2];\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ testSame(\"Bar.prototype = {set 'a'(x){}}; bar['a'];\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    test(\"Bar.prototype = {set getA(x){}}; bar.getA;\",\n         \"Bar.prototype = {set a(x){}}; bar.a;\");                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        },
        "com.google.javascript.jscomp.SimpleDefinitionFinderTest::testDefineNumber": {
            "file_path": "test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java",
            "check": [
                "Use pattern matching: .checkDefinitionsInJs",
                "Use pattern matching: .checkDefinitionsInJs",
                "Use pattern matching: .checkDefinitionsInJs",
                "Use pattern matching: .checkDefinitionsInJs",
                "Use pattern matching: .checkDefinitionsInJs",
                "Use pattern matching: .checkDefinitionsInJs",
                "Use pattern matching: .checkDefinitionsInJs",
                "Use pattern matching: .checkDefinitionsInJs",
                "Use pattern matching: .checkDefinitionsInJs"
            ],
            "Instance": "Begin: Pos(50, 10)\nEnd: Pos(92, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/SimpleDefinitionFinderTest.java\nName: testDefineNumber\nChilds: [StatementAssertion<Begin: Pos(51, 5), End: Pos(53, 49)>,\nStatementAssertion<Begin: Pos(55, 5), End: Pos(57, 49)>,\nStatementAssertion<Begin: Pos(59, 5), End: Pos(61, 54)>,\nStatementAssertion<Begin: Pos(64, 5), End: Pos(66, 35)>,\nStatementAssertion<Begin: Pos(68, 5), End: Pos(70, 55)>,\nStatementAssertion<Begin: Pos(72, 5), End: Pos(75, 56)>,\nStatementAssertion<Begin: Pos(78, 5), End: Pos(80, 60)>,\nStatementAssertion<Begin: Pos(82, 5), End: Pos(84, 60)>,\nStatementAssertion<Begin: Pos(86, 5), End: Pos(91, 56)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/SimpleDefinitionFinderTest.java",
            "name": "testDefineNumber",
            "begin": "Pos(50, 10)",
            "end": "Pos(92, 3)",
            "begin_line_no": 50,
            "end_line_no": 92,
            "child": [
                "Begin: Pos(51, 5)\nEnd: Pos(53, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(55, 5)\nEnd: Pos(57, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(59, 5)\nEnd: Pos(61, 54)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(64, 5)\nEnd: Pos(66, 35)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(68, 5)\nEnd: Pos(70, 55)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(72, 5)\nEnd: Pos(75, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(78, 5)\nEnd: Pos(80, 60)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(82, 5)\nEnd: Pos(84, 60)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(86, 5)\nEnd: Pos(91, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testDefineNumber$catena_0() throws Exception {\n    checkDefinitionsInJs(\n        \"var a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ checkDefinitionsInJs(\n        \"a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a.b = 1\",\n        ImmutableSet.of(\"DEF GETPROP a.b -> NUMBER\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // getelem expressions are invisible to the definition gatherer.\n    try{ checkDefinitionsInJs(\n        \"a[\\\"b\\\"] = 1\",\n        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"f().b = 1\",\n        ImmutableSet.of(\"DEF GETPROP null -> NUMBER\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"({a : 1}); o.a\",\n        ImmutableSet.of(\"DEF STRING null -> NUMBER\",\n                        \"USE GETPROP o.a -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Fix this.\n    try{ checkDefinitionsInJs(\n      \"({'a' : 1}); o['a']\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n      \"({1 : 1}); o[1]\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"var a = {b : 1}; a.b\",\n        ImmutableSet.of(\"DEF NAME a -> <null>\",\n                        \"DEF STRING null -> NUMBER\",\n                        \"USE NAME a -> [<null>]\",\n                        \"USE GETPROP a.b -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testDefineNumber$catena_1() throws Exception {\n    try{ checkDefinitionsInJs(\n        \"var a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    checkDefinitionsInJs(\n        \"a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ checkDefinitionsInJs(\n        \"a.b = 1\",\n        ImmutableSet.of(\"DEF GETPROP a.b -> NUMBER\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // getelem expressions are invisible to the definition gatherer.\n    try{ checkDefinitionsInJs(\n        \"a[\\\"b\\\"] = 1\",\n        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"f().b = 1\",\n        ImmutableSet.of(\"DEF GETPROP null -> NUMBER\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"({a : 1}); o.a\",\n        ImmutableSet.of(\"DEF STRING null -> NUMBER\",\n                        \"USE GETPROP o.a -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Fix this.\n    try{ checkDefinitionsInJs(\n      \"({'a' : 1}); o['a']\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n      \"({1 : 1}); o[1]\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"var a = {b : 1}; a.b\",\n        ImmutableSet.of(\"DEF NAME a -> <null>\",\n                        \"DEF STRING null -> NUMBER\",\n                        \"USE NAME a -> [<null>]\",\n                        \"USE GETPROP a.b -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testDefineNumber$catena_2() throws Exception {\n    try{ checkDefinitionsInJs(\n        \"var a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    checkDefinitionsInJs(\n        \"a.b = 1\",\n        ImmutableSet.of(\"DEF GETPROP a.b -> NUMBER\"));                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // getelem expressions are invisible to the definition gatherer.\n    try{ checkDefinitionsInJs(\n        \"a[\\\"b\\\"] = 1\",\n        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"f().b = 1\",\n        ImmutableSet.of(\"DEF GETPROP null -> NUMBER\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"({a : 1}); o.a\",\n        ImmutableSet.of(\"DEF STRING null -> NUMBER\",\n                        \"USE GETPROP o.a -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Fix this.\n    try{ checkDefinitionsInJs(\n      \"({'a' : 1}); o['a']\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n      \"({1 : 1}); o[1]\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"var a = {b : 1}; a.b\",\n        ImmutableSet.of(\"DEF NAME a -> <null>\",\n                        \"DEF STRING null -> NUMBER\",\n                        \"USE NAME a -> [<null>]\",\n                        \"USE GETPROP a.b -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testDefineNumber$catena_3() throws Exception {\n    try{ checkDefinitionsInJs(\n        \"var a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a.b = 1\",\n        ImmutableSet.of(\"DEF GETPROP a.b -> NUMBER\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // getelem expressions are invisible to the definition gatherer.\n    checkDefinitionsInJs(\n        \"a[\\\"b\\\"] = 1\",\n        ImmutableSet.<String>of());                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ checkDefinitionsInJs(\n        \"f().b = 1\",\n        ImmutableSet.of(\"DEF GETPROP null -> NUMBER\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"({a : 1}); o.a\",\n        ImmutableSet.of(\"DEF STRING null -> NUMBER\",\n                        \"USE GETPROP o.a -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Fix this.\n    try{ checkDefinitionsInJs(\n      \"({'a' : 1}); o['a']\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n      \"({1 : 1}); o[1]\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"var a = {b : 1}; a.b\",\n        ImmutableSet.of(\"DEF NAME a -> <null>\",\n                        \"DEF STRING null -> NUMBER\",\n                        \"USE NAME a -> [<null>]\",\n                        \"USE GETPROP a.b -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testDefineNumber$catena_4() throws Exception {\n    try{ checkDefinitionsInJs(\n        \"var a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a.b = 1\",\n        ImmutableSet.of(\"DEF GETPROP a.b -> NUMBER\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // getelem expressions are invisible to the definition gatherer.\n    try{ checkDefinitionsInJs(\n        \"a[\\\"b\\\"] = 1\",\n        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    checkDefinitionsInJs(\n        \"f().b = 1\",\n        ImmutableSet.of(\"DEF GETPROP null -> NUMBER\"));                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ checkDefinitionsInJs(\n        \"({a : 1}); o.a\",\n        ImmutableSet.of(\"DEF STRING null -> NUMBER\",\n                        \"USE GETPROP o.a -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Fix this.\n    try{ checkDefinitionsInJs(\n      \"({'a' : 1}); o['a']\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n      \"({1 : 1}); o[1]\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"var a = {b : 1}; a.b\",\n        ImmutableSet.of(\"DEF NAME a -> <null>\",\n                        \"DEF STRING null -> NUMBER\",\n                        \"USE NAME a -> [<null>]\",\n                        \"USE GETPROP a.b -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testDefineNumber$catena_5() throws Exception {\n    try{ checkDefinitionsInJs(\n        \"var a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a.b = 1\",\n        ImmutableSet.of(\"DEF GETPROP a.b -> NUMBER\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // getelem expressions are invisible to the definition gatherer.\n    try{ checkDefinitionsInJs(\n        \"a[\\\"b\\\"] = 1\",\n        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"f().b = 1\",\n        ImmutableSet.of(\"DEF GETPROP null -> NUMBER\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    checkDefinitionsInJs(\n        \"({a : 1}); o.a\",\n        ImmutableSet.of(\"DEF STRING null -> NUMBER\",\n                        \"USE GETPROP o.a -> [NUMBER]\"));                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // TODO(johnlenz): Fix this.\n    try{ checkDefinitionsInJs(\n      \"({'a' : 1}); o['a']\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n      \"({1 : 1}); o[1]\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"var a = {b : 1}; a.b\",\n        ImmutableSet.of(\"DEF NAME a -> <null>\",\n                        \"DEF STRING null -> NUMBER\",\n                        \"USE NAME a -> [<null>]\",\n                        \"USE GETPROP a.b -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testDefineNumber$catena_6() throws Exception {\n    try{ checkDefinitionsInJs(\n        \"var a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a.b = 1\",\n        ImmutableSet.of(\"DEF GETPROP a.b -> NUMBER\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // getelem expressions are invisible to the definition gatherer.\n    try{ checkDefinitionsInJs(\n        \"a[\\\"b\\\"] = 1\",\n        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"f().b = 1\",\n        ImmutableSet.of(\"DEF GETPROP null -> NUMBER\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"({a : 1}); o.a\",\n        ImmutableSet.of(\"DEF STRING null -> NUMBER\",\n                        \"USE GETPROP o.a -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Fix this.\n    checkDefinitionsInJs(\n      \"({'a' : 1}); o['a']\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ checkDefinitionsInJs(\n      \"({1 : 1}); o[1]\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"var a = {b : 1}; a.b\",\n        ImmutableSet.of(\"DEF NAME a -> <null>\",\n                        \"DEF STRING null -> NUMBER\",\n                        \"USE NAME a -> [<null>]\",\n                        \"USE GETPROP a.b -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testDefineNumber$catena_7() throws Exception {\n    try{ checkDefinitionsInJs(\n        \"var a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a.b = 1\",\n        ImmutableSet.of(\"DEF GETPROP a.b -> NUMBER\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // getelem expressions are invisible to the definition gatherer.\n    try{ checkDefinitionsInJs(\n        \"a[\\\"b\\\"] = 1\",\n        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"f().b = 1\",\n        ImmutableSet.of(\"DEF GETPROP null -> NUMBER\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"({a : 1}); o.a\",\n        ImmutableSet.of(\"DEF STRING null -> NUMBER\",\n                        \"USE GETPROP o.a -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Fix this.\n    try{ checkDefinitionsInJs(\n      \"({'a' : 1}); o['a']\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    checkDefinitionsInJs(\n      \"({1 : 1}); o[1]\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ checkDefinitionsInJs(\n        \"var a = {b : 1}; a.b\",\n        ImmutableSet.of(\"DEF NAME a -> <null>\",\n                        \"DEF STRING null -> NUMBER\",\n                        \"USE NAME a -> [<null>]\",\n                        \"USE GETPROP a.b -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testDefineNumber$catena_8() throws Exception {\n    try{ checkDefinitionsInJs(\n        \"var a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a.b = 1\",\n        ImmutableSet.of(\"DEF GETPROP a.b -> NUMBER\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // getelem expressions are invisible to the definition gatherer.\n    try{ checkDefinitionsInJs(\n        \"a[\\\"b\\\"] = 1\",\n        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"f().b = 1\",\n        ImmutableSet.of(\"DEF GETPROP null -> NUMBER\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"({a : 1}); o.a\",\n        ImmutableSet.of(\"DEF STRING null -> NUMBER\",\n                        \"USE GETPROP o.a -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Fix this.\n    try{ checkDefinitionsInJs(\n      \"({'a' : 1}); o['a']\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n      \"({1 : 1}); o[1]\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    checkDefinitionsInJs(\n        \"var a = {b : 1}; a.b\",\n        ImmutableSet.of(\"DEF NAME a -> <null>\",\n                        \"DEF STRING null -> NUMBER\",\n                        \"USE NAME a -> [<null>]\",\n                        \"USE GETPROP a.b -> [NUMBER]\"));                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testDefineNumber$catena_0() throws Exception {\n    checkDefinitionsInJs(\n        \"var a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ checkDefinitionsInJs(\n        \"a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a.b = 1\",\n        ImmutableSet.of(\"DEF GETPROP a.b -> NUMBER\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // getelem expressions are invisible to the definition gatherer.\n    try{ checkDefinitionsInJs(\n        \"a[\\\"b\\\"] = 1\",\n        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"f().b = 1\",\n        ImmutableSet.of(\"DEF GETPROP null -> NUMBER\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"({a : 1}); o.a\",\n        ImmutableSet.of(\"DEF STRING null -> NUMBER\",\n                        \"USE GETPROP o.a -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Fix this.\n    try{ checkDefinitionsInJs(\n      \"({'a' : 1}); o['a']\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n      \"({1 : 1}); o[1]\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"var a = {b : 1}; a.b\",\n        ImmutableSet.of(\"DEF NAME a -> <null>\",\n                        \"DEF STRING null -> NUMBER\",\n                        \"USE NAME a -> [<null>]\",\n                        \"USE GETPROP a.b -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testDefineNumber$catena_1() throws Exception {\n    try{ checkDefinitionsInJs(\n        \"var a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    checkDefinitionsInJs(\n        \"a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ checkDefinitionsInJs(\n        \"a.b = 1\",\n        ImmutableSet.of(\"DEF GETPROP a.b -> NUMBER\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // getelem expressions are invisible to the definition gatherer.\n    try{ checkDefinitionsInJs(\n        \"a[\\\"b\\\"] = 1\",\n        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"f().b = 1\",\n        ImmutableSet.of(\"DEF GETPROP null -> NUMBER\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"({a : 1}); o.a\",\n        ImmutableSet.of(\"DEF STRING null -> NUMBER\",\n                        \"USE GETPROP o.a -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Fix this.\n    try{ checkDefinitionsInJs(\n      \"({'a' : 1}); o['a']\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n      \"({1 : 1}); o[1]\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"var a = {b : 1}; a.b\",\n        ImmutableSet.of(\"DEF NAME a -> <null>\",\n                        \"DEF STRING null -> NUMBER\",\n                        \"USE NAME a -> [<null>]\",\n                        \"USE GETPROP a.b -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testDefineNumber$catena_2() throws Exception {\n    try{ checkDefinitionsInJs(\n        \"var a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    checkDefinitionsInJs(\n        \"a.b = 1\",\n        ImmutableSet.of(\"DEF GETPROP a.b -> NUMBER\"));                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // getelem expressions are invisible to the definition gatherer.\n    try{ checkDefinitionsInJs(\n        \"a[\\\"b\\\"] = 1\",\n        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"f().b = 1\",\n        ImmutableSet.of(\"DEF GETPROP null -> NUMBER\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"({a : 1}); o.a\",\n        ImmutableSet.of(\"DEF STRING null -> NUMBER\",\n                        \"USE GETPROP o.a -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Fix this.\n    try{ checkDefinitionsInJs(\n      \"({'a' : 1}); o['a']\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n      \"({1 : 1}); o[1]\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"var a = {b : 1}; a.b\",\n        ImmutableSet.of(\"DEF NAME a -> <null>\",\n                        \"DEF STRING null -> NUMBER\",\n                        \"USE NAME a -> [<null>]\",\n                        \"USE GETPROP a.b -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "3": "  public void testDefineNumber$catena_3() throws Exception {\n    try{ checkDefinitionsInJs(\n        \"var a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a.b = 1\",\n        ImmutableSet.of(\"DEF GETPROP a.b -> NUMBER\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // getelem expressions are invisible to the definition gatherer.\n    checkDefinitionsInJs(\n        \"a[\\\"b\\\"] = 1\",\n        ImmutableSet.<String>of());                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ checkDefinitionsInJs(\n        \"f().b = 1\",\n        ImmutableSet.of(\"DEF GETPROP null -> NUMBER\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"({a : 1}); o.a\",\n        ImmutableSet.of(\"DEF STRING null -> NUMBER\",\n                        \"USE GETPROP o.a -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Fix this.\n    try{ checkDefinitionsInJs(\n      \"({'a' : 1}); o['a']\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n      \"({1 : 1}); o[1]\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"var a = {b : 1}; a.b\",\n        ImmutableSet.of(\"DEF NAME a -> <null>\",\n                        \"DEF STRING null -> NUMBER\",\n                        \"USE NAME a -> [<null>]\",\n                        \"USE GETPROP a.b -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "4": "  public void testDefineNumber$catena_4() throws Exception {\n    try{ checkDefinitionsInJs(\n        \"var a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a.b = 1\",\n        ImmutableSet.of(\"DEF GETPROP a.b -> NUMBER\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // getelem expressions are invisible to the definition gatherer.\n    try{ checkDefinitionsInJs(\n        \"a[\\\"b\\\"] = 1\",\n        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    checkDefinitionsInJs(\n        \"f().b = 1\",\n        ImmutableSet.of(\"DEF GETPROP null -> NUMBER\"));                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ checkDefinitionsInJs(\n        \"({a : 1}); o.a\",\n        ImmutableSet.of(\"DEF STRING null -> NUMBER\",\n                        \"USE GETPROP o.a -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Fix this.\n    try{ checkDefinitionsInJs(\n      \"({'a' : 1}); o['a']\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n      \"({1 : 1}); o[1]\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"var a = {b : 1}; a.b\",\n        ImmutableSet.of(\"DEF NAME a -> <null>\",\n                        \"DEF STRING null -> NUMBER\",\n                        \"USE NAME a -> [<null>]\",\n                        \"USE GETPROP a.b -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "5": "  public void testDefineNumber$catena_5() throws Exception {\n    try{ checkDefinitionsInJs(\n        \"var a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a.b = 1\",\n        ImmutableSet.of(\"DEF GETPROP a.b -> NUMBER\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // getelem expressions are invisible to the definition gatherer.\n    try{ checkDefinitionsInJs(\n        \"a[\\\"b\\\"] = 1\",\n        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"f().b = 1\",\n        ImmutableSet.of(\"DEF GETPROP null -> NUMBER\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    checkDefinitionsInJs(\n        \"({a : 1}); o.a\",\n        ImmutableSet.of(\"DEF STRING null -> NUMBER\",\n                        \"USE GETPROP o.a -> [NUMBER]\"));                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // TODO(johnlenz): Fix this.\n    try{ checkDefinitionsInJs(\n      \"({'a' : 1}); o['a']\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n      \"({1 : 1}); o[1]\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"var a = {b : 1}; a.b\",\n        ImmutableSet.of(\"DEF NAME a -> <null>\",\n                        \"DEF STRING null -> NUMBER\",\n                        \"USE NAME a -> [<null>]\",\n                        \"USE GETPROP a.b -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "6": "  public void testDefineNumber$catena_6() throws Exception {\n    try{ checkDefinitionsInJs(\n        \"var a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a.b = 1\",\n        ImmutableSet.of(\"DEF GETPROP a.b -> NUMBER\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // getelem expressions are invisible to the definition gatherer.\n    try{ checkDefinitionsInJs(\n        \"a[\\\"b\\\"] = 1\",\n        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"f().b = 1\",\n        ImmutableSet.of(\"DEF GETPROP null -> NUMBER\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"({a : 1}); o.a\",\n        ImmutableSet.of(\"DEF STRING null -> NUMBER\",\n                        \"USE GETPROP o.a -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Fix this.\n    checkDefinitionsInJs(\n      \"({'a' : 1}); o['a']\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ checkDefinitionsInJs(\n      \"({1 : 1}); o[1]\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"var a = {b : 1}; a.b\",\n        ImmutableSet.of(\"DEF NAME a -> <null>\",\n                        \"DEF STRING null -> NUMBER\",\n                        \"USE NAME a -> [<null>]\",\n                        \"USE GETPROP a.b -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "7": "  public void testDefineNumber$catena_7() throws Exception {\n    try{ checkDefinitionsInJs(\n        \"var a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a.b = 1\",\n        ImmutableSet.of(\"DEF GETPROP a.b -> NUMBER\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // getelem expressions are invisible to the definition gatherer.\n    try{ checkDefinitionsInJs(\n        \"a[\\\"b\\\"] = 1\",\n        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"f().b = 1\",\n        ImmutableSet.of(\"DEF GETPROP null -> NUMBER\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"({a : 1}); o.a\",\n        ImmutableSet.of(\"DEF STRING null -> NUMBER\",\n                        \"USE GETPROP o.a -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Fix this.\n    try{ checkDefinitionsInJs(\n      \"({'a' : 1}); o['a']\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    checkDefinitionsInJs(\n      \"({1 : 1}); o[1]\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ checkDefinitionsInJs(\n        \"var a = {b : 1}; a.b\",\n        ImmutableSet.of(\"DEF NAME a -> <null>\",\n                        \"DEF STRING null -> NUMBER\",\n                        \"USE NAME a -> [<null>]\",\n                        \"USE GETPROP a.b -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "8": "  public void testDefineNumber$catena_8() throws Exception {\n    try{ checkDefinitionsInJs(\n        \"var a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a.b = 1\",\n        ImmutableSet.of(\"DEF GETPROP a.b -> NUMBER\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // getelem expressions are invisible to the definition gatherer.\n    try{ checkDefinitionsInJs(\n        \"a[\\\"b\\\"] = 1\",\n        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"f().b = 1\",\n        ImmutableSet.of(\"DEF GETPROP null -> NUMBER\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"({a : 1}); o.a\",\n        ImmutableSet.of(\"DEF STRING null -> NUMBER\",\n                        \"USE GETPROP o.a -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Fix this.\n    try{ checkDefinitionsInJs(\n      \"({'a' : 1}); o['a']\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n      \"({1 : 1}); o[1]\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    checkDefinitionsInJs(\n        \"var a = {b : 1}; a.b\",\n        ImmutableSet.of(\"DEF NAME a -> <null>\",\n                        \"DEF STRING null -> NUMBER\",\n                        \"USE NAME a -> [<null>]\",\n                        \"USE GETPROP a.b -> [NUMBER]\"));                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        },
        "com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral6": {
            "file_path": "test/com/google/javascript/jscomp/parsing/IRFactoryTest.java",
            "check": [
                "Use pattern matching: .testNewParser"
            ],
            "Instance": "Begin: Pos(264, 10)\nEnd: Pos(271, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/parsing/IRFactoryTest.java\nName: testObjectLiteral6\nChilds: [StatementAssertion<Begin: Pos(265, 5), End: Pos(270, 34)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/parsing/IRFactoryTest.java",
            "name": "testObjectLiteral6",
            "begin": "Pos(264, 10)",
            "end": "Pos(271, 3)",
            "begin_line_no": 264,
            "end_line_no": 271,
            "child": [
                "Begin: Pos(265, 5)\nEnd: Pos(270, 34)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral7": {
            "file_path": "test/com/google/javascript/jscomp/parsing/IRFactoryTest.java",
            "check": [
                "Use pattern matching: .testNewParser"
            ],
            "Instance": "Begin: Pos(273, 10)\nEnd: Pos(285, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/parsing/IRFactoryTest.java\nName: testObjectLiteral7\nChilds: [StatementAssertion<Begin: Pos(276, 5), End: Pos(284, 39)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/parsing/IRFactoryTest.java",
            "name": "testObjectLiteral7",
            "begin": "Pos(273, 10)",
            "end": "Pos(285, 3)",
            "begin_line_no": 273,
            "end_line_no": 285,
            "child": [
                "Begin: Pos(276, 5)\nEnd: Pos(284, 39)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral8": {
            "file_path": "test/com/google/javascript/jscomp/parsing/IRFactoryTest.java",
            "check": [
                "Use pattern matching: .testNewParser"
            ],
            "Instance": "Begin: Pos(287, 10)\nEnd: Pos(300, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/parsing/IRFactoryTest.java\nName: testObjectLiteral8\nChilds: [StatementAssertion<Begin: Pos(290, 5), End: Pos(299, 39)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/parsing/IRFactoryTest.java",
            "name": "testObjectLiteral8",
            "begin": "Pos(287, 10)",
            "end": "Pos(300, 3)",
            "begin_line_no": 287,
            "end_line_no": 300,
            "child": [
                "Begin: Pos(290, 5)\nEnd: Pos(299, 39)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "com.google.javascript.jscomp.parsing.ParserTest::testObjectLiteralDoc1": {
            "file_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
            "Instance": "Begin: Pos(733, 10)\nEnd: Pos(742, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/parsing/ParserTest.java\nName: testObjectLiteralDoc1\nChilds: [StatementAssertion<Begin: Pos(737, 5), End: Pos(737, 55)>,\nStatementAssertion<Begin: Pos(740, 5), End: Pos(740, 49)>,\nStatementAssertion<Begin: Pos(741, 5), End: Pos(741, 41)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/parsing/ParserTest.java",
            "name": "testObjectLiteralDoc1",
            "begin": "Pos(733, 10)",
            "end": "Pos(742, 3)",
            "begin_line_no": 733,
            "end_line_no": 742,
            "child": [
                "Begin: Pos(737, 5)\nEnd: Pos(737, 55)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(740, 5)\nEnd: Pos(740, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(741, 5)\nEnd: Pos(741, 41)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testObjectLiteralDoc1$catena_0() {\n    Node n = parse(\"var x = {/** @type {number} */ 1: 2};\");\n\n    Node objectLit = n.getFirstChild().getFirstChild().getFirstChild();\n    assertEquals(Token.OBJECTLIT, objectLit.getType());                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n    Node number = objectLit.getFirstChild();\n    try{ assertEquals(Token.STRING, number.getType());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertNotNull(number.getJSDocInfo());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testObjectLiteralDoc1$catena_1() {\n    Node n = parse(\"var x = {/** @type {number} */ 1: 2};\");\n\n    Node objectLit = n.getFirstChild().getFirstChild().getFirstChild();\n    try{ assertEquals(Token.OBJECTLIT, objectLit.getType());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    Node number = objectLit.getFirstChild();\n    assertEquals(Token.STRING, number.getType());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertNotNull(number.getJSDocInfo());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testObjectLiteralDoc1$catena_2() {\n    Node n = parse(\"var x = {/** @type {number} */ 1: 2};\");\n\n    Node objectLit = n.getFirstChild().getFirstChild().getFirstChild();\n    try{ assertEquals(Token.OBJECTLIT, objectLit.getType());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    Node number = objectLit.getFirstChild();\n    try{ assertEquals(Token.STRING, number.getType());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertNotNull(number.getJSDocInfo());                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testObjectLiteralDoc1$catena_0() {\n    Node n = parse(\"var x = {/** @type {number} */ 1: 2};\");\n\n    Node objectLit = n.getFirstChild().getFirstChild().getFirstChild();\n    assertEquals(Token.OBJECTLIT, objectLit.getType());                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n    Node number = objectLit.getFirstChild();\n    try{ assertEquals(Token.STRING, number.getType());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertNotNull(number.getJSDocInfo());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testObjectLiteralDoc1$catena_1() {\n    Node n = parse(\"var x = {/** @type {number} */ 1: 2};\");\n\n    Node objectLit = n.getFirstChild().getFirstChild().getFirstChild();\n    try{ assertEquals(Token.OBJECTLIT, objectLit.getType());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    Node number = objectLit.getFirstChild();\n    assertEquals(Token.STRING, number.getType());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertNotNull(number.getJSDocInfo());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testObjectLiteralDoc1$catena_2() {\n    Node n = parse(\"var x = {/** @type {number} */ 1: 2};\");\n\n    Node objectLit = n.getFirstChild().getFirstChild().getFirstChild();\n    try{ assertEquals(Token.OBJECTLIT, objectLit.getType());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    Node number = objectLit.getFirstChild();\n    try{ assertEquals(Token.STRING, number.getType());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertNotNull(number.getJSDocInfo());                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        }
    },
    "10000000000000000": {
        "failing_tests": [
            "com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_2",
            "com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_3"
        ]
    }
}