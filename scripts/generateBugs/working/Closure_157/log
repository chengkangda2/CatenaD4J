---
Begin generate bug_id: Closure_157
num_of_hunks: 17
NOTICE: may not contains full fix patterns for hunks are too much (17 hunks)
timeout for running: 3600
use working dir: ./working/data/Closure_157
Try to checkout Closure_157
build dir: ['./working/data/Closure_157/build/classes', './working/data/Closure_157/build/test']
init FileManager
trace file: src/com/google/javascript/jscomp/CodeGenerator.java
trace file: src/com/google/javascript/jscomp/RenamePrototypes.java
trace file: src/com/google/javascript/jscomp/parsing/IRFactory.java
trying to replace old failing tests
edit: replace from 1125 range 7 at test/com/google/javascript/jscomp/CodePrinterTest.java
to
  public void testObjectLit2$catena_0() {
    assertPrint("var x={1:1}", "var x={1:1}");                                                              /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertPrint("var x={'1':1}", "var x={1:1}");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPrint("var x={'1.0':1}", "var x={\"1.0\":1}");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPrint("var x={1.5:1}", "var x={\"1.5\":1}");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

  }   public void testObjectLit2$catena_1() {
    try{ assertPrint("var x={1:1}", "var x={1:1}");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    assertPrint("var x={'1':1}", "var x={1:1}");                                                            /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertPrint("var x={'1.0':1}", "var x={\"1.0\":1}");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPrint("var x={1.5:1}", "var x={\"1.5\":1}");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

  }   public void testObjectLit2$catena_2() {
    try{ assertPrint("var x={1:1}", "var x={1:1}");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPrint("var x={'1':1}", "var x={1:1}");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    assertPrint("var x={'1.0':1}", "var x={\"1.0\":1}");                                                    /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertPrint("var x={1.5:1}", "var x={\"1.5\":1}");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

  }   public void testObjectLit2$catena_3() {
    try{ assertPrint("var x={1:1}", "var x={1:1}");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPrint("var x={'1':1}", "var x={1:1}");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPrint("var x={'1.0':1}", "var x={\"1.0\":1}");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    assertPrint("var x={1.5:1}", "var x={\"1.5\":1}");                                                      /***** ORIGINAL ASSERTION IS HERE *****/

  }
edit: replace from 1133 range 12 at test/com/google/javascript/jscomp/CodePrinterTest.java
to
  public void testObjectLit3$catena_0() {
    assertPrint("var x={3E9:1}",
                "var x={3E9:1}");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertPrint("var x={'3000000000':1}", // More than 31 bits
                "var x={3E9:1}");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPrint("var x={'3000000001':1}",
                "var x={3000000001:1}");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPrint("var x={'6000000001':1}",  // More than 32 bits
                "var x={6000000001:1}");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPrint("var x={\"12345678901234567\":1}",  // More than 53 bits
                "var x={\"12345678901234567\":1}");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testObjectLit3$catena_1() {
    try{ assertPrint("var x={3E9:1}",
                "var x={3E9:1}");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    assertPrint("var x={'3000000000':1}", // More than 31 bits
                "var x={3E9:1}");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertPrint("var x={'3000000001':1}",
                "var x={3000000001:1}");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPrint("var x={'6000000001':1}",  // More than 32 bits
                "var x={6000000001:1}");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPrint("var x={\"12345678901234567\":1}",  // More than 53 bits
                "var x={\"12345678901234567\":1}");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testObjectLit3$catena_2() {
    try{ assertPrint("var x={3E9:1}",
                "var x={3E9:1}");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPrint("var x={'3000000000':1}", // More than 31 bits
                "var x={3E9:1}");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    assertPrint("var x={'3000000001':1}",
                "var x={3000000001:1}");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertPrint("var x={'6000000001':1}",  // More than 32 bits
                "var x={6000000001:1}");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPrint("var x={\"12345678901234567\":1}",  // More than 53 bits
                "var x={\"12345678901234567\":1}");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testObjectLit3$catena_3() {
    try{ assertPrint("var x={3E9:1}",
                "var x={3E9:1}");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPrint("var x={'3000000000':1}", // More than 31 bits
                "var x={3E9:1}");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPrint("var x={'3000000001':1}",
                "var x={3000000001:1}");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    assertPrint("var x={'6000000001':1}",  // More than 32 bits
                "var x={6000000001:1}");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertPrint("var x={\"12345678901234567\":1}",  // More than 53 bits
                "var x={\"12345678901234567\":1}");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testObjectLit3$catena_4() {
    try{ assertPrint("var x={3E9:1}",
                "var x={3E9:1}");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPrint("var x={'3000000000':1}", // More than 31 bits
                "var x={3E9:1}");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPrint("var x={'3000000001':1}",
                "var x={3000000001:1}");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPrint("var x={'6000000001':1}",  // More than 32 bits
                "var x={6000000001:1}");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    assertPrint("var x={\"12345678901234567\":1}",  // More than 53 bits
                "var x={\"12345678901234567\":1}");                                                         /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 1146 range 19 at test/com/google/javascript/jscomp/CodePrinterTest.java
to
  public void testGetter$catena_0() {
    assertPrint("var x = {}", "var x={}");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertPrint("var x = {get a() {return 1}}", "var x={get a(){return 1}}");                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPrint(
      "var x = {get a() {}, get b(){}}",
      "var x={get a(){},get b(){}}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint(
      "var x = {get 'a'() {return 1}}",
      "var x={get \"a\"(){return 1}}");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint(
      "var x = {get 1() {return 1}}",
      "var x={get 1(){return 1}}");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint(
      "var x = {get \"()\"() {return 1}}",
      "var x={get \"()\"(){return 1}}");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testGetter$catena_1() {
    try{ assertPrint("var x = {}", "var x={}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    assertPrint("var x = {get a() {return 1}}", "var x={get a(){return 1}}");                               /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertPrint(
      "var x = {get a() {}, get b(){}}",
      "var x={get a(){},get b(){}}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint(
      "var x = {get 'a'() {return 1}}",
      "var x={get \"a\"(){return 1}}");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint(
      "var x = {get 1() {return 1}}",
      "var x={get 1(){return 1}}");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint(
      "var x = {get \"()\"() {return 1}}",
      "var x={get \"()\"(){return 1}}");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testGetter$catena_2() {
    try{ assertPrint("var x = {}", "var x={}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPrint("var x = {get a() {return 1}}", "var x={get a(){return 1}}");                          }catch(Throwable __SHOULD_BE_IGNORED){}
    assertPrint(
      "var x = {get a() {}, get b(){}}",
      "var x={get a(){},get b(){}}");                                                                       /***** ORIGINAL ASSERTION IS HERE *****/

    try{ assertPrint(
      "var x = {get 'a'() {return 1}}",
      "var x={get \"a\"(){return 1}}");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint(
      "var x = {get 1() {return 1}}",
      "var x={get 1(){return 1}}");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint(
      "var x = {get \"()\"() {return 1}}",
      "var x={get \"()\"(){return 1}}");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testGetter$catena_3() {
    try{ assertPrint("var x = {}", "var x={}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPrint("var x = {get a() {return 1}}", "var x={get a(){return 1}}");                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPrint(
      "var x = {get a() {}, get b(){}}",
      "var x={get a(){},get b(){}}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    assertPrint(
      "var x = {get 'a'() {return 1}}",
      "var x={get \"a\"(){return 1}}");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/

    try{ assertPrint(
      "var x = {get 1() {return 1}}",
      "var x={get 1(){return 1}}");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint(
      "var x = {get \"()\"() {return 1}}",
      "var x={get \"()\"(){return 1}}");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testGetter$catena_4() {
    try{ assertPrint("var x = {}", "var x={}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPrint("var x = {get a() {return 1}}", "var x={get a(){return 1}}");                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPrint(
      "var x = {get a() {}, get b(){}}",
      "var x={get a(){},get b(){}}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint(
      "var x = {get 'a'() {return 1}}",
      "var x={get \"a\"(){return 1}}");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    assertPrint(
      "var x = {get 1() {return 1}}",
      "var x={get 1(){return 1}}");                                                                         /***** ORIGINAL ASSERTION IS HERE *****/

    try{ assertPrint(
      "var x = {get \"()\"() {return 1}}",
      "var x={get \"()\"(){return 1}}");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testGetter$catena_5() {
    try{ assertPrint("var x = {}", "var x={}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPrint("var x = {get a() {return 1}}", "var x={get a(){return 1}}");                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPrint(
      "var x = {get a() {}, get b(){}}",
      "var x={get a(){},get b(){}}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint(
      "var x = {get 'a'() {return 1}}",
      "var x={get \"a\"(){return 1}}");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint(
      "var x = {get 1() {return 1}}",
      "var x={get 1(){return 1}}");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

    assertPrint(
      "var x = {get \"()\"() {return 1}}",
      "var x={get \"()\"(){return 1}}");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 1166 range 18 at test/com/google/javascript/jscomp/CodePrinterTest.java
to
  public void testSetter$catena_0() {
    assertPrint("var x = {}", "var x={}");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertPrint(
       "var x = {set a(y) {return 1}}",
       "var x={set a(y){return 1}}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint(
      "var x = {get 'a'() {return 1}}",
      "var x={get \"a\"(){return 1}}");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint(
      "var x = {set 1(y) {return 1}}",
      "var x={set 1(y){return 1}}");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint(
      "var x = {set \"(x)\"(y) {return 1}}",
      "var x={set \"(x)\"(y){return 1}}");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testSetter$catena_1() {
    try{ assertPrint("var x = {}", "var x={}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    assertPrint(
       "var x = {set a(y) {return 1}}",
       "var x={set a(y){return 1}}");                                                                       /***** ORIGINAL ASSERTION IS HERE *****/

    try{ assertPrint(
      "var x = {get 'a'() {return 1}}",
      "var x={get \"a\"(){return 1}}");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint(
      "var x = {set 1(y) {return 1}}",
      "var x={set 1(y){return 1}}");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint(
      "var x = {set \"(x)\"(y) {return 1}}",
      "var x={set \"(x)\"(y){return 1}}");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testSetter$catena_2() {
    try{ assertPrint("var x = {}", "var x={}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPrint(
       "var x = {set a(y) {return 1}}",
       "var x={set a(y){return 1}}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    assertPrint(
      "var x = {get 'a'() {return 1}}",
      "var x={get \"a\"(){return 1}}");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/

    try{ assertPrint(
      "var x = {set 1(y) {return 1}}",
      "var x={set 1(y){return 1}}");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint(
      "var x = {set \"(x)\"(y) {return 1}}",
      "var x={set \"(x)\"(y){return 1}}");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testSetter$catena_3() {
    try{ assertPrint("var x = {}", "var x={}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPrint(
       "var x = {set a(y) {return 1}}",
       "var x={set a(y){return 1}}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint(
      "var x = {get 'a'() {return 1}}",
      "var x={get \"a\"(){return 1}}");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    assertPrint(
      "var x = {set 1(y) {return 1}}",
      "var x={set 1(y){return 1}}");                                                                        /***** ORIGINAL ASSERTION IS HERE *****/

    try{ assertPrint(
      "var x = {set \"(x)\"(y) {return 1}}",
      "var x={set \"(x)\"(y){return 1}}");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testSetter$catena_4() {
    try{ assertPrint("var x = {}", "var x={}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPrint(
       "var x = {set a(y) {return 1}}",
       "var x={set a(y){return 1}}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint(
      "var x = {get 'a'() {return 1}}",
      "var x={get \"a\"(){return 1}}");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint(
      "var x = {set 1(y) {return 1}}",
      "var x={set 1(y){return 1}}");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

    assertPrint(
      "var x = {set \"(x)\"(y) {return 1}}",
      "var x={set \"(x)\"(y){return 1}}");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 40 range 54 at test/com/google/javascript/jscomp/FunctionNamesTest.java
to
  public void testFunctionsNamesAndIds$catena_0() {
    final String jsSource =
        "goog.widget = function(str) {\n" +
        "  this.member_fn = function() {};\n" +
        "  local_fn = function() {};\n" +
        "  (function(a){})(1);\n" +
        "}\n" +
        "function foo() {\n" +
        "  function bar() {}\n" +
        "}\n" +
        "literal = {f1 : function(){}, f2 : function(){}};\n" +
        "goog.array.map(arr, function named(){});\n" +
        "goog.array.map(arr, function(){});\n" +
        "named_twice = function quax(){};\n" +
        "recliteral = {l1 : {l2 : function(){}}};\n" +
        "namedliteral = {n1 : function litnamed(){}};\n" +
        "namedrecliteral = {n1 : {n2 : function reclitnamed(){}}};\n" +
        "numliteral = {1 : function(){}};\n" +
        "recnumliteral = {1 : {a : function(){}}};\n";

    testSame(jsSource);                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/

    final Map<Integer, String> idNameMap = Maps.newLinkedHashMap();
    int count = 0;
    for (Node f : functionNames.getFunctionNodeList()) {
      int id = functionNames.getFunctionId(f);
      String name = functionNames.getFunctionName(f);
      idNameMap.put(id, name);
      count++;
    }

    try{ assertEquals("Unexpected number of functions", 16, count);                                         }catch(Throwable __SHOULD_BE_IGNORED){}

    final Map<Integer, String> expectedMap = Maps.newLinkedHashMap();

    expectedMap.put(0, "goog.widget.member_fn");
    expectedMap.put(1, "goog.widget::local_fn");
    expectedMap.put(2, "goog.widget::<anonymous>");
    expectedMap.put(3, "goog.widget");
    expectedMap.put(4, "foo::bar");
    expectedMap.put(5, "foo");
    expectedMap.put(6, "literal.f1");
    expectedMap.put(7, "literal.f2");
    expectedMap.put(8, "named");
    expectedMap.put(9, "<anonymous>");
    expectedMap.put(10, "quax");
    expectedMap.put(11, "recliteral.l1.l2");
    expectedMap.put(12, "litnamed");
    expectedMap.put(13, "reclitnamed");
    expectedMap.put(14, "numliteral.__2");
    expectedMap.put(15, "recnumliteral.__3.a");
    try{ assertEquals("Function id/name mismatch",
                 expectedMap, idNameMap);                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFunctionsNamesAndIds$catena_1() {
    final String jsSource =
        "goog.widget = function(str) {\n" +
        "  this.member_fn = function() {};\n" +
        "  local_fn = function() {};\n" +
        "  (function(a){})(1);\n" +
        "}\n" +
        "function foo() {\n" +
        "  function bar() {}\n" +
        "}\n" +
        "literal = {f1 : function(){}, f2 : function(){}};\n" +
        "goog.array.map(arr, function named(){});\n" +
        "goog.array.map(arr, function(){});\n" +
        "named_twice = function quax(){};\n" +
        "recliteral = {l1 : {l2 : function(){}}};\n" +
        "namedliteral = {n1 : function litnamed(){}};\n" +
        "namedrecliteral = {n1 : {n2 : function reclitnamed(){}}};\n" +
        "numliteral = {1 : function(){}};\n" +
        "recnumliteral = {1 : {a : function(){}}};\n";

    try{ testSame(jsSource);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    final Map<Integer, String> idNameMap = Maps.newLinkedHashMap();
    int count = 0;
    for (Node f : functionNames.getFunctionNodeList()) {
      int id = functionNames.getFunctionId(f);
      String name = functionNames.getFunctionName(f);
      idNameMap.put(id, name);
      count++;
    }

    assertEquals("Unexpected number of functions", 16, count);                                              /***** ORIGINAL ASSERTION IS HERE *****/

    final Map<Integer, String> expectedMap = Maps.newLinkedHashMap();

    expectedMap.put(0, "goog.widget.member_fn");
    expectedMap.put(1, "goog.widget::local_fn");
    expectedMap.put(2, "goog.widget::<anonymous>");
    expectedMap.put(3, "goog.widget");
    expectedMap.put(4, "foo::bar");
    expectedMap.put(5, "foo");
    expectedMap.put(6, "literal.f1");
    expectedMap.put(7, "literal.f2");
    expectedMap.put(8, "named");
    expectedMap.put(9, "<anonymous>");
    expectedMap.put(10, "quax");
    expectedMap.put(11, "recliteral.l1.l2");
    expectedMap.put(12, "litnamed");
    expectedMap.put(13, "reclitnamed");
    expectedMap.put(14, "numliteral.__2");
    expectedMap.put(15, "recnumliteral.__3.a");
    try{ assertEquals("Function id/name mismatch",
                 expectedMap, idNameMap);                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFunctionsNamesAndIds$catena_2() {
    final String jsSource =
        "goog.widget = function(str) {\n" +
        "  this.member_fn = function() {};\n" +
        "  local_fn = function() {};\n" +
        "  (function(a){})(1);\n" +
        "}\n" +
        "function foo() {\n" +
        "  function bar() {}\n" +
        "}\n" +
        "literal = {f1 : function(){}, f2 : function(){}};\n" +
        "goog.array.map(arr, function named(){});\n" +
        "goog.array.map(arr, function(){});\n" +
        "named_twice = function quax(){};\n" +
        "recliteral = {l1 : {l2 : function(){}}};\n" +
        "namedliteral = {n1 : function litnamed(){}};\n" +
        "namedrecliteral = {n1 : {n2 : function reclitnamed(){}}};\n" +
        "numliteral = {1 : function(){}};\n" +
        "recnumliteral = {1 : {a : function(){}}};\n";

    try{ testSame(jsSource);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    final Map<Integer, String> idNameMap = Maps.newLinkedHashMap();
    int count = 0;
    for (Node f : functionNames.getFunctionNodeList()) {
      int id = functionNames.getFunctionId(f);
      String name = functionNames.getFunctionName(f);
      idNameMap.put(id, name);
      count++;
    }

    try{ assertEquals("Unexpected number of functions", 16, count);                                         }catch(Throwable __SHOULD_BE_IGNORED){}

    final Map<Integer, String> expectedMap = Maps.newLinkedHashMap();

    expectedMap.put(0, "goog.widget.member_fn");
    expectedMap.put(1, "goog.widget::local_fn");
    expectedMap.put(2, "goog.widget::<anonymous>");
    expectedMap.put(3, "goog.widget");
    expectedMap.put(4, "foo::bar");
    expectedMap.put(5, "foo");
    expectedMap.put(6, "literal.f1");
    expectedMap.put(7, "literal.f2");
    expectedMap.put(8, "named");
    expectedMap.put(9, "<anonymous>");
    expectedMap.put(10, "quax");
    expectedMap.put(11, "recliteral.l1.l2");
    expectedMap.put(12, "litnamed");
    expectedMap.put(13, "reclitnamed");
    expectedMap.put(14, "numliteral.__2");
    expectedMap.put(15, "recnumliteral.__3.a");
    assertEquals("Function id/name mismatch",
                 expectedMap, idNameMap);                                                                   /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 70 range 8 at test/com/google/javascript/jscomp/RenamePropertiesTest.java
to
  public void testPrototypePropertiesAsObjLitKeys2$catena_0() {
    testSame("Bar.prototype = {get 2(){}}; bar[2];");                                                       /***** ORIGINAL ASSERTION IS HERE *****/

    try{ testSame("Bar.prototype = {get 'a'(){}}; bar['a'];");                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("Bar.prototype = {get getA(){}}; bar.getA;",
         "Bar.prototype = {get a(){}}; bar.a;");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testPrototypePropertiesAsObjLitKeys2$catena_1() {
    try{ testSame("Bar.prototype = {get 2(){}}; bar[2];");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    testSame("Bar.prototype = {get 'a'(){}}; bar['a'];");                                                   /***** ORIGINAL ASSERTION IS HERE *****/

    try{ test("Bar.prototype = {get getA(){}}; bar.getA;",
         "Bar.prototype = {get a(){}}; bar.a;");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testPrototypePropertiesAsObjLitKeys2$catena_2() {
    try{ testSame("Bar.prototype = {get 2(){}}; bar[2];");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ testSame("Bar.prototype = {get 'a'(){}}; bar['a'];");                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    test("Bar.prototype = {get getA(){}}; bar.getA;",
         "Bar.prototype = {get a(){}}; bar.a;");                                                            /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 79 range 8 at test/com/google/javascript/jscomp/RenamePropertiesTest.java
to
  public void testPrototypePropertiesAsObjLitKeys3$catena_0() {
    testSame("Bar.prototype = {set 2(x){}}; bar[2];");                                                      /***** ORIGINAL ASSERTION IS HERE *****/

    try{ testSame("Bar.prototype = {set 'a'(x){}}; bar['a'];");                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("Bar.prototype = {set getA(x){}}; bar.getA;",
         "Bar.prototype = {set a(x){}}; bar.a;");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testPrototypePropertiesAsObjLitKeys3$catena_1() {
    try{ testSame("Bar.prototype = {set 2(x){}}; bar[2];");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    testSame("Bar.prototype = {set 'a'(x){}}; bar['a'];");                                                  /***** ORIGINAL ASSERTION IS HERE *****/

    try{ test("Bar.prototype = {set getA(x){}}; bar.getA;",
         "Bar.prototype = {set a(x){}}; bar.a;");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testPrototypePropertiesAsObjLitKeys3$catena_2() {
    try{ testSame("Bar.prototype = {set 2(x){}}; bar[2];");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ testSame("Bar.prototype = {set 'a'(x){}}; bar['a'];");                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    test("Bar.prototype = {set getA(x){}}; bar.getA;",
         "Bar.prototype = {set a(x){}}; bar.a;");                                                           /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 50 range 43 at test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java
to
  public void testDefineNumber$catena_0() throws Exception {
    checkDefinitionsInJs(
        "var a = 1",
        ImmutableSet.of("DEF NAME a -> NUMBER"));                                                           /***** ORIGINAL ASSERTION IS HERE *****/

    try{ checkDefinitionsInJs(
        "a = 1",
        ImmutableSet.of("DEF NAME a -> NUMBER"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "a.b = 1",
        ImmutableSet.of("DEF GETPROP a.b -> NUMBER"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    // getelem expressions are invisible to the definition gatherer.
    try{ checkDefinitionsInJs(
        "a[\"b\"] = 1",
        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "f().b = 1",
        ImmutableSet.of("DEF GETPROP null -> NUMBER"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "({a : 1}); o.a",
        ImmutableSet.of("DEF STRING null -> NUMBER",
                        "USE GETPROP o.a -> [NUMBER]"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(johnlenz): Fix this.
    try{ checkDefinitionsInJs(
      "({'a' : 1}); o['a']",
      ImmutableSet.<String>of("DEF STRING null -> NUMBER"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
      "({1 : 1}); o[1]",
      ImmutableSet.<String>of("DEF STRING null -> NUMBER"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "var a = {b : 1}; a.b",
        ImmutableSet.of("DEF NAME a -> <null>",
                        "DEF STRING null -> NUMBER",
                        "USE NAME a -> [<null>]",
                        "USE GETPROP a.b -> [NUMBER]"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDefineNumber$catena_1() throws Exception {
    try{ checkDefinitionsInJs(
        "var a = 1",
        ImmutableSet.of("DEF NAME a -> NUMBER"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}

    checkDefinitionsInJs(
        "a = 1",
        ImmutableSet.of("DEF NAME a -> NUMBER"));                                                           /***** ORIGINAL ASSERTION IS HERE *****/

    try{ checkDefinitionsInJs(
        "a.b = 1",
        ImmutableSet.of("DEF GETPROP a.b -> NUMBER"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    // getelem expressions are invisible to the definition gatherer.
    try{ checkDefinitionsInJs(
        "a[\"b\"] = 1",
        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "f().b = 1",
        ImmutableSet.of("DEF GETPROP null -> NUMBER"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "({a : 1}); o.a",
        ImmutableSet.of("DEF STRING null -> NUMBER",
                        "USE GETPROP o.a -> [NUMBER]"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(johnlenz): Fix this.
    try{ checkDefinitionsInJs(
      "({'a' : 1}); o['a']",
      ImmutableSet.<String>of("DEF STRING null -> NUMBER"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
      "({1 : 1}); o[1]",
      ImmutableSet.<String>of("DEF STRING null -> NUMBER"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "var a = {b : 1}; a.b",
        ImmutableSet.of("DEF NAME a -> <null>",
                        "DEF STRING null -> NUMBER",
                        "USE NAME a -> [<null>]",
                        "USE GETPROP a.b -> [NUMBER]"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDefineNumber$catena_2() throws Exception {
    try{ checkDefinitionsInJs(
        "var a = 1",
        ImmutableSet.of("DEF NAME a -> NUMBER"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "a = 1",
        ImmutableSet.of("DEF NAME a -> NUMBER"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}

    checkDefinitionsInJs(
        "a.b = 1",
        ImmutableSet.of("DEF GETPROP a.b -> NUMBER"));                                                      /***** ORIGINAL ASSERTION IS HERE *****/

    // getelem expressions are invisible to the definition gatherer.
    try{ checkDefinitionsInJs(
        "a[\"b\"] = 1",
        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "f().b = 1",
        ImmutableSet.of("DEF GETPROP null -> NUMBER"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "({a : 1}); o.a",
        ImmutableSet.of("DEF STRING null -> NUMBER",
                        "USE GETPROP o.a -> [NUMBER]"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(johnlenz): Fix this.
    try{ checkDefinitionsInJs(
      "({'a' : 1}); o['a']",
      ImmutableSet.<String>of("DEF STRING null -> NUMBER"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
      "({1 : 1}); o[1]",
      ImmutableSet.<String>of("DEF STRING null -> NUMBER"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "var a = {b : 1}; a.b",
        ImmutableSet.of("DEF NAME a -> <null>",
                        "DEF STRING null -> NUMBER",
                        "USE NAME a -> [<null>]",
                        "USE GETPROP a.b -> [NUMBER]"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDefineNumber$catena_3() throws Exception {
    try{ checkDefinitionsInJs(
        "var a = 1",
        ImmutableSet.of("DEF NAME a -> NUMBER"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "a = 1",
        ImmutableSet.of("DEF NAME a -> NUMBER"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "a.b = 1",
        ImmutableSet.of("DEF GETPROP a.b -> NUMBER"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    // getelem expressions are invisible to the definition gatherer.
    checkDefinitionsInJs(
        "a[\"b\"] = 1",
        ImmutableSet.<String>of());                                                                         /***** ORIGINAL ASSERTION IS HERE *****/

    try{ checkDefinitionsInJs(
        "f().b = 1",
        ImmutableSet.of("DEF GETPROP null -> NUMBER"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "({a : 1}); o.a",
        ImmutableSet.of("DEF STRING null -> NUMBER",
                        "USE GETPROP o.a -> [NUMBER]"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(johnlenz): Fix this.
    try{ checkDefinitionsInJs(
      "({'a' : 1}); o['a']",
      ImmutableSet.<String>of("DEF STRING null -> NUMBER"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
      "({1 : 1}); o[1]",
      ImmutableSet.<String>of("DEF STRING null -> NUMBER"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "var a = {b : 1}; a.b",
        ImmutableSet.of("DEF NAME a -> <null>",
                        "DEF STRING null -> NUMBER",
                        "USE NAME a -> [<null>]",
                        "USE GETPROP a.b -> [NUMBER]"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDefineNumber$catena_4() throws Exception {
    try{ checkDefinitionsInJs(
        "var a = 1",
        ImmutableSet.of("DEF NAME a -> NUMBER"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "a = 1",
        ImmutableSet.of("DEF NAME a -> NUMBER"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "a.b = 1",
        ImmutableSet.of("DEF GETPROP a.b -> NUMBER"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    // getelem expressions are invisible to the definition gatherer.
    try{ checkDefinitionsInJs(
        "a[\"b\"] = 1",
        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

    checkDefinitionsInJs(
        "f().b = 1",
        ImmutableSet.of("DEF GETPROP null -> NUMBER"));                                                     /***** ORIGINAL ASSERTION IS HERE *****/

    try{ checkDefinitionsInJs(
        "({a : 1}); o.a",
        ImmutableSet.of("DEF STRING null -> NUMBER",
                        "USE GETPROP o.a -> [NUMBER]"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(johnlenz): Fix this.
    try{ checkDefinitionsInJs(
      "({'a' : 1}); o['a']",
      ImmutableSet.<String>of("DEF STRING null -> NUMBER"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
      "({1 : 1}); o[1]",
      ImmutableSet.<String>of("DEF STRING null -> NUMBER"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "var a = {b : 1}; a.b",
        ImmutableSet.of("DEF NAME a -> <null>",
                        "DEF STRING null -> NUMBER",
                        "USE NAME a -> [<null>]",
                        "USE GETPROP a.b -> [NUMBER]"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDefineNumber$catena_5() throws Exception {
    try{ checkDefinitionsInJs(
        "var a = 1",
        ImmutableSet.of("DEF NAME a -> NUMBER"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "a = 1",
        ImmutableSet.of("DEF NAME a -> NUMBER"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "a.b = 1",
        ImmutableSet.of("DEF GETPROP a.b -> NUMBER"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    // getelem expressions are invisible to the definition gatherer.
    try{ checkDefinitionsInJs(
        "a[\"b\"] = 1",
        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "f().b = 1",
        ImmutableSet.of("DEF GETPROP null -> NUMBER"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    checkDefinitionsInJs(
        "({a : 1}); o.a",
        ImmutableSet.of("DEF STRING null -> NUMBER",
                        "USE GETPROP o.a -> [NUMBER]"));                                                    /***** ORIGINAL ASSERTION IS HERE *****/

    // TODO(johnlenz): Fix this.
    try{ checkDefinitionsInJs(
      "({'a' : 1}); o['a']",
      ImmutableSet.<String>of("DEF STRING null -> NUMBER"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
      "({1 : 1}); o[1]",
      ImmutableSet.<String>of("DEF STRING null -> NUMBER"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "var a = {b : 1}; a.b",
        ImmutableSet.of("DEF NAME a -> <null>",
                        "DEF STRING null -> NUMBER",
                        "USE NAME a -> [<null>]",
                        "USE GETPROP a.b -> [NUMBER]"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDefineNumber$catena_6() throws Exception {
    try{ checkDefinitionsInJs(
        "var a = 1",
        ImmutableSet.of("DEF NAME a -> NUMBER"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "a = 1",
        ImmutableSet.of("DEF NAME a -> NUMBER"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "a.b = 1",
        ImmutableSet.of("DEF GETPROP a.b -> NUMBER"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    // getelem expressions are invisible to the definition gatherer.
    try{ checkDefinitionsInJs(
        "a[\"b\"] = 1",
        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "f().b = 1",
        ImmutableSet.of("DEF GETPROP null -> NUMBER"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "({a : 1}); o.a",
        ImmutableSet.of("DEF STRING null -> NUMBER",
                        "USE GETPROP o.a -> [NUMBER]"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(johnlenz): Fix this.
    checkDefinitionsInJs(
      "({'a' : 1}); o['a']",
      ImmutableSet.<String>of("DEF STRING null -> NUMBER"));                                                /***** ORIGINAL ASSERTION IS HERE *****/

    try{ checkDefinitionsInJs(
      "({1 : 1}); o[1]",
      ImmutableSet.<String>of("DEF STRING null -> NUMBER"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "var a = {b : 1}; a.b",
        ImmutableSet.of("DEF NAME a -> <null>",
                        "DEF STRING null -> NUMBER",
                        "USE NAME a -> [<null>]",
                        "USE GETPROP a.b -> [NUMBER]"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDefineNumber$catena_7() throws Exception {
    try{ checkDefinitionsInJs(
        "var a = 1",
        ImmutableSet.of("DEF NAME a -> NUMBER"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "a = 1",
        ImmutableSet.of("DEF NAME a -> NUMBER"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "a.b = 1",
        ImmutableSet.of("DEF GETPROP a.b -> NUMBER"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    // getelem expressions are invisible to the definition gatherer.
    try{ checkDefinitionsInJs(
        "a[\"b\"] = 1",
        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "f().b = 1",
        ImmutableSet.of("DEF GETPROP null -> NUMBER"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "({a : 1}); o.a",
        ImmutableSet.of("DEF STRING null -> NUMBER",
                        "USE GETPROP o.a -> [NUMBER]"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(johnlenz): Fix this.
    try{ checkDefinitionsInJs(
      "({'a' : 1}); o['a']",
      ImmutableSet.<String>of("DEF STRING null -> NUMBER"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    checkDefinitionsInJs(
      "({1 : 1}); o[1]",
      ImmutableSet.<String>of("DEF STRING null -> NUMBER"));                                                /***** ORIGINAL ASSERTION IS HERE *****/

    try{ checkDefinitionsInJs(
        "var a = {b : 1}; a.b",
        ImmutableSet.of("DEF NAME a -> <null>",
                        "DEF STRING null -> NUMBER",
                        "USE NAME a -> [<null>]",
                        "USE GETPROP a.b -> [NUMBER]"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDefineNumber$catena_8() throws Exception {
    try{ checkDefinitionsInJs(
        "var a = 1",
        ImmutableSet.of("DEF NAME a -> NUMBER"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "a = 1",
        ImmutableSet.of("DEF NAME a -> NUMBER"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "a.b = 1",
        ImmutableSet.of("DEF GETPROP a.b -> NUMBER"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    // getelem expressions are invisible to the definition gatherer.
    try{ checkDefinitionsInJs(
        "a[\"b\"] = 1",
        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "f().b = 1",
        ImmutableSet.of("DEF GETPROP null -> NUMBER"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
        "({a : 1}); o.a",
        ImmutableSet.of("DEF STRING null -> NUMBER",
                        "USE GETPROP o.a -> [NUMBER]"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(johnlenz): Fix this.
    try{ checkDefinitionsInJs(
      "({'a' : 1}); o['a']",
      ImmutableSet.<String>of("DEF STRING null -> NUMBER"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ checkDefinitionsInJs(
      "({1 : 1}); o[1]",
      ImmutableSet.<String>of("DEF STRING null -> NUMBER"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    checkDefinitionsInJs(
        "var a = {b : 1}; a.b",
        ImmutableSet.of("DEF NAME a -> <null>",
                        "DEF STRING null -> NUMBER",
                        "USE NAME a -> [<null>]",
                        "USE GETPROP a.b -> [NUMBER]"));                                                    /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 733 range 10 at test/com/google/javascript/jscomp/parsing/ParserTest.java
to
  public void testObjectLiteralDoc1$catena_0() {
    Node n = parse("var x = {/** @type {number} */ 1: 2};");

    Node objectLit = n.getFirstChild().getFirstChild().getFirstChild();
    assertEquals(Token.OBJECTLIT, objectLit.getType());                                                     /***** ORIGINAL ASSERTION IS HERE *****/

    Node number = objectLit.getFirstChild();
    try{ assertEquals(Token.STRING, number.getType());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertNotNull(number.getJSDocInfo());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testObjectLiteralDoc1$catena_1() {
    Node n = parse("var x = {/** @type {number} */ 1: 2};");

    Node objectLit = n.getFirstChild().getFirstChild().getFirstChild();
    try{ assertEquals(Token.OBJECTLIT, objectLit.getType());                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    Node number = objectLit.getFirstChild();
    assertEquals(Token.STRING, number.getType());                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertNotNull(number.getJSDocInfo());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testObjectLiteralDoc1$catena_2() {
    Node n = parse("var x = {/** @type {number} */ 1: 2};");

    Node objectLit = n.getFirstChild().getFirstChild().getFirstChild();
    try{ assertEquals(Token.OBJECTLIT, objectLit.getType());                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    Node number = objectLit.getFirstChild();
    try{ assertEquals(Token.STRING, number.getType());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    assertNotNull(number.getJSDocInfo());                                                                   /***** ORIGINAL ASSERTION IS HERE *****/
  }
trace file: test/com/google/javascript/jscomp/parsing/ParserTest.java
trace file: test/com/google/javascript/jscomp/FunctionNamesTest.java
trace file: test/com/google/javascript/jscomp/CodePrinterTest.java
trace file: test/com/google/javascript/jscomp/RenamePropertiesTest.java
trace file: test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java
new test num: 41
ori test num: 3
pattern: 00000000000000000
patches are written to file
running tests...
used time: Finished in 205.83 seconds
Failing tests: 17
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_4
	com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_2
	com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_2
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_3
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_2
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys3$catena_0
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys2$catena_0
	com.google.javascript.jscomp.SimpleDefinitionFinderTest::testDefineNumber$catena_7
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral6
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral7
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral8
	com.google.javascript.jscomp.parsing.ParserTest::testObjectLiteralDoc1$catena_1
processed: 00000000000000000
pattern: 10000000000000000
try to fix hunk: 0
replace from 343 with range 1 to
        if (!n.isQuotedString() &&
            TokenStream.isJSIdentifier(name) &&

patches are written to file
running tests...
used time: Finished in 179.83 seconds
Failing tests: 15
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_4
	com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_2
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_3
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_2
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys3$catena_0
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys2$catena_0
	com.google.javascript.jscomp.SimpleDefinitionFinderTest::testDefineNumber$catena_7
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral6
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral7
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral8
	com.google.javascript.jscomp.parsing.ParserTest::testObjectLiteralDoc1$catena_1
select new bug
Pattern: 10000000000000000
new failing tests:
com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_2
com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_3
Save found bug
processed: 10000000000000000
pattern: 01000000000000000
try to fix hunk: 1
replace from 350 with range 1 to
          double d = getSimpleNumber(name);
          if (!Double.isNaN(d)) {
            cc.addNumber(d);
          } else {
            add(jsString(n.getString(), outputCharsetEncoder));
          }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000000000000000
pattern: 00100000000000000
try to fix hunk: 2
insert before 654 with             Preconditions.checkState(c.getType() == Token.STRING);
            String key = c.getString();

patches are written to file
running tests...
used time: Finished in 180.19 seconds
Failing tests: 30
	com.google.javascript.jscomp.AmbiguatePropertiesTest::testPrototypePropertiesAsObjLitKeys1
	com.google.javascript.jscomp.AmbiguatePropertiesTest::testPrototypePropertiesAsObjLitKeys2
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_0
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testParsePrintParse
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit
	com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_4
	com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_2
	com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_0
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_2
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_3
	com.google.javascript.jscomp.CollapsePropertiesTest::testObjLitWithUsedNumericKey
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_0
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_2
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeysStable
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys1
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys3$catena_0
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys2$catena_0
	com.google.javascript.jscomp.RenamePrototypesTest::testRenamePrototypes1
	com.google.javascript.jscomp.RenamePrototypesTest::testRenamePrototypes2
	com.google.javascript.jscomp.SimpleDefinitionFinderTest::testDefineNumber$catena_7
	com.google.javascript.jscomp.StrictModeCheckTest::testIllegalName10
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral6
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral7
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral8
	com.google.javascript.jscomp.parsing.ParserTest::testObjectLiteralDoc1$catena_1
Includes new failing tests, set to unusable
processed: 00100000000000000
pattern: 00010000000000000
try to fix hunk: 3
replace from 656 with range 4 to
            if (!c.isQuotedString() &&
                !TokenStream.isKeyword(key) &&
                TokenStream.isJSIdentifier(key) &&

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010000000000000
pattern: 00001000000000000
try to fix hunk: 4
replace from 662 with range 2 to
                NodeUtil.isLatin(key)) {
              add(key);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001000000000000
pattern: 00000100000000000
try to fix hunk: 5
replace from 666 with range 1 to
              double d = getSimpleNumber(key);
              if (!Double.isNaN(d)) {
                cc.addNumber(d);
              } else {
                addExpr(c, 1);
              }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000100000000000
pattern: 00000010000000000
try to fix hunk: 6
insert before 724 with   static boolean isSimpleNumber(String s) {
    int len = s.length();
    for (int index = 0; index < len; index++) {
      char c = s.charAt(index);
      if (c < '0' || c > '9') {
        return false;
      }
    }
    return len > 0;
  }

patches are written to file
running tests...
used time: Finished in 182.81 seconds
Failing tests: 17
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_4
	com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_2
	com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_2
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_3
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_2
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys3$catena_0
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys2$catena_0
	com.google.javascript.jscomp.SimpleDefinitionFinderTest::testDefineNumber$catena_7
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral6
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral7
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral8
	com.google.javascript.jscomp.parsing.ParserTest::testObjectLiteralDoc1$catena_1
No new failing tests but only 1 hunk
processed: 00000010000000000
pattern: 00000001000000000
try to fix hunk: 7
insert before 725 with   static double getSimpleNumber(String s) {
    if (isSimpleNumber(s)) {
      long l = Long.parseLong(s);
      if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
        return l;
      }
    }
    return Double.NaN;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000001000000000
pattern: 00000000100000000
try to fix hunk: 8
replace from 336 with range 1 to
              if (TokenStream.isJSIdentifier(child.getString())) {

patches are written to file
running tests...
used time: Finished in 189.42 seconds
Failing tests: 17
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_4
	com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_2
	com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_2
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_3
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_2
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys3$catena_0
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys2$catena_0
	com.google.javascript.jscomp.SimpleDefinitionFinderTest::testDefineNumber$catena_7
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral6
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral7
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral8
	com.google.javascript.jscomp.parsing.ParserTest::testObjectLiteralDoc1$catena_1
No new failing tests but only 1 hunk
processed: 00000000100000000
pattern: 00000000010000000
try to fix hunk: 9
replace from 377 with range 1 to
              if (TokenStream.isJSIdentifier(key.getString())) {

patches are written to file
running tests...
used time: Finished in 187.53 seconds
Failing tests: 19
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_4
	com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_2
	com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_2
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_3
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_2
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys3$catena_0
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys2$catena_0
	com.google.javascript.jscomp.RenamePrototypesTest::testRenamePrototypes1
	com.google.javascript.jscomp.RenamePrototypesTest::testRenamePrototypes2
	com.google.javascript.jscomp.SimpleDefinitionFinderTest::testDefineNumber$catena_7
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral6
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral7
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral8
	com.google.javascript.jscomp.parsing.ParserTest::testObjectLiteralDoc1$catena_1
Includes new failing tests, set to unusable
processed: 00000000010000000
pattern: 00000000001000000
try to fix hunk: 10
insert before 255 with   private Node transformNumberAsString(NumberLiteral literalNode) {
    JSDocInfo jsDocInfo = handleJsDoc(literalNode);
    Node irNode = newStringNode(getStringValue(literalNode.getNumber()));
    if (jsDocInfo != null) {
      irNode.setJSDocInfo(jsDocInfo);
    }
    setSourceInfo(irNode, literalNode);
    return irNode;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000000001000000
pattern: 00000000000100000
try to fix hunk: 11
insert before 256 with   private static String getStringValue(double value) {
    long longValue = (long) value;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000000000100000
pattern: 00000000000010000
try to fix hunk: 12
insert before 258 with     if (longValue == value) {
      return Long.toString(longValue);
    } else {
      return Double.toString(value);
    }
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000000000010000
pattern: 00000000000001000
try to fix hunk: 13
insert before 347 with       } else if (n instanceof NumberLiteral) {
        ret = transformNumberAsString((NumberLiteral)n);
        ret.putBooleanProp(Node.QUOTED_PROP, true);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000000000001000
pattern: 00000000000000100
try to fix hunk: 14
delete from 349 with range 3
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000000000000100
pattern: 00000000000000010
try to fix hunk: 15
delete from 353 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000000000000010
pattern: 00000000000000001
try to fix hunk: 16
insert before 355 with       Preconditions.checkState(ret.getType() == Token.STRING);

patches are written to file
running tests...
used time: Finished in 190.17 seconds
Failing tests: 45
	com.google.javascript.jscomp.AmbiguatePropertiesTest::testPrototypePropertiesAsObjLitKeys1
	com.google.javascript.jscomp.AmbiguatePropertiesTest::testPrototypePropertiesAsObjLitKeys2
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_0
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testParsePrintParse
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit
	com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_4
	com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_2
	com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_0
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_2
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_3
	com.google.javascript.jscomp.CollapsePropertiesTest::testObjLitWithUnusedNumericKey
	com.google.javascript.jscomp.CollapsePropertiesTest::testObjLitWithUsedNumericKey
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_0
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_1
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_2
	com.google.javascript.jscomp.LooseTypeCheckTest::testObjectLiteralDeclaration1
	com.google.javascript.jscomp.LooseTypeCheckTest::testEnum11
	com.google.javascript.jscomp.NodeUtilTest::testGetNearestFunctionName
	com.google.javascript.jscomp.NodeUtilTest::testIsObjectLiteralKey1
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeysStable
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys1
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys3$catena_0
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys2$catena_0
	com.google.javascript.jscomp.RenamePrototypesTest::testRenamePrototypes1
	com.google.javascript.jscomp.RenamePrototypesTest::testRenamePrototypes2
	com.google.javascript.jscomp.RhinoErrorReporterTest::testTrailingComma
	com.google.javascript.jscomp.SimpleDefinitionFinderTest::testDefineNumber$catena_7
	com.google.javascript.jscomp.StrictModeCheckTest::testIllegalName10
	com.google.javascript.jscomp.TypeCheckTest::testObjectLiteralDeclaration1
	com.google.javascript.jscomp.TypeCheckTest::testEnum11
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral4
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral6
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral7
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral8
	com.google.javascript.jscomp.parsing.ParserTest::testObjectLiteralDoc1$catena_0
	com.google.javascript.jscomp.parsing.ParserTest::testObjectLiteralDoc1$catena_1
	com.google.javascript.jscomp.parsing.ParserTest::testObjectLiteralDoc1$catena_2
	com.google.javascript.jscomp.parsing.ParserTest::testKeywordsAsProperties
	com.google.javascript.jscomp.parsing.ParserTest::testGetter
	com.google.javascript.jscomp.parsing.ParserTest::testSetter
Includes new failing tests, set to unusable
processed: 00000000000000001
pattern: 11000000000000000
try to fix hunk: 0
replace from 343 with range 1 to
        if (!n.isQuotedString() &&
            TokenStream.isJSIdentifier(name) &&

try to fix hunk: 1
replace from 350 with range 1 to
          double d = getSimpleNumber(name);
          if (!Double.isNaN(d)) {
            cc.addNumber(d);
          } else {
            add(jsString(n.getString(), outputCharsetEncoder));
          }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11000000000000000
pattern: 10100000000000000
try to fix hunk: 0
replace from 343 with range 1 to
        if (!n.isQuotedString() &&
            TokenStream.isJSIdentifier(name) &&

try to fix hunk: 2
insert before 654 with             Preconditions.checkState(c.getType() == Token.STRING);
            String key = c.getString();

patches are written to file
running tests...
used time: Finished in 179.36 seconds
Failing tests: 28
	com.google.javascript.jscomp.AmbiguatePropertiesTest::testPrototypePropertiesAsObjLitKeys1
	com.google.javascript.jscomp.AmbiguatePropertiesTest::testPrototypePropertiesAsObjLitKeys2
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_0
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testParsePrintParse
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit
	com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_4
	com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_0
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_2
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_3
	com.google.javascript.jscomp.CollapsePropertiesTest::testObjLitWithUsedNumericKey
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_0
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_2
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeysStable
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys1
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys3$catena_0
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys2$catena_0
	com.google.javascript.jscomp.RenamePrototypesTest::testRenamePrototypes1
	com.google.javascript.jscomp.RenamePrototypesTest::testRenamePrototypes2
	com.google.javascript.jscomp.SimpleDefinitionFinderTest::testDefineNumber$catena_7
	com.google.javascript.jscomp.StrictModeCheckTest::testIllegalName10
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral6
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral7
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral8
	com.google.javascript.jscomp.parsing.ParserTest::testObjectLiteralDoc1$catena_1
Includes new failing tests, set to unusable
processed: 10100000000000000
pattern: 10010000000000000
try to fix hunk: 0
replace from 343 with range 1 to
        if (!n.isQuotedString() &&
            TokenStream.isJSIdentifier(name) &&

try to fix hunk: 3
replace from 656 with range 4 to
            if (!c.isQuotedString() &&
                !TokenStream.isKeyword(key) &&
                TokenStream.isJSIdentifier(key) &&

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10010000000000000
pattern: 10001000000000000
try to fix hunk: 0
replace from 343 with range 1 to
        if (!n.isQuotedString() &&
            TokenStream.isJSIdentifier(name) &&

try to fix hunk: 4
replace from 662 with range 2 to
                NodeUtil.isLatin(key)) {
              add(key);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10001000000000000
pattern: 10000100000000000
try to fix hunk: 0
replace from 343 with range 1 to
        if (!n.isQuotedString() &&
            TokenStream.isJSIdentifier(name) &&

try to fix hunk: 5
replace from 666 with range 1 to
              double d = getSimpleNumber(key);
              if (!Double.isNaN(d)) {
                cc.addNumber(d);
              } else {
                addExpr(c, 1);
              }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000100000000000
pattern: 10000010000000000
try to fix hunk: 0
replace from 343 with range 1 to
        if (!n.isQuotedString() &&
            TokenStream.isJSIdentifier(name) &&

try to fix hunk: 6
insert before 724 with   static boolean isSimpleNumber(String s) {
    int len = s.length();
    for (int index = 0; index < len; index++) {
      char c = s.charAt(index);
      if (c < '0' || c > '9') {
        return false;
      }
    }
    return len > 0;
  }

patches are written to file
running tests...
used time: Finished in 184.57 seconds
Failing tests: 15
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_4
	com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_2
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_3
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_2
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys3$catena_0
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys2$catena_0
	com.google.javascript.jscomp.SimpleDefinitionFinderTest::testDefineNumber$catena_7
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral6
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral7
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral8
	com.google.javascript.jscomp.parsing.ParserTest::testObjectLiteralDoc1$catena_1
Can independently fix []
Could not fix independently
processed: 10000010000000000
pattern: 10000001000000000
try to fix hunk: 0
replace from 343 with range 1 to
        if (!n.isQuotedString() &&
            TokenStream.isJSIdentifier(name) &&

try to fix hunk: 7
insert before 725 with   static double getSimpleNumber(String s) {
    if (isSimpleNumber(s)) {
      long l = Long.parseLong(s);
      if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
        return l;
      }
    }
    return Double.NaN;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000001000000000
pattern: 10000000100000000
try to fix hunk: 0
replace from 343 with range 1 to
        if (!n.isQuotedString() &&
            TokenStream.isJSIdentifier(name) &&

try to fix hunk: 8
replace from 336 with range 1 to
              if (TokenStream.isJSIdentifier(child.getString())) {

patches are written to file
running tests...
used time: Finished in 189.30 seconds
Failing tests: 15
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_4
	com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_2
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_3
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_2
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys3$catena_0
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys2$catena_0
	com.google.javascript.jscomp.SimpleDefinitionFinderTest::testDefineNumber$catena_7
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral6
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral7
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral8
	com.google.javascript.jscomp.parsing.ParserTest::testObjectLiteralDoc1$catena_1
Can independently fix []
Could not fix independently
processed: 10000000100000000
pattern: 10000000010000000
try to fix hunk: 0
replace from 343 with range 1 to
        if (!n.isQuotedString() &&
            TokenStream.isJSIdentifier(name) &&

try to fix hunk: 9
replace from 377 with range 1 to
              if (TokenStream.isJSIdentifier(key.getString())) {

patches are written to file
running tests...
used time: Finished in 189.49 seconds
Failing tests: 17
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_4
	com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_2
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_3
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_2
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys3$catena_0
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys2$catena_0
	com.google.javascript.jscomp.RenamePrototypesTest::testRenamePrototypes1
	com.google.javascript.jscomp.RenamePrototypesTest::testRenamePrototypes2
	com.google.javascript.jscomp.SimpleDefinitionFinderTest::testDefineNumber$catena_7
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral6
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral7
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral8
	com.google.javascript.jscomp.parsing.ParserTest::testObjectLiteralDoc1$catena_1
Includes new failing tests, set to unusable
processed: 10000000010000000
pattern: 10000000001000000
try to fix hunk: 0
replace from 343 with range 1 to
        if (!n.isQuotedString() &&
            TokenStream.isJSIdentifier(name) &&

try to fix hunk: 10
insert before 255 with   private Node transformNumberAsString(NumberLiteral literalNode) {
    JSDocInfo jsDocInfo = handleJsDoc(literalNode);
    Node irNode = newStringNode(getStringValue(literalNode.getNumber()));
    if (jsDocInfo != null) {
      irNode.setJSDocInfo(jsDocInfo);
    }
    setSourceInfo(irNode, literalNode);
    return irNode;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000000001000000
pattern: 10000000000100000
try to fix hunk: 0
replace from 343 with range 1 to
        if (!n.isQuotedString() &&
            TokenStream.isJSIdentifier(name) &&

try to fix hunk: 11
insert before 256 with   private static String getStringValue(double value) {
    long longValue = (long) value;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000000000100000
pattern: 10000000000010000
try to fix hunk: 0
replace from 343 with range 1 to
        if (!n.isQuotedString() &&
            TokenStream.isJSIdentifier(name) &&

try to fix hunk: 12
insert before 258 with     if (longValue == value) {
      return Long.toString(longValue);
    } else {
      return Double.toString(value);
    }
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000000000010000
pattern: 10000000000001000
try to fix hunk: 0
replace from 343 with range 1 to
        if (!n.isQuotedString() &&
            TokenStream.isJSIdentifier(name) &&

try to fix hunk: 13
insert before 347 with       } else if (n instanceof NumberLiteral) {
        ret = transformNumberAsString((NumberLiteral)n);
        ret.putBooleanProp(Node.QUOTED_PROP, true);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000000000001000
pattern: 10000000000000100
try to fix hunk: 0
replace from 343 with range 1 to
        if (!n.isQuotedString() &&
            TokenStream.isJSIdentifier(name) &&

try to fix hunk: 14
delete from 349 with range 3
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000000000000100
pattern: 10000000000000010
try to fix hunk: 0
replace from 343 with range 1 to
        if (!n.isQuotedString() &&
            TokenStream.isJSIdentifier(name) &&

try to fix hunk: 15
delete from 353 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000000000000010
pattern: 10000000000000001
try to fix hunk: 0
replace from 343 with range 1 to
        if (!n.isQuotedString() &&
            TokenStream.isJSIdentifier(name) &&

try to fix hunk: 16
insert before 355 with       Preconditions.checkState(ret.getType() == Token.STRING);

patches are written to file
running tests...
used time: Finished in 186.47 seconds
Failing tests: 43
	com.google.javascript.jscomp.AmbiguatePropertiesTest::testPrototypePropertiesAsObjLitKeys1
	com.google.javascript.jscomp.AmbiguatePropertiesTest::testPrototypePropertiesAsObjLitKeys2
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_0
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testParsePrintParse
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit
	com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_4
	com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_0
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_2
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_3
	com.google.javascript.jscomp.CollapsePropertiesTest::testObjLitWithUnusedNumericKey
	com.google.javascript.jscomp.CollapsePropertiesTest::testObjLitWithUsedNumericKey
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_0
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_1
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_2
	com.google.javascript.jscomp.LooseTypeCheckTest::testObjectLiteralDeclaration1
	com.google.javascript.jscomp.LooseTypeCheckTest::testEnum11
	com.google.javascript.jscomp.NodeUtilTest::testGetNearestFunctionName
	com.google.javascript.jscomp.NodeUtilTest::testIsObjectLiteralKey1
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeysStable
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys1
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys3$catena_0
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys2$catena_0
	com.google.javascript.jscomp.RenamePrototypesTest::testRenamePrototypes1
	com.google.javascript.jscomp.RenamePrototypesTest::testRenamePrototypes2
	com.google.javascript.jscomp.RhinoErrorReporterTest::testTrailingComma
	com.google.javascript.jscomp.SimpleDefinitionFinderTest::testDefineNumber$catena_7
	com.google.javascript.jscomp.StrictModeCheckTest::testIllegalName10
	com.google.javascript.jscomp.TypeCheckTest::testObjectLiteralDeclaration1
	com.google.javascript.jscomp.TypeCheckTest::testEnum11
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral4
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral6
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral7
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral8
	com.google.javascript.jscomp.parsing.ParserTest::testObjectLiteralDoc1$catena_0
	com.google.javascript.jscomp.parsing.ParserTest::testObjectLiteralDoc1$catena_1
	com.google.javascript.jscomp.parsing.ParserTest::testObjectLiteralDoc1$catena_2
	com.google.javascript.jscomp.parsing.ParserTest::testKeywordsAsProperties
	com.google.javascript.jscomp.parsing.ParserTest::testGetter
	com.google.javascript.jscomp.parsing.ParserTest::testSetter
Includes new failing tests, set to unusable
processed: 10000000000000001
pattern: 01100000000000000
try to fix hunk: 1
replace from 350 with range 1 to
          double d = getSimpleNumber(name);
          if (!Double.isNaN(d)) {
            cc.addNumber(d);
          } else {
            add(jsString(n.getString(), outputCharsetEncoder));
          }

try to fix hunk: 2
insert before 654 with             Preconditions.checkState(c.getType() == Token.STRING);
            String key = c.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01100000000000000
pattern: 01010000000000000
try to fix hunk: 1
replace from 350 with range 1 to
          double d = getSimpleNumber(name);
          if (!Double.isNaN(d)) {
            cc.addNumber(d);
          } else {
            add(jsString(n.getString(), outputCharsetEncoder));
          }

try to fix hunk: 3
replace from 656 with range 4 to
            if (!c.isQuotedString() &&
                !TokenStream.isKeyword(key) &&
                TokenStream.isJSIdentifier(key) &&

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01010000000000000
pattern: 01001000000000000
try to fix hunk: 1
replace from 350 with range 1 to
          double d = getSimpleNumber(name);
          if (!Double.isNaN(d)) {
            cc.addNumber(d);
          } else {
            add(jsString(n.getString(), outputCharsetEncoder));
          }

try to fix hunk: 4
replace from 662 with range 2 to
                NodeUtil.isLatin(key)) {
              add(key);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01001000000000000
pattern: 01000100000000000
try to fix hunk: 1
replace from 350 with range 1 to
          double d = getSimpleNumber(name);
          if (!Double.isNaN(d)) {
            cc.addNumber(d);
          } else {
            add(jsString(n.getString(), outputCharsetEncoder));
          }

try to fix hunk: 5
replace from 666 with range 1 to
              double d = getSimpleNumber(key);
              if (!Double.isNaN(d)) {
                cc.addNumber(d);
              } else {
                addExpr(c, 1);
              }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000100000000000
pattern: 01000010000000000
try to fix hunk: 1
replace from 350 with range 1 to
          double d = getSimpleNumber(name);
          if (!Double.isNaN(d)) {
            cc.addNumber(d);
          } else {
            add(jsString(n.getString(), outputCharsetEncoder));
          }

try to fix hunk: 6
insert before 724 with   static boolean isSimpleNumber(String s) {
    int len = s.length();
    for (int index = 0; index < len; index++) {
      char c = s.charAt(index);
      if (c < '0' || c > '9') {
        return false;
      }
    }
    return len > 0;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000010000000000
pattern: 01000001000000000
try to fix hunk: 1
replace from 350 with range 1 to
          double d = getSimpleNumber(name);
          if (!Double.isNaN(d)) {
            cc.addNumber(d);
          } else {
            add(jsString(n.getString(), outputCharsetEncoder));
          }

try to fix hunk: 7
insert before 725 with   static double getSimpleNumber(String s) {
    if (isSimpleNumber(s)) {
      long l = Long.parseLong(s);
      if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
        return l;
      }
    }
    return Double.NaN;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000001000000000
pattern: 01000000100000000
try to fix hunk: 1
replace from 350 with range 1 to
          double d = getSimpleNumber(name);
          if (!Double.isNaN(d)) {
            cc.addNumber(d);
          } else {
            add(jsString(n.getString(), outputCharsetEncoder));
          }

try to fix hunk: 8
replace from 336 with range 1 to
              if (TokenStream.isJSIdentifier(child.getString())) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000000100000000
pattern: 01000000010000000
try to fix hunk: 1
replace from 350 with range 1 to
          double d = getSimpleNumber(name);
          if (!Double.isNaN(d)) {
            cc.addNumber(d);
          } else {
            add(jsString(n.getString(), outputCharsetEncoder));
          }

try to fix hunk: 9
replace from 377 with range 1 to
              if (TokenStream.isJSIdentifier(key.getString())) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000000010000000
pattern: 01000000001000000
try to fix hunk: 1
replace from 350 with range 1 to
          double d = getSimpleNumber(name);
          if (!Double.isNaN(d)) {
            cc.addNumber(d);
          } else {
            add(jsString(n.getString(), outputCharsetEncoder));
          }

try to fix hunk: 10
insert before 255 with   private Node transformNumberAsString(NumberLiteral literalNode) {
    JSDocInfo jsDocInfo = handleJsDoc(literalNode);
    Node irNode = newStringNode(getStringValue(literalNode.getNumber()));
    if (jsDocInfo != null) {
      irNode.setJSDocInfo(jsDocInfo);
    }
    setSourceInfo(irNode, literalNode);
    return irNode;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000000001000000
pattern: 01000000000100000
try to fix hunk: 1
replace from 350 with range 1 to
          double d = getSimpleNumber(name);
          if (!Double.isNaN(d)) {
            cc.addNumber(d);
          } else {
            add(jsString(n.getString(), outputCharsetEncoder));
          }

try to fix hunk: 11
insert before 256 with   private static String getStringValue(double value) {
    long longValue = (long) value;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000000000100000
pattern: 01000000000010000
try to fix hunk: 1
replace from 350 with range 1 to
          double d = getSimpleNumber(name);
          if (!Double.isNaN(d)) {
            cc.addNumber(d);
          } else {
            add(jsString(n.getString(), outputCharsetEncoder));
          }

try to fix hunk: 12
insert before 258 with     if (longValue == value) {
      return Long.toString(longValue);
    } else {
      return Double.toString(value);
    }
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000000000010000
pattern: 01000000000001000
try to fix hunk: 1
replace from 350 with range 1 to
          double d = getSimpleNumber(name);
          if (!Double.isNaN(d)) {
            cc.addNumber(d);
          } else {
            add(jsString(n.getString(), outputCharsetEncoder));
          }

try to fix hunk: 13
insert before 347 with       } else if (n instanceof NumberLiteral) {
        ret = transformNumberAsString((NumberLiteral)n);
        ret.putBooleanProp(Node.QUOTED_PROP, true);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000000000001000
pattern: 01000000000000100
try to fix hunk: 1
replace from 350 with range 1 to
          double d = getSimpleNumber(name);
          if (!Double.isNaN(d)) {
            cc.addNumber(d);
          } else {
            add(jsString(n.getString(), outputCharsetEncoder));
          }

try to fix hunk: 14
delete from 349 with range 3
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000000000000100
pattern: 01000000000000010
try to fix hunk: 1
replace from 350 with range 1 to
          double d = getSimpleNumber(name);
          if (!Double.isNaN(d)) {
            cc.addNumber(d);
          } else {
            add(jsString(n.getString(), outputCharsetEncoder));
          }

try to fix hunk: 15
delete from 353 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000000000000010
pattern: 01000000000000001
try to fix hunk: 1
replace from 350 with range 1 to
          double d = getSimpleNumber(name);
          if (!Double.isNaN(d)) {
            cc.addNumber(d);
          } else {
            add(jsString(n.getString(), outputCharsetEncoder));
          }

try to fix hunk: 16
insert before 355 with       Preconditions.checkState(ret.getType() == Token.STRING);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000000000000001
pattern: 00110000000000000
try to fix hunk: 2
insert before 654 with             Preconditions.checkState(c.getType() == Token.STRING);
            String key = c.getString();

try to fix hunk: 3
replace from 656 with range 4 to
            if (!c.isQuotedString() &&
                !TokenStream.isKeyword(key) &&
                TokenStream.isJSIdentifier(key) &&

patches are written to file
running tests...
used time: Finished in 189.91 seconds
Failing tests: 30
	com.google.javascript.jscomp.AmbiguatePropertiesTest::testPrototypePropertiesAsObjLitKeys1
	com.google.javascript.jscomp.AmbiguatePropertiesTest::testPrototypePropertiesAsObjLitKeys2
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_0
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testParsePrintParse
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit
	com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_4
	com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_2
	com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_0
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_2
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_3
	com.google.javascript.jscomp.CollapsePropertiesTest::testObjLitWithUsedNumericKey
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_0
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_2
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeysStable
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys1
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys3$catena_0
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys2$catena_0
	com.google.javascript.jscomp.RenamePrototypesTest::testRenamePrototypes1
	com.google.javascript.jscomp.RenamePrototypesTest::testRenamePrototypes2
	com.google.javascript.jscomp.SimpleDefinitionFinderTest::testDefineNumber$catena_7
	com.google.javascript.jscomp.StrictModeCheckTest::testIllegalName10
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral6
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral7
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral8
	com.google.javascript.jscomp.parsing.ParserTest::testObjectLiteralDoc1$catena_1
Includes new failing tests, set to unusable
processed: 00110000000000000
pattern: 00101000000000000
try to fix hunk: 2
insert before 654 with             Preconditions.checkState(c.getType() == Token.STRING);
            String key = c.getString();

try to fix hunk: 4
replace from 662 with range 2 to
                NodeUtil.isLatin(key)) {
              add(key);

patches are written to file
running tests...
used time: Finished in 189.79 seconds
Failing tests: 30
	com.google.javascript.jscomp.AmbiguatePropertiesTest::testPrototypePropertiesAsObjLitKeys1
	com.google.javascript.jscomp.AmbiguatePropertiesTest::testPrototypePropertiesAsObjLitKeys2
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_0
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testParsePrintParse
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit
	com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_4
	com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_2
	com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_0
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_2
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_3
	com.google.javascript.jscomp.CollapsePropertiesTest::testObjLitWithUsedNumericKey
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_0
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_2
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeysStable
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys1
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys3$catena_0
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys2$catena_0
	com.google.javascript.jscomp.RenamePrototypesTest::testRenamePrototypes1
	com.google.javascript.jscomp.RenamePrototypesTest::testRenamePrototypes2
	com.google.javascript.jscomp.SimpleDefinitionFinderTest::testDefineNumber$catena_7
	com.google.javascript.jscomp.StrictModeCheckTest::testIllegalName10
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral6
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral7
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral8
	com.google.javascript.jscomp.parsing.ParserTest::testObjectLiteralDoc1$catena_1
Includes new failing tests, set to unusable
processed: 00101000000000000
pattern: 00100100000000000
try to fix hunk: 2
insert before 654 with             Preconditions.checkState(c.getType() == Token.STRING);
            String key = c.getString();

try to fix hunk: 5
replace from 666 with range 1 to
              double d = getSimpleNumber(key);
              if (!Double.isNaN(d)) {
                cc.addNumber(d);
              } else {
                addExpr(c, 1);
              }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100100000000000
pattern: 00100010000000000
try to fix hunk: 2
insert before 654 with             Preconditions.checkState(c.getType() == Token.STRING);
            String key = c.getString();

try to fix hunk: 6
insert before 724 with   static boolean isSimpleNumber(String s) {
    int len = s.length();
    for (int index = 0; index < len; index++) {
      char c = s.charAt(index);
      if (c < '0' || c > '9') {
        return false;
      }
    }
    return len > 0;
  }

patches are written to file
running tests...
used time: Finished in 185.28 seconds
Failing tests: 30
	com.google.javascript.jscomp.AmbiguatePropertiesTest::testPrototypePropertiesAsObjLitKeys1
	com.google.javascript.jscomp.AmbiguatePropertiesTest::testPrototypePropertiesAsObjLitKeys2
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_0
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testParsePrintParse
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit
	com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_4
	com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_2
	com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_0
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_2
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_3
	com.google.javascript.jscomp.CollapsePropertiesTest::testObjLitWithUsedNumericKey
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_0
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_2
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeysStable
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys1
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys3$catena_0
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys2$catena_0
	com.google.javascript.jscomp.RenamePrototypesTest::testRenamePrototypes1
	com.google.javascript.jscomp.RenamePrototypesTest::testRenamePrototypes2
	com.google.javascript.jscomp.SimpleDefinitionFinderTest::testDefineNumber$catena_7
	com.google.javascript.jscomp.StrictModeCheckTest::testIllegalName10
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral6
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral7
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral8
	com.google.javascript.jscomp.parsing.ParserTest::testObjectLiteralDoc1$catena_1
Includes new failing tests, set to unusable
processed: 00100010000000000
pattern: 00100001000000000
try to fix hunk: 2
insert before 654 with             Preconditions.checkState(c.getType() == Token.STRING);
            String key = c.getString();

try to fix hunk: 7
insert before 725 with   static double getSimpleNumber(String s) {
    if (isSimpleNumber(s)) {
      long l = Long.parseLong(s);
      if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
        return l;
      }
    }
    return Double.NaN;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100001000000000
pattern: 00100000100000000
try to fix hunk: 2
insert before 654 with             Preconditions.checkState(c.getType() == Token.STRING);
            String key = c.getString();

try to fix hunk: 8
replace from 336 with range 1 to
              if (TokenStream.isJSIdentifier(child.getString())) {

patches are written to file
running tests...
used time: Finished in 192.94 seconds
Failing tests: 30
	com.google.javascript.jscomp.AmbiguatePropertiesTest::testPrototypePropertiesAsObjLitKeys1
	com.google.javascript.jscomp.AmbiguatePropertiesTest::testPrototypePropertiesAsObjLitKeys2
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_0
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testParsePrintParse
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit
	com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_4
	com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_2
	com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_0
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_2
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_3
	com.google.javascript.jscomp.CollapsePropertiesTest::testObjLitWithUsedNumericKey
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_0
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_2
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeysStable
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys1
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys3$catena_0
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys2$catena_0
	com.google.javascript.jscomp.RenamePrototypesTest::testRenamePrototypes1
	com.google.javascript.jscomp.RenamePrototypesTest::testRenamePrototypes2
	com.google.javascript.jscomp.SimpleDefinitionFinderTest::testDefineNumber$catena_7
	com.google.javascript.jscomp.StrictModeCheckTest::testIllegalName10
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral6
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral7
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral8
	com.google.javascript.jscomp.parsing.ParserTest::testObjectLiteralDoc1$catena_1
Includes new failing tests, set to unusable
processed: 00100000100000000
pattern: 00100000010000000
try to fix hunk: 2
insert before 654 with             Preconditions.checkState(c.getType() == Token.STRING);
            String key = c.getString();

try to fix hunk: 9
replace from 377 with range 1 to
              if (TokenStream.isJSIdentifier(key.getString())) {

patches are written to file
running tests...
used time: Finished in 186.79 seconds
Failing tests: 30
	com.google.javascript.jscomp.AmbiguatePropertiesTest::testPrototypePropertiesAsObjLitKeys1
	com.google.javascript.jscomp.AmbiguatePropertiesTest::testPrototypePropertiesAsObjLitKeys2
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_0
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testParsePrintParse
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit
	com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_4
	com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_2
	com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_0
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_2
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_3
	com.google.javascript.jscomp.CollapsePropertiesTest::testObjLitWithUsedNumericKey
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_0
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_2
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeysStable
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys1
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys3$catena_0
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys2$catena_0
	com.google.javascript.jscomp.RenamePrototypesTest::testRenamePrototypes1
	com.google.javascript.jscomp.RenamePrototypesTest::testRenamePrototypes2
	com.google.javascript.jscomp.SimpleDefinitionFinderTest::testDefineNumber$catena_7
	com.google.javascript.jscomp.StrictModeCheckTest::testIllegalName10
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral6
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral7
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral8
	com.google.javascript.jscomp.parsing.ParserTest::testObjectLiteralDoc1$catena_1
Includes new failing tests, set to unusable
processed: 00100000010000000
pattern: 00100000001000000
try to fix hunk: 2
insert before 654 with             Preconditions.checkState(c.getType() == Token.STRING);
            String key = c.getString();

try to fix hunk: 10
insert before 255 with   private Node transformNumberAsString(NumberLiteral literalNode) {
    JSDocInfo jsDocInfo = handleJsDoc(literalNode);
    Node irNode = newStringNode(getStringValue(literalNode.getNumber()));
    if (jsDocInfo != null) {
      irNode.setJSDocInfo(jsDocInfo);
    }
    setSourceInfo(irNode, literalNode);
    return irNode;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100000001000000
pattern: 00100000000100000
try to fix hunk: 2
insert before 654 with             Preconditions.checkState(c.getType() == Token.STRING);
            String key = c.getString();

try to fix hunk: 11
insert before 256 with   private static String getStringValue(double value) {
    long longValue = (long) value;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100000000100000
pattern: 00100000000010000
try to fix hunk: 2
insert before 654 with             Preconditions.checkState(c.getType() == Token.STRING);
            String key = c.getString();

try to fix hunk: 12
insert before 258 with     if (longValue == value) {
      return Long.toString(longValue);
    } else {
      return Double.toString(value);
    }
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100000000010000
pattern: 00100000000001000
try to fix hunk: 2
insert before 654 with             Preconditions.checkState(c.getType() == Token.STRING);
            String key = c.getString();

try to fix hunk: 13
insert before 347 with       } else if (n instanceof NumberLiteral) {
        ret = transformNumberAsString((NumberLiteral)n);
        ret.putBooleanProp(Node.QUOTED_PROP, true);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100000000001000
pattern: 00100000000000100
try to fix hunk: 2
insert before 654 with             Preconditions.checkState(c.getType() == Token.STRING);
            String key = c.getString();

try to fix hunk: 14
delete from 349 with range 3
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100000000000100
pattern: 00100000000000010
try to fix hunk: 2
insert before 654 with             Preconditions.checkState(c.getType() == Token.STRING);
            String key = c.getString();

try to fix hunk: 15
delete from 353 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100000000000010
pattern: 00100000000000001
try to fix hunk: 2
insert before 654 with             Preconditions.checkState(c.getType() == Token.STRING);
            String key = c.getString();

try to fix hunk: 16
insert before 355 with       Preconditions.checkState(ret.getType() == Token.STRING);

patches are written to file
running tests...
used time: Finished in 180.29 seconds
Failing tests: 45
	com.google.javascript.jscomp.AmbiguatePropertiesTest::testPrototypePropertiesAsObjLitKeys1
	com.google.javascript.jscomp.AmbiguatePropertiesTest::testPrototypePropertiesAsObjLitKeys2
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_0
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit2$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testParsePrintParse
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit
	com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testGetter$catena_4
	com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_2
	com.google.javascript.jscomp.CodePrinterTest::testSetter$catena_3
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_0
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_1
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_2
	com.google.javascript.jscomp.CodePrinterTest::testObjectLit3$catena_3
	com.google.javascript.jscomp.CollapsePropertiesTest::testObjLitWithUnusedNumericKey
	com.google.javascript.jscomp.CollapsePropertiesTest::testObjLitWithUsedNumericKey
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_0
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_1
	com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds$catena_2
	com.google.javascript.jscomp.LooseTypeCheckTest::testObjectLiteralDeclaration1
	com.google.javascript.jscomp.LooseTypeCheckTest::testEnum11
	com.google.javascript.jscomp.NodeUtilTest::testGetNearestFunctionName
	com.google.javascript.jscomp.NodeUtilTest::testIsObjectLiteralKey1
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeysStable
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys1
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys3$catena_0
	com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys2$catena_0
	com.google.javascript.jscomp.RenamePrototypesTest::testRenamePrototypes1
	com.google.javascript.jscomp.RenamePrototypesTest::testRenamePrototypes2
	com.google.javascript.jscomp.RhinoErrorReporterTest::testTrailingComma
	com.google.javascript.jscomp.SimpleDefinitionFinderTest::testDefineNumber$catena_7
	com.google.javascript.jscomp.StrictModeCheckTest::testIllegalName10
	com.google.javascript.jscomp.TypeCheckTest::testObjectLiteralDeclaration1
	com.google.javascript.jscomp.TypeCheckTest::testEnum11
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral4
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral6
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral7
	com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral8
	com.google.javascript.jscomp.parsing.ParserTest::testObjectLiteralDoc1$catena_0
	com.google.javascript.jscomp.parsing.ParserTest::testObjectLiteralDoc1$catena_1
	com.google.javascript.jscomp.parsing.ParserTest::testObjectLiteralDoc1$catena_2
	com.google.javascript.jscomp.parsing.ParserTest::testKeywordsAsProperties
	com.google.javascript.jscomp.parsing.ParserTest::testGetter
	com.google.javascript.jscomp.parsing.ParserTest::testSetter
Includes new failing tests, set to unusable
processed: 00100000000000001
pattern: 00011000000000000
try to fix hunk: 3
replace from 656 with range 4 to
            if (!c.isQuotedString() &&
                !TokenStream.isKeyword(key) &&
                TokenStream.isJSIdentifier(key) &&

try to fix hunk: 4
replace from 662 with range 2 to
                NodeUtil.isLatin(key)) {
              add(key);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011000000000000
pattern: 00010100000000000
try to fix hunk: 3
replace from 656 with range 4 to
            if (!c.isQuotedString() &&
                !TokenStream.isKeyword(key) &&
                TokenStream.isJSIdentifier(key) &&

try to fix hunk: 5
replace from 666 with range 1 to
              double d = getSimpleNumber(key);
              if (!Double.isNaN(d)) {
                cc.addNumber(d);
              } else {
                addExpr(c, 1);
              }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010100000000000
pattern: 00010010000000000
try to fix hunk: 3
replace from 656 with range 4 to
            if (!c.isQuotedString() &&
                !TokenStream.isKeyword(key) &&
                TokenStream.isJSIdentifier(key) &&

try to fix hunk: 6
insert before 724 with   static boolean isSimpleNumber(String s) {
    int len = s.length();
    for (int index = 0; index < len; index++) {
      char c = s.charAt(index);
      if (c < '0' || c > '9') {
        return false;
      }
    }
    return len > 0;
  }

patches are written to file
running tests...
EXCEPTION: Inside Exception generator.run() timeout
Traceback (most recent call last):
  File "run.py", line 30, in task
    generator.run()
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 82, in new_function
    return function(*args, **kwargs)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 83, in run
    self._run()
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 109, in _run
    self.taskSingleHunk(task)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 138, in taskSingleHunk
    failure = util.get_failing_tests(self.path, self.build_dir)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/util.py", line 46, in get_failing_tests
    result = runCommand(['defects4j', 'test', '-w', '{}'.format(path)], timeout=timeout)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/util.py", line 9, in runCommand
    finished = subprocess.run(cmd, capture_output=True, cwd=cwd, timeout=timeout)
  File "/usr/lib/python3.8/subprocess.py", line 495, in run
    stdout, stderr = process.communicate(input, timeout=timeout)
  File "/usr/lib/python3.8/subprocess.py", line 1028, in communicate
    stdout, stderr = self._communicate(input, endtime, timeout)
  File "/usr/lib/python3.8/subprocess.py", line 1868, in _communicate
    ready = selector.select(timeout)
  File "/usr/lib/python3.8/selectors.py", line 415, in select
    fd_event_list = self._selector.poll(timeout)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 69, in handler
    _raise_exception(timeout_exception, exception_message)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 47, in _raise_exception
    raise exception(exception_message)
TimeoutError: generator.run() timeout

