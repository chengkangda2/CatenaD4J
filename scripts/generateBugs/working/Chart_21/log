---
Begin generate bug_id: Chart_21
num_of_hunks: 4
use working dir: ./working/data/Chart_21
Try to checkout Chart_21
build dir: ['./working/data/Chart_21/build', './working/data/Chart_21/build-tests']
init FileManager
trace file: source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java
trace file: source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java
trace file: source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java
trace file: source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java
trying to replace old failing tests
edit: replace from 270 range 25 at tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java
to
    public void testGetRangeBounds$catena_0() {
        DefaultBoxAndWhiskerCategoryDataset d1 
                = new DefaultBoxAndWhiskerCategoryDataset();
        d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 
                new ArrayList()), "R1", "C1");
        assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));                                        /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 
                new ArrayList()), "R1", "C1");
        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 
                new ArrayList()), "R2", "C1");
        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // this replaces the entry with the current minimum value, but the new
        // minimum value is now in a different item
        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, 
                new ArrayList()), "R1", "C1");
        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testGetRangeBounds$catena_1() {
        DefaultBoxAndWhiskerCategoryDataset d1 
                = new DefaultBoxAndWhiskerCategoryDataset();
        d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 
                new ArrayList()), "R1", "C1");
        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));                                         /***** ORIGINAL ASSERTION IS HERE *****/
        
        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 
                new ArrayList()), "R1", "C1");
        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 
                new ArrayList()), "R2", "C1");
        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // this replaces the entry with the current minimum value, but the new
        // minimum value is now in a different item
        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, 
                new ArrayList()), "R1", "C1");
        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testGetRangeBounds$catena_2() {
        DefaultBoxAndWhiskerCategoryDataset d1 
                = new DefaultBoxAndWhiskerCategoryDataset();
        d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 
                new ArrayList()), "R1", "C1");
        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 
                new ArrayList()), "R1", "C1");
        assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));                                        /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 
                new ArrayList()), "R2", "C1");
        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // this replaces the entry with the current minimum value, but the new
        // minimum value is now in a different item
        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, 
                new ArrayList()), "R1", "C1");
        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testGetRangeBounds$catena_3() {
        DefaultBoxAndWhiskerCategoryDataset d1 
                = new DefaultBoxAndWhiskerCategoryDataset();
        d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 
                new ArrayList()), "R1", "C1");
        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 
                new ArrayList()), "R1", "C1");
        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));                                         /***** ORIGINAL ASSERTION IS HERE *****/
        
        d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 
                new ArrayList()), "R2", "C1");
        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // this replaces the entry with the current minimum value, but the new
        // minimum value is now in a different item
        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, 
                new ArrayList()), "R1", "C1");
        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testGetRangeBounds$catena_4() {
        DefaultBoxAndWhiskerCategoryDataset d1 
                = new DefaultBoxAndWhiskerCategoryDataset();
        d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 
                new ArrayList()), "R1", "C1");
        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 
                new ArrayList()), "R1", "C1");
        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 
                new ArrayList()), "R2", "C1");
        assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));                                        /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // this replaces the entry with the current minimum value, but the new
        // minimum value is now in a different item
        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, 
                new ArrayList()), "R1", "C1");
        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testGetRangeBounds$catena_5() {
        DefaultBoxAndWhiskerCategoryDataset d1 
                = new DefaultBoxAndWhiskerCategoryDataset();
        d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 
                new ArrayList()), "R1", "C1");
        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 
                new ArrayList()), "R1", "C1");
        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 
                new ArrayList()), "R2", "C1");
        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));                                         /***** ORIGINAL ASSERTION IS HERE *****/
        
        // this replaces the entry with the current minimum value, but the new
        // minimum value is now in a different item
        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, 
                new ArrayList()), "R1", "C1");
        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testGetRangeBounds$catena_6() {
        DefaultBoxAndWhiskerCategoryDataset d1 
                = new DefaultBoxAndWhiskerCategoryDataset();
        d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 
                new ArrayList()), "R1", "C1");
        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 
                new ArrayList()), "R1", "C1");
        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 
                new ArrayList()), "R2", "C1");
        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // this replaces the entry with the current minimum value, but the new
        // minimum value is now in a different item
        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, 
                new ArrayList()), "R1", "C1");
        assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));                                        /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testGetRangeBounds$catena_7() {
        DefaultBoxAndWhiskerCategoryDataset d1 
                = new DefaultBoxAndWhiskerCategoryDataset();
        d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 
                new ArrayList()), "R1", "C1");
        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 
                new ArrayList()), "R1", "C1");
        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 
                new ArrayList()), "R2", "C1");
        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // this replaces the entry with the current minimum value, but the new
        // minimum value is now in a different item
        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, 
                new ArrayList()), "R1", "C1");
        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));                                         /***** ORIGINAL ASSERTION IS HERE *****/
    }
trace file: tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java
new test num: 8
ori test num: 0
pattern: 0000
patches are written to file
running tests...
used time: Finished in 46.95 seconds
Failing tests: 2
	org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests::testGetRangeBounds$catena_6
	org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests::testGetRangeBounds$catena_7
pattern: 0001
try to fix hunk: 3
insert before 742 with         this.maximumRangeValueRow = -1;
        this.maximumRangeValueColumn = -1;
        int rowCount = getRowCount();
        int columnCount = getColumnCount();
        for (int r = 0; r < rowCount; r++) {
            for (int c = 0; c < columnCount; c++) {
                BoxAndWhiskerItem item = getItem(r, c);
                if (item != null) {
                    Number min = item.getMinOutlier();
                    if (min != null) {
                        double minv = min.doubleValue();
                        if (!Double.isNaN(minv)) {
                            if (minv < this.minimumRangeValue || Double.isNaN(
                                    this.minimumRangeValue)) {
                                this.minimumRangeValue = minv;
                                this.minimumRangeValueRow = r;
                                this.minimumRangeValueColumn = c;
                            }
                        }
                    }
                    Number max = item.getMaxOutlier();
                    if (max != null) {
                        double maxv = max.doubleValue();
                        if (!Double.isNaN(maxv)) {
                            if (maxv > this.maximumRangeValue || Double.isNaN(
                                    this.maximumRangeValue)) {
                                this.maximumRangeValue = maxv;
                                this.maximumRangeValueRow = r;
                                this.maximumRangeValueColumn = c;
                            }
                        }
                    }
                }
            }
        }

patches are written to file
running tests...
used time: Finished in 26.03 seconds
Failing tests: 0
No new failing tests but only 1 hunk
pattern: 0010
try to fix hunk: 2
insert before 741 with         this.minimumRangeValueRow = -1;
        this.minimumRangeValueColumn = -1;

patches are written to file
running tests...
used time: Finished in 30.76 seconds
Failing tests: 2
	org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests::testGetRangeBounds$catena_6
	org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests::testGetRangeBounds$catena_7
No new failing tests but only 1 hunk
pattern: 0100
try to fix hunk: 1
insert before 188 with         }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 1000
try to fix hunk: 0
insert before 157 with         else {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 0011
try to fix hunk: 2
insert before 741 with         this.minimumRangeValueRow = -1;
        this.minimumRangeValueColumn = -1;

try to fix hunk: 3
insert before 742 with         this.maximumRangeValueRow = -1;
        this.maximumRangeValueColumn = -1;
        int rowCount = getRowCount();
        int columnCount = getColumnCount();
        for (int r = 0; r < rowCount; r++) {
            for (int c = 0; c < columnCount; c++) {
                BoxAndWhiskerItem item = getItem(r, c);
                if (item != null) {
                    Number min = item.getMinOutlier();
                    if (min != null) {
                        double minv = min.doubleValue();
                        if (!Double.isNaN(minv)) {
                            if (minv < this.minimumRangeValue || Double.isNaN(
                                    this.minimumRangeValue)) {
                                this.minimumRangeValue = minv;
                                this.minimumRangeValueRow = r;
                                this.minimumRangeValueColumn = c;
                            }
                        }
                    }
                    Number max = item.getMaxOutlier();
                    if (max != null) {
                        double maxv = max.doubleValue();
                        if (!Double.isNaN(maxv)) {
                            if (maxv > this.maximumRangeValue || Double.isNaN(
                                    this.maximumRangeValue)) {
                                this.maximumRangeValue = maxv;
                                this.maximumRangeValueRow = r;
                                this.maximumRangeValueColumn = c;
                            }
                        }
                    }
                }
            }
        }

patches are written to file
running tests...
used time: Finished in 27.55 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
pattern: 0101
try to fix hunk: 1
insert before 188 with         }

try to fix hunk: 3
insert before 742 with         this.maximumRangeValueRow = -1;
        this.maximumRangeValueColumn = -1;
        int rowCount = getRowCount();
        int columnCount = getColumnCount();
        for (int r = 0; r < rowCount; r++) {
            for (int c = 0; c < columnCount; c++) {
                BoxAndWhiskerItem item = getItem(r, c);
                if (item != null) {
                    Number min = item.getMinOutlier();
                    if (min != null) {
                        double minv = min.doubleValue();
                        if (!Double.isNaN(minv)) {
                            if (minv < this.minimumRangeValue || Double.isNaN(
                                    this.minimumRangeValue)) {
                                this.minimumRangeValue = minv;
                                this.minimumRangeValueRow = r;
                                this.minimumRangeValueColumn = c;
                            }
                        }
                    }
                    Number max = item.getMaxOutlier();
                    if (max != null) {
                        double maxv = max.doubleValue();
                        if (!Double.isNaN(maxv)) {
                            if (maxv > this.maximumRangeValue || Double.isNaN(
                                    this.maximumRangeValue)) {
                                this.maximumRangeValue = maxv;
                                this.maximumRangeValueRow = r;
                                this.maximumRangeValueColumn = c;
                            }
                        }
                    }
                }
            }
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 0110
try to fix hunk: 1
insert before 188 with         }

try to fix hunk: 2
insert before 741 with         this.minimumRangeValueRow = -1;
        this.minimumRangeValueColumn = -1;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 1001
try to fix hunk: 0
insert before 157 with         else {

try to fix hunk: 3
insert before 742 with         this.maximumRangeValueRow = -1;
        this.maximumRangeValueColumn = -1;
        int rowCount = getRowCount();
        int columnCount = getColumnCount();
        for (int r = 0; r < rowCount; r++) {
            for (int c = 0; c < columnCount; c++) {
                BoxAndWhiskerItem item = getItem(r, c);
                if (item != null) {
                    Number min = item.getMinOutlier();
                    if (min != null) {
                        double minv = min.doubleValue();
                        if (!Double.isNaN(minv)) {
                            if (minv < this.minimumRangeValue || Double.isNaN(
                                    this.minimumRangeValue)) {
                                this.minimumRangeValue = minv;
                                this.minimumRangeValueRow = r;
                                this.minimumRangeValueColumn = c;
                            }
                        }
                    }
                    Number max = item.getMaxOutlier();
                    if (max != null) {
                        double maxv = max.doubleValue();
                        if (!Double.isNaN(maxv)) {
                            if (maxv > this.maximumRangeValue || Double.isNaN(
                                    this.maximumRangeValue)) {
                                this.maximumRangeValue = maxv;
                                this.maximumRangeValueRow = r;
                                this.maximumRangeValueColumn = c;
                            }
                        }
                    }
                }
            }
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 1010
try to fix hunk: 0
insert before 157 with         else {

try to fix hunk: 2
insert before 741 with         this.minimumRangeValueRow = -1;
        this.minimumRangeValueColumn = -1;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 1100
try to fix hunk: 0
insert before 157 with         else {

try to fix hunk: 1
insert before 188 with         }

patches are written to file
running tests...
used time: Finished in 34.97 seconds
Failing tests: 5
	org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests::testGetRangeBounds$catena_2
	org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests::testGetRangeBounds$catena_3
	org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests::testGetRangeBounds$catena_4
	org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests::testGetRangeBounds$catena_5
	org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests::testAddUpdatesCachedRange
Includes new failing tests, set to unusable
pattern: 0111
try to fix hunk: 1
insert before 188 with         }

try to fix hunk: 2
insert before 741 with         this.minimumRangeValueRow = -1;
        this.minimumRangeValueColumn = -1;

try to fix hunk: 3
insert before 742 with         this.maximumRangeValueRow = -1;
        this.maximumRangeValueColumn = -1;
        int rowCount = getRowCount();
        int columnCount = getColumnCount();
        for (int r = 0; r < rowCount; r++) {
            for (int c = 0; c < columnCount; c++) {
                BoxAndWhiskerItem item = getItem(r, c);
                if (item != null) {
                    Number min = item.getMinOutlier();
                    if (min != null) {
                        double minv = min.doubleValue();
                        if (!Double.isNaN(minv)) {
                            if (minv < this.minimumRangeValue || Double.isNaN(
                                    this.minimumRangeValue)) {
                                this.minimumRangeValue = minv;
                                this.minimumRangeValueRow = r;
                                this.minimumRangeValueColumn = c;
                            }
                        }
                    }
                    Number max = item.getMaxOutlier();
                    if (max != null) {
                        double maxv = max.doubleValue();
                        if (!Double.isNaN(maxv)) {
                            if (maxv > this.maximumRangeValue || Double.isNaN(
                                    this.maximumRangeValue)) {
                                this.maximumRangeValue = maxv;
                                this.maximumRangeValueRow = r;
                                this.maximumRangeValueColumn = c;
                            }
                        }
                    }
                }
            }
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 1011
try to fix hunk: 0
insert before 157 with         else {

try to fix hunk: 2
insert before 741 with         this.minimumRangeValueRow = -1;
        this.minimumRangeValueColumn = -1;

try to fix hunk: 3
insert before 742 with         this.maximumRangeValueRow = -1;
        this.maximumRangeValueColumn = -1;
        int rowCount = getRowCount();
        int columnCount = getColumnCount();
        for (int r = 0; r < rowCount; r++) {
            for (int c = 0; c < columnCount; c++) {
                BoxAndWhiskerItem item = getItem(r, c);
                if (item != null) {
                    Number min = item.getMinOutlier();
                    if (min != null) {
                        double minv = min.doubleValue();
                        if (!Double.isNaN(minv)) {
                            if (minv < this.minimumRangeValue || Double.isNaN(
                                    this.minimumRangeValue)) {
                                this.minimumRangeValue = minv;
                                this.minimumRangeValueRow = r;
                                this.minimumRangeValueColumn = c;
                            }
                        }
                    }
                    Number max = item.getMaxOutlier();
                    if (max != null) {
                        double maxv = max.doubleValue();
                        if (!Double.isNaN(maxv)) {
                            if (maxv > this.maximumRangeValue || Double.isNaN(
                                    this.maximumRangeValue)) {
                                this.maximumRangeValue = maxv;
                                this.maximumRangeValueRow = r;
                                this.maximumRangeValueColumn = c;
                            }
                        }
                    }
                }
            }
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 1101
try to fix hunk: 0
insert before 157 with         else {

try to fix hunk: 1
insert before 188 with         }

try to fix hunk: 3
insert before 742 with         this.maximumRangeValueRow = -1;
        this.maximumRangeValueColumn = -1;
        int rowCount = getRowCount();
        int columnCount = getColumnCount();
        for (int r = 0; r < rowCount; r++) {
            for (int c = 0; c < columnCount; c++) {
                BoxAndWhiskerItem item = getItem(r, c);
                if (item != null) {
                    Number min = item.getMinOutlier();
                    if (min != null) {
                        double minv = min.doubleValue();
                        if (!Double.isNaN(minv)) {
                            if (minv < this.minimumRangeValue || Double.isNaN(
                                    this.minimumRangeValue)) {
                                this.minimumRangeValue = minv;
                                this.minimumRangeValueRow = r;
                                this.minimumRangeValueColumn = c;
                            }
                        }
                    }
                    Number max = item.getMaxOutlier();
                    if (max != null) {
                        double maxv = max.doubleValue();
                        if (!Double.isNaN(maxv)) {
                            if (maxv > this.maximumRangeValue || Double.isNaN(
                                    this.maximumRangeValue)) {
                                this.maximumRangeValue = maxv;
                                this.maximumRangeValueRow = r;
                                this.maximumRangeValueColumn = c;
                            }
                        }
                    }
                }
            }
        }

patches are written to file
running tests...
used time: Finished in 30.25 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
pattern: 1110
try to fix hunk: 0
insert before 157 with         else {

try to fix hunk: 1
insert before 188 with         }

try to fix hunk: 2
insert before 741 with         this.minimumRangeValueRow = -1;
        this.minimumRangeValueColumn = -1;

patches are written to file
running tests...
used time: Finished in 34.27 seconds
Failing tests: 5
	org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests::testGetRangeBounds$catena_2
	org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests::testGetRangeBounds$catena_3
	org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests::testGetRangeBounds$catena_4
	org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests::testGetRangeBounds$catena_5
	org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests::testAddUpdatesCachedRange
Includes new failing tests, set to unusable
pattern: 1111
try to fix hunk: 0
insert before 157 with         else {

try to fix hunk: 1
insert before 188 with         }

try to fix hunk: 2
insert before 741 with         this.minimumRangeValueRow = -1;
        this.minimumRangeValueColumn = -1;

try to fix hunk: 3
insert before 742 with         this.maximumRangeValueRow = -1;
        this.maximumRangeValueColumn = -1;
        int rowCount = getRowCount();
        int columnCount = getColumnCount();
        for (int r = 0; r < rowCount; r++) {
            for (int c = 0; c < columnCount; c++) {
                BoxAndWhiskerItem item = getItem(r, c);
                if (item != null) {
                    Number min = item.getMinOutlier();
                    if (min != null) {
                        double minv = min.doubleValue();
                        if (!Double.isNaN(minv)) {
                            if (minv < this.minimumRangeValue || Double.isNaN(
                                    this.minimumRangeValue)) {
                                this.minimumRangeValue = minv;
                                this.minimumRangeValueRow = r;
                                this.minimumRangeValueColumn = c;
                            }
                        }
                    }
                    Number max = item.getMaxOutlier();
                    if (max != null) {
                        double maxv = max.doubleValue();
                        if (!Double.isNaN(maxv)) {
                            if (maxv > this.maximumRangeValue || Double.isNaN(
                                    this.maximumRangeValue)) {
                                this.maximumRangeValue = maxv;
                                this.maximumRangeValueRow = r;
                                this.maximumRangeValueColumn = c;
                            }
                        }
                    }
                }
            }
        }

patches are written to file
running tests...
used time: Finished in 31.47 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
Find 0 new bugs
