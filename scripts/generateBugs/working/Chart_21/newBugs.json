{
    "original": {
        "num_of_hunks": 4,
        "0": {
            "file_name": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
            "replaced_with": "        else {\n",
            "patch_type": "insert",
            "next_line_no": 157
        },
        "1": {
            "file_name": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
            "replaced_with": "        }\n",
            "patch_type": "insert",
            "next_line_no": 188
        },
        "2": {
            "file_name": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
            "replaced_with": "        this.minimumRangeValueRow = -1;\n        this.minimumRangeValueColumn = -1;\n",
            "patch_type": "insert",
            "next_line_no": 741
        },
        "3": {
            "file_name": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
            "replaced_with": "        this.maximumRangeValueRow = -1;\n        this.maximumRangeValueColumn = -1;\n        int rowCount = getRowCount();\n        int columnCount = getColumnCount();\n        for (int r = 0; r < rowCount; r++) {\n            for (int c = 0; c < columnCount; c++) {\n                BoxAndWhiskerItem item = getItem(r, c);\n                if (item != null) {\n                    Number min = item.getMinOutlier();\n                    if (min != null) {\n                        double minv = min.doubleValue();\n                        if (!Double.isNaN(minv)) {\n                            if (minv < this.minimumRangeValue || Double.isNaN(\n                                    this.minimumRangeValue)) {\n                                this.minimumRangeValue = minv;\n                                this.minimumRangeValueRow = r;\n                                this.minimumRangeValueColumn = c;\n                            }\n                        }\n                    }\n                    Number max = item.getMaxOutlier();\n                    if (max != null) {\n                        double maxv = max.doubleValue();\n                        if (!Double.isNaN(maxv)) {\n                            if (maxv > this.maximumRangeValue || Double.isNaN(\n                                    this.maximumRangeValue)) {\n                                this.maximumRangeValue = maxv;\n                                this.maximumRangeValueRow = r;\n                                this.maximumRangeValueColumn = c;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n",
            "patch_type": "insert",
            "next_line_no": 742
        }
    },
    "method": {
        "failing_tests": [
            "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests::testGetRangeBounds"
        ],
        "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests::testGetRangeBounds": {
            "file_path": "tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java",
            "Instance": "Begin: Pos(270, 12)\nEnd: Pos(294, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_21/tests//org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java\nName: testGetRangeBounds\nChilds: [StatementAssertion<Begin: Pos(275, 9), End: Pos(275, 68)>,\nStatementAssertion<Begin: Pos(276, 9), End: Pos(276, 67)>,\nStatementAssertion<Begin: Pos(280, 9), End: Pos(280, 68)>,\nStatementAssertion<Begin: Pos(281, 9), End: Pos(281, 67)>,\nStatementAssertion<Begin: Pos(285, 9), End: Pos(285, 68)>,\nStatementAssertion<Begin: Pos(286, 9), End: Pos(286, 67)>,\nStatementAssertion<Begin: Pos(292, 9), End: Pos(292, 68)>,\nStatementAssertion<Begin: Pos(293, 9), End: Pos(293, 67)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_21/tests//org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java",
            "name": "testGetRangeBounds",
            "begin": "Pos(270, 12)",
            "end": "Pos(294, 5)",
            "begin_line_no": 270,
            "end_line_no": 294,
            "child": [
                "Begin: Pos(275, 9)\nEnd: Pos(275, 68)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(276, 9)\nEnd: Pos(276, 67)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(280, 9)\nEnd: Pos(280, 68)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(281, 9)\nEnd: Pos(281, 67)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(285, 9)\nEnd: Pos(285, 68)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(286, 9)\nEnd: Pos(286, 67)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(292, 9)\nEnd: Pos(292, 68)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(293, 9)\nEnd: Pos(293, 67)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testGetRangeBounds$catena_0() {\n        DefaultBoxAndWhiskerCategoryDataset d1 \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, \n                new ArrayList()), \"R1\", \"C1\");\n        assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, \n                new ArrayList()), \"R2\", \"C1\");\n        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // this replaces the entry with the current minimum value, but the new\n        // minimum value is now in a different item\n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testGetRangeBounds$catena_1() {\n        DefaultBoxAndWhiskerCategoryDataset d1 \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, \n                new ArrayList()), \"R2\", \"C1\");\n        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // this replaces the entry with the current minimum value, but the new\n        // minimum value is now in a different item\n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testGetRangeBounds$catena_2() {\n        DefaultBoxAndWhiskerCategoryDataset d1 \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, \n                new ArrayList()), \"R1\", \"C1\");\n        assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, \n                new ArrayList()), \"R2\", \"C1\");\n        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // this replaces the entry with the current minimum value, but the new\n        // minimum value is now in a different item\n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testGetRangeBounds$catena_3() {\n        DefaultBoxAndWhiskerCategoryDataset d1 \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, \n                new ArrayList()), \"R2\", \"C1\");\n        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // this replaces the entry with the current minimum value, but the new\n        // minimum value is now in a different item\n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testGetRangeBounds$catena_4() {\n        DefaultBoxAndWhiskerCategoryDataset d1 \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, \n                new ArrayList()), \"R2\", \"C1\");\n        assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // this replaces the entry with the current minimum value, but the new\n        // minimum value is now in a different item\n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testGetRangeBounds$catena_5() {\n        DefaultBoxAndWhiskerCategoryDataset d1 \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, \n                new ArrayList()), \"R2\", \"C1\");\n        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // this replaces the entry with the current minimum value, but the new\n        // minimum value is now in a different item\n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testGetRangeBounds$catena_6() {\n        DefaultBoxAndWhiskerCategoryDataset d1 \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, \n                new ArrayList()), \"R2\", \"C1\");\n        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // this replaces the entry with the current minimum value, but the new\n        // minimum value is now in a different item\n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, \n                new ArrayList()), \"R1\", \"C1\");\n        assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testGetRangeBounds$catena_7() {\n        DefaultBoxAndWhiskerCategoryDataset d1 \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, \n                new ArrayList()), \"R2\", \"C1\");\n        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // this replaces the entry with the current minimum value, but the new\n        // minimum value is now in a different item\n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testGetRangeBounds$catena_0() {\n        DefaultBoxAndWhiskerCategoryDataset d1 \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, \n                new ArrayList()), \"R1\", \"C1\");\n        assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, \n                new ArrayList()), \"R2\", \"C1\");\n        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // this replaces the entry with the current minimum value, but the new\n        // minimum value is now in a different item\n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testGetRangeBounds$catena_1() {\n        DefaultBoxAndWhiskerCategoryDataset d1 \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, \n                new ArrayList()), \"R2\", \"C1\");\n        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // this replaces the entry with the current minimum value, but the new\n        // minimum value is now in a different item\n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testGetRangeBounds$catena_2() {\n        DefaultBoxAndWhiskerCategoryDataset d1 \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, \n                new ArrayList()), \"R1\", \"C1\");\n        assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, \n                new ArrayList()), \"R2\", \"C1\");\n        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // this replaces the entry with the current minimum value, but the new\n        // minimum value is now in a different item\n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void testGetRangeBounds$catena_3() {\n        DefaultBoxAndWhiskerCategoryDataset d1 \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, \n                new ArrayList()), \"R2\", \"C1\");\n        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // this replaces the entry with the current minimum value, but the new\n        // minimum value is now in a different item\n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    public void testGetRangeBounds$catena_4() {\n        DefaultBoxAndWhiskerCategoryDataset d1 \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, \n                new ArrayList()), \"R2\", \"C1\");\n        assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // this replaces the entry with the current minimum value, but the new\n        // minimum value is now in a different item\n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    public void testGetRangeBounds$catena_5() {\n        DefaultBoxAndWhiskerCategoryDataset d1 \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, \n                new ArrayList()), \"R2\", \"C1\");\n        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // this replaces the entry with the current minimum value, but the new\n        // minimum value is now in a different item\n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "6": "    public void testGetRangeBounds$catena_6() {\n        DefaultBoxAndWhiskerCategoryDataset d1 \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, \n                new ArrayList()), \"R2\", \"C1\");\n        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // this replaces the entry with the current minimum value, but the new\n        // minimum value is now in a different item\n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, \n                new ArrayList()), \"R1\", \"C1\");\n        assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "7": "    public void testGetRangeBounds$catena_7() {\n        DefaultBoxAndWhiskerCategoryDataset d1 \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, \n                new ArrayList()), \"R2\", \"C1\");\n        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // this replaces the entry with the current minimum value, but the new\n        // minimum value is now in a different item\n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, \n                new ArrayList()), \"R1\", \"C1\");\n        try{ assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "0001": {
        "failing_tests": [
            "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests::testGetRangeBounds$catena_6",
            "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests::testGetRangeBounds$catena_7"
        ]
    }
}