---
Begin generate bug_id: Closure_22
num_of_hunks: 5
use working dir: ./working/data/Closure_22
Try to checkout Closure_22
build dir: ['./working/data/Closure_22/build/classes', './working/data/Closure_22/build/test']
init FileManager
trace file: src/com/google/javascript/jscomp/CheckSideEffects.java
trace file: src/com/google/javascript/jscomp/CheckSideEffects.java
trace file: src/com/google/javascript/jscomp/CheckSideEffects.java
trace file: src/com/google/javascript/jscomp/CheckSideEffects.java
trace file: src/com/google/javascript/jscomp/CheckSideEffects.java
trying to replace old failing tests
edit: replace from 49 range 32 at test/com/google/javascript/jscomp/CheckSideEffectsTest.java
to
  public void testUselessCode$catena_0() {
    test("function f(x) { if(x) return; }", ok);                                                            /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("function f(x) { if(x); }", "function f(x) { if(x); }", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("if(x) x = y;", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if(x) x == bar();", "if(x) JSCOMPILER_PRESERVE(x == bar());", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("x = 3;", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("x == 3;", "JSCOMPILER_PRESERVE(x == 3);", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var x = 'test'", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var x = 'test'\n'str'",
         "var x = 'test'\nJSCOMPILER_PRESERVE('str')", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("foo();;;;bar();;;;", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var a, b; a = 5, b = 6", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = 5, b == 6",
         "var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (5, 6)",
         "var a, b; a = (JSCOMPILER_PRESERVE(5), 6)", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), 6, 7)",
         "var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), bar(), 7, 8)",
         "var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (b = 7, 6)", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(x(), 2));", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(2, 3));",
         "function x(){}\nfunction f(a, b){}\n" +
         "f(1,(JSCOMPILER_PRESERVE(2), 3));", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testUselessCode$catena_1() {
    try{ test("function f(x) { if(x) return; }", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    test("function f(x) { if(x); }", "function f(x) { if(x); }", e);                                        /***** ORIGINAL ASSERTION IS HERE *****/

    try{ test("if(x) x = y;", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if(x) x == bar();", "if(x) JSCOMPILER_PRESERVE(x == bar());", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("x = 3;", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("x == 3;", "JSCOMPILER_PRESERVE(x == 3);", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var x = 'test'", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var x = 'test'\n'str'",
         "var x = 'test'\nJSCOMPILER_PRESERVE('str')", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("foo();;;;bar();;;;", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var a, b; a = 5, b = 6", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = 5, b == 6",
         "var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (5, 6)",
         "var a, b; a = (JSCOMPILER_PRESERVE(5), 6)", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), 6, 7)",
         "var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), bar(), 7, 8)",
         "var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (b = 7, 6)", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(x(), 2));", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(2, 3));",
         "function x(){}\nfunction f(a, b){}\n" +
         "f(1,(JSCOMPILER_PRESERVE(2), 3));", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testUselessCode$catena_2() {
    try{ test("function f(x) { if(x) return; }", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function f(x) { if(x); }", "function f(x) { if(x); }", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    test("if(x) x = y;", ok);                                                                               /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("if(x) x == bar();", "if(x) JSCOMPILER_PRESERVE(x == bar());", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("x = 3;", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("x == 3;", "JSCOMPILER_PRESERVE(x == 3);", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var x = 'test'", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var x = 'test'\n'str'",
         "var x = 'test'\nJSCOMPILER_PRESERVE('str')", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("foo();;;;bar();;;;", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var a, b; a = 5, b = 6", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = 5, b == 6",
         "var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (5, 6)",
         "var a, b; a = (JSCOMPILER_PRESERVE(5), 6)", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), 6, 7)",
         "var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), bar(), 7, 8)",
         "var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (b = 7, 6)", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(x(), 2));", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(2, 3));",
         "function x(){}\nfunction f(a, b){}\n" +
         "f(1,(JSCOMPILER_PRESERVE(2), 3));", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testUselessCode$catena_3() {
    try{ test("function f(x) { if(x) return; }", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function f(x) { if(x); }", "function f(x) { if(x); }", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("if(x) x = y;", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    test("if(x) x == bar();", "if(x) JSCOMPILER_PRESERVE(x == bar());", e);                                 /***** ORIGINAL ASSERTION IS HERE *****/

    try{ test("x = 3;", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("x == 3;", "JSCOMPILER_PRESERVE(x == 3);", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var x = 'test'", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var x = 'test'\n'str'",
         "var x = 'test'\nJSCOMPILER_PRESERVE('str')", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("foo();;;;bar();;;;", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var a, b; a = 5, b = 6", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = 5, b == 6",
         "var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (5, 6)",
         "var a, b; a = (JSCOMPILER_PRESERVE(5), 6)", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), 6, 7)",
         "var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), bar(), 7, 8)",
         "var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (b = 7, 6)", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(x(), 2));", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(2, 3));",
         "function x(){}\nfunction f(a, b){}\n" +
         "f(1,(JSCOMPILER_PRESERVE(2), 3));", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testUselessCode$catena_4() {
    try{ test("function f(x) { if(x) return; }", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function f(x) { if(x); }", "function f(x) { if(x); }", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("if(x) x = y;", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if(x) x == bar();", "if(x) JSCOMPILER_PRESERVE(x == bar());", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}

    test("x = 3;", ok);                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("x == 3;", "JSCOMPILER_PRESERVE(x == 3);", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var x = 'test'", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var x = 'test'\n'str'",
         "var x = 'test'\nJSCOMPILER_PRESERVE('str')", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("foo();;;;bar();;;;", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var a, b; a = 5, b = 6", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = 5, b == 6",
         "var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (5, 6)",
         "var a, b; a = (JSCOMPILER_PRESERVE(5), 6)", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), 6, 7)",
         "var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), bar(), 7, 8)",
         "var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (b = 7, 6)", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(x(), 2));", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(2, 3));",
         "function x(){}\nfunction f(a, b){}\n" +
         "f(1,(JSCOMPILER_PRESERVE(2), 3));", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testUselessCode$catena_5() {
    try{ test("function f(x) { if(x) return; }", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function f(x) { if(x); }", "function f(x) { if(x); }", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("if(x) x = y;", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if(x) x == bar();", "if(x) JSCOMPILER_PRESERVE(x == bar());", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("x = 3;", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    test("x == 3;", "JSCOMPILER_PRESERVE(x == 3);", e);                                                     /***** ORIGINAL ASSERTION IS HERE *****/

    try{ test("var x = 'test'", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var x = 'test'\n'str'",
         "var x = 'test'\nJSCOMPILER_PRESERVE('str')", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("foo();;;;bar();;;;", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var a, b; a = 5, b = 6", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = 5, b == 6",
         "var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (5, 6)",
         "var a, b; a = (JSCOMPILER_PRESERVE(5), 6)", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), 6, 7)",
         "var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), bar(), 7, 8)",
         "var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (b = 7, 6)", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(x(), 2));", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(2, 3));",
         "function x(){}\nfunction f(a, b){}\n" +
         "f(1,(JSCOMPILER_PRESERVE(2), 3));", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testUselessCode$catena_6() {
    try{ test("function f(x) { if(x) return; }", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function f(x) { if(x); }", "function f(x) { if(x); }", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("if(x) x = y;", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if(x) x == bar();", "if(x) JSCOMPILER_PRESERVE(x == bar());", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("x = 3;", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("x == 3;", "JSCOMPILER_PRESERVE(x == 3);", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    test("var x = 'test'", ok);                                                                             /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("var x = 'test'\n'str'",
         "var x = 'test'\nJSCOMPILER_PRESERVE('str')", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("foo();;;;bar();;;;", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var a, b; a = 5, b = 6", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = 5, b == 6",
         "var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (5, 6)",
         "var a, b; a = (JSCOMPILER_PRESERVE(5), 6)", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), 6, 7)",
         "var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), bar(), 7, 8)",
         "var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (b = 7, 6)", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(x(), 2));", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(2, 3));",
         "function x(){}\nfunction f(a, b){}\n" +
         "f(1,(JSCOMPILER_PRESERVE(2), 3));", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testUselessCode$catena_7() {
    try{ test("function f(x) { if(x) return; }", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function f(x) { if(x); }", "function f(x) { if(x); }", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("if(x) x = y;", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if(x) x == bar();", "if(x) JSCOMPILER_PRESERVE(x == bar());", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("x = 3;", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("x == 3;", "JSCOMPILER_PRESERVE(x == 3);", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var x = 'test'", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    test("var x = 'test'\n'str'",
         "var x = 'test'\nJSCOMPILER_PRESERVE('str')", e);                                                  /***** ORIGINAL ASSERTION IS HERE *****/

    try{ test("", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("foo();;;;bar();;;;", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var a, b; a = 5, b = 6", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = 5, b == 6",
         "var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (5, 6)",
         "var a, b; a = (JSCOMPILER_PRESERVE(5), 6)", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), 6, 7)",
         "var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), bar(), 7, 8)",
         "var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (b = 7, 6)", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(x(), 2));", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(2, 3));",
         "function x(){}\nfunction f(a, b){}\n" +
         "f(1,(JSCOMPILER_PRESERVE(2), 3));", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testUselessCode$catena_8() {
    try{ test("function f(x) { if(x) return; }", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function f(x) { if(x); }", "function f(x) { if(x); }", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("if(x) x = y;", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if(x) x == bar();", "if(x) JSCOMPILER_PRESERVE(x == bar());", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("x = 3;", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("x == 3;", "JSCOMPILER_PRESERVE(x == 3);", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var x = 'test'", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var x = 'test'\n'str'",
         "var x = 'test'\nJSCOMPILER_PRESERVE('str')", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    test("", ok);                                                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("foo();;;;bar();;;;", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var a, b; a = 5, b = 6", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = 5, b == 6",
         "var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (5, 6)",
         "var a, b; a = (JSCOMPILER_PRESERVE(5), 6)", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), 6, 7)",
         "var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), bar(), 7, 8)",
         "var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (b = 7, 6)", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(x(), 2));", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(2, 3));",
         "function x(){}\nfunction f(a, b){}\n" +
         "f(1,(JSCOMPILER_PRESERVE(2), 3));", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testUselessCode$catena_9() {
    try{ test("function f(x) { if(x) return; }", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function f(x) { if(x); }", "function f(x) { if(x); }", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("if(x) x = y;", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if(x) x == bar();", "if(x) JSCOMPILER_PRESERVE(x == bar());", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("x = 3;", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("x == 3;", "JSCOMPILER_PRESERVE(x == 3);", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var x = 'test'", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var x = 'test'\n'str'",
         "var x = 'test'\nJSCOMPILER_PRESERVE('str')", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    test("foo();;;;bar();;;;", ok);                                                                         /***** ORIGINAL ASSERTION IS HERE *****/

    try{ test("var a, b; a = 5, b = 6", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = 5, b == 6",
         "var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (5, 6)",
         "var a, b; a = (JSCOMPILER_PRESERVE(5), 6)", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), 6, 7)",
         "var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), bar(), 7, 8)",
         "var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (b = 7, 6)", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(x(), 2));", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(2, 3));",
         "function x(){}\nfunction f(a, b){}\n" +
         "f(1,(JSCOMPILER_PRESERVE(2), 3));", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testUselessCode$catena_10() {
    try{ test("function f(x) { if(x) return; }", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function f(x) { if(x); }", "function f(x) { if(x); }", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("if(x) x = y;", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if(x) x == bar();", "if(x) JSCOMPILER_PRESERVE(x == bar());", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("x = 3;", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("x == 3;", "JSCOMPILER_PRESERVE(x == 3);", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var x = 'test'", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var x = 'test'\n'str'",
         "var x = 'test'\nJSCOMPILER_PRESERVE('str')", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("foo();;;;bar();;;;", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    test("var a, b; a = 5, b = 6", ok);                                                                     /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("var a, b; a = 5, b == 6",
         "var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (5, 6)",
         "var a, b; a = (JSCOMPILER_PRESERVE(5), 6)", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), 6, 7)",
         "var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), bar(), 7, 8)",
         "var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (b = 7, 6)", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(x(), 2));", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(2, 3));",
         "function x(){}\nfunction f(a, b){}\n" +
         "f(1,(JSCOMPILER_PRESERVE(2), 3));", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testUselessCode$catena_11() {
    try{ test("function f(x) { if(x) return; }", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function f(x) { if(x); }", "function f(x) { if(x); }", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("if(x) x = y;", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if(x) x == bar();", "if(x) JSCOMPILER_PRESERVE(x == bar());", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("x = 3;", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("x == 3;", "JSCOMPILER_PRESERVE(x == 3);", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var x = 'test'", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var x = 'test'\n'str'",
         "var x = 'test'\nJSCOMPILER_PRESERVE('str')", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("foo();;;;bar();;;;", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var a, b; a = 5, b = 6", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    test("var a, b; a = 5, b == 6",
         "var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)", e);                                                /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("var a, b; a = (5, 6)",
         "var a, b; a = (JSCOMPILER_PRESERVE(5), 6)", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), 6, 7)",
         "var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), bar(), 7, 8)",
         "var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (b = 7, 6)", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(x(), 2));", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(2, 3));",
         "function x(){}\nfunction f(a, b){}\n" +
         "f(1,(JSCOMPILER_PRESERVE(2), 3));", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testUselessCode$catena_12() {
    try{ test("function f(x) { if(x) return; }", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function f(x) { if(x); }", "function f(x) { if(x); }", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("if(x) x = y;", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if(x) x == bar();", "if(x) JSCOMPILER_PRESERVE(x == bar());", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("x = 3;", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("x == 3;", "JSCOMPILER_PRESERVE(x == 3);", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var x = 'test'", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var x = 'test'\n'str'",
         "var x = 'test'\nJSCOMPILER_PRESERVE('str')", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("foo();;;;bar();;;;", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var a, b; a = 5, b = 6", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = 5, b == 6",
         "var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    test("var a, b; a = (5, 6)",
         "var a, b; a = (JSCOMPILER_PRESERVE(5), 6)", e);                                                   /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("var a, b; a = (bar(), 6, 7)",
         "var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), bar(), 7, 8)",
         "var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (b = 7, 6)", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(x(), 2));", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(2, 3));",
         "function x(){}\nfunction f(a, b){}\n" +
         "f(1,(JSCOMPILER_PRESERVE(2), 3));", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testUselessCode$catena_13() {
    try{ test("function f(x) { if(x) return; }", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function f(x) { if(x); }", "function f(x) { if(x); }", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("if(x) x = y;", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if(x) x == bar();", "if(x) JSCOMPILER_PRESERVE(x == bar());", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("x = 3;", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("x == 3;", "JSCOMPILER_PRESERVE(x == 3);", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var x = 'test'", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var x = 'test'\n'str'",
         "var x = 'test'\nJSCOMPILER_PRESERVE('str')", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("foo();;;;bar();;;;", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var a, b; a = 5, b = 6", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = 5, b == 6",
         "var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (5, 6)",
         "var a, b; a = (JSCOMPILER_PRESERVE(5), 6)", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    test("var a, b; a = (bar(), 6, 7)",
         "var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)", e);                                            /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("var a, b; a = (bar(), bar(), 7, 8)",
         "var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (b = 7, 6)", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(x(), 2));", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(2, 3));",
         "function x(){}\nfunction f(a, b){}\n" +
         "f(1,(JSCOMPILER_PRESERVE(2), 3));", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testUselessCode$catena_14() {
    try{ test("function f(x) { if(x) return; }", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function f(x) { if(x); }", "function f(x) { if(x); }", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("if(x) x = y;", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if(x) x == bar();", "if(x) JSCOMPILER_PRESERVE(x == bar());", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("x = 3;", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("x == 3;", "JSCOMPILER_PRESERVE(x == 3);", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var x = 'test'", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var x = 'test'\n'str'",
         "var x = 'test'\nJSCOMPILER_PRESERVE('str')", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("foo();;;;bar();;;;", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var a, b; a = 5, b = 6", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = 5, b == 6",
         "var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (5, 6)",
         "var a, b; a = (JSCOMPILER_PRESERVE(5), 6)", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), 6, 7)",
         "var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    test("var a, b; a = (bar(), bar(), 7, 8)",
         "var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)", e);                                     /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("var a, b; a = (b = 7, 6)", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(x(), 2));", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(2, 3));",
         "function x(){}\nfunction f(a, b){}\n" +
         "f(1,(JSCOMPILER_PRESERVE(2), 3));", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testUselessCode$catena_15() {
    try{ test("function f(x) { if(x) return; }", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function f(x) { if(x); }", "function f(x) { if(x); }", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("if(x) x = y;", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if(x) x == bar();", "if(x) JSCOMPILER_PRESERVE(x == bar());", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("x = 3;", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("x == 3;", "JSCOMPILER_PRESERVE(x == 3);", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var x = 'test'", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var x = 'test'\n'str'",
         "var x = 'test'\nJSCOMPILER_PRESERVE('str')", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("foo();;;;bar();;;;", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var a, b; a = 5, b = 6", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = 5, b == 6",
         "var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (5, 6)",
         "var a, b; a = (JSCOMPILER_PRESERVE(5), 6)", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), 6, 7)",
         "var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), bar(), 7, 8)",
         "var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    test("var a, b; a = (b = 7, 6)", ok);                                                                   /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(x(), 2));", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(2, 3));",
         "function x(){}\nfunction f(a, b){}\n" +
         "f(1,(JSCOMPILER_PRESERVE(2), 3));", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testUselessCode$catena_16() {
    try{ test("function f(x) { if(x) return; }", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function f(x) { if(x); }", "function f(x) { if(x); }", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("if(x) x = y;", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if(x) x == bar();", "if(x) JSCOMPILER_PRESERVE(x == bar());", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("x = 3;", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("x == 3;", "JSCOMPILER_PRESERVE(x == 3);", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var x = 'test'", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var x = 'test'\n'str'",
         "var x = 'test'\nJSCOMPILER_PRESERVE('str')", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("foo();;;;bar();;;;", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var a, b; a = 5, b = 6", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = 5, b == 6",
         "var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (5, 6)",
         "var a, b; a = (JSCOMPILER_PRESERVE(5), 6)", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), 6, 7)",
         "var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), bar(), 7, 8)",
         "var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (b = 7, 6)", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    test("function x(){}\nfunction f(a, b){}\nf(1,(x(), 2));", ok);                                         /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(2, 3));",
         "function x(){}\nfunction f(a, b){}\n" +
         "f(1,(JSCOMPILER_PRESERVE(2), 3));", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testUselessCode$catena_17() {
    try{ test("function f(x) { if(x) return; }", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function f(x) { if(x); }", "function f(x) { if(x); }", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("if(x) x = y;", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("if(x) x == bar();", "if(x) JSCOMPILER_PRESERVE(x == bar());", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("x = 3;", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("x == 3;", "JSCOMPILER_PRESERVE(x == 3);", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var x = 'test'", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var x = 'test'\n'str'",
         "var x = 'test'\nJSCOMPILER_PRESERVE('str')", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("foo();;;;bar();;;;", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("var a, b; a = 5, b = 6", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = 5, b == 6",
         "var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (5, 6)",
         "var a, b; a = (JSCOMPILER_PRESERVE(5), 6)", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), 6, 7)",
         "var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (bar(), bar(), 7, 8)",
         "var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a, b; a = (b = 7, 6)", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function x(){}\nfunction f(a, b){}\nf(1,(x(), 2));", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    test("function x(){}\nfunction f(a, b){}\nf(1,(2, 3));",
         "function x(){}\nfunction f(a, b){}\n" +
         "f(1,(JSCOMPILER_PRESERVE(2), 3));", e);                                                           /***** ORIGINAL ASSERTION IS HERE *****/
  }
trace file: test/com/google/javascript/jscomp/CheckSideEffectsTest.java
new test num: 18
ori test num: 0
pattern: 00000
patches are written to file
running tests...
used time: Finished in 263.62 seconds
Failing tests: 2
	com.google.javascript.jscomp.CheckSideEffectsTest::testUselessCode$catena_13
	com.google.javascript.jscomp.CheckSideEffectsTest::testUselessCode$catena_14
pattern: 00001
try to fix hunk: 4
delete from 134 with range 5
patches are written to file
running tests...
used time: Finished in 257.37 seconds
Failing tests: 5
	com.google.javascript.jscomp.CheckSideEffectsTest::testTypeAnnotations
	com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
	com.google.javascript.jscomp.CheckSideEffectsTest::testUselessCode$catena_13
	com.google.javascript.jscomp.CheckSideEffectsTest::testUselessCode$catena_14
	com.google.javascript.jscomp.CommandLineRunnerTest::testFunctionStrictModeNoWarning
Includes new failing tests, set to unusable
pattern: 00010
try to fix hunk: 3
delete from 127 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 00100
try to fix hunk: 2
replace from 111 with range 15 to
    if (n.isQualifiedName() && n.getJSDocInfo() != null) {

patches are written to file
running tests...
used time: Finished in 253.18 seconds
Failing tests: 1
	com.google.javascript.jscomp.CheckSideEffectsTest::testUselessCodeInFor
Includes new failing tests, set to unusable
pattern: 01000
try to fix hunk: 1
delete from 106 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 10000
try to fix hunk: 0
replace from 101 with range 4 to
    if (n.isExprResult() || n.isBlock()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 00011
try to fix hunk: 3
delete from 127 with range 1
try to fix hunk: 4
delete from 134 with range 5
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 00101
try to fix hunk: 2
replace from 111 with range 15 to
    if (n.isQualifiedName() && n.getJSDocInfo() != null) {

try to fix hunk: 4
delete from 134 with range 5
patches are written to file
running tests...
used time: Finished in 257.12 seconds
Failing tests: 4
	com.google.javascript.jscomp.CheckSideEffectsTest::testUselessCodeInFor
	com.google.javascript.jscomp.CheckSideEffectsTest::testTypeAnnotations
	com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
	com.google.javascript.jscomp.CommandLineRunnerTest::testFunctionStrictModeNoWarning
Includes new failing tests, set to unusable
pattern: 00110
try to fix hunk: 2
replace from 111 with range 15 to
    if (n.isQualifiedName() && n.getJSDocInfo() != null) {

try to fix hunk: 3
delete from 127 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 01001
try to fix hunk: 1
delete from 106 with range 1
try to fix hunk: 4
delete from 134 with range 5
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 01010
try to fix hunk: 1
delete from 106 with range 1
try to fix hunk: 3
delete from 127 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 01100
try to fix hunk: 1
delete from 106 with range 1
try to fix hunk: 2
replace from 111 with range 15 to
    if (n.isQualifiedName() && n.getJSDocInfo() != null) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 10001
try to fix hunk: 0
replace from 101 with range 4 to
    if (n.isExprResult() || n.isBlock()) {

try to fix hunk: 4
delete from 134 with range 5
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 10010
try to fix hunk: 0
replace from 101 with range 4 to
    if (n.isExprResult() || n.isBlock()) {

try to fix hunk: 3
delete from 127 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 10100
try to fix hunk: 0
replace from 101 with range 4 to
    if (n.isExprResult() || n.isBlock()) {

try to fix hunk: 2
replace from 111 with range 15 to
    if (n.isQualifiedName() && n.getJSDocInfo() != null) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 11000
try to fix hunk: 0
replace from 101 with range 4 to
    if (n.isExprResult() || n.isBlock()) {

try to fix hunk: 1
delete from 106 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 00111
try to fix hunk: 2
replace from 111 with range 15 to
    if (n.isQualifiedName() && n.getJSDocInfo() != null) {

try to fix hunk: 3
delete from 127 with range 1
try to fix hunk: 4
delete from 134 with range 5
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 01011
try to fix hunk: 1
delete from 106 with range 1
try to fix hunk: 3
delete from 127 with range 1
try to fix hunk: 4
delete from 134 with range 5
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 01101
try to fix hunk: 1
delete from 106 with range 1
try to fix hunk: 2
replace from 111 with range 15 to
    if (n.isQualifiedName() && n.getJSDocInfo() != null) {

try to fix hunk: 4
delete from 134 with range 5
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 01110
try to fix hunk: 1
delete from 106 with range 1
try to fix hunk: 2
replace from 111 with range 15 to
    if (n.isQualifiedName() && n.getJSDocInfo() != null) {

try to fix hunk: 3
delete from 127 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 10011
try to fix hunk: 0
replace from 101 with range 4 to
    if (n.isExprResult() || n.isBlock()) {

try to fix hunk: 3
delete from 127 with range 1
try to fix hunk: 4
delete from 134 with range 5
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 10101
try to fix hunk: 0
replace from 101 with range 4 to
    if (n.isExprResult() || n.isBlock()) {

try to fix hunk: 2
replace from 111 with range 15 to
    if (n.isQualifiedName() && n.getJSDocInfo() != null) {

try to fix hunk: 4
delete from 134 with range 5
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 10110
try to fix hunk: 0
replace from 101 with range 4 to
    if (n.isExprResult() || n.isBlock()) {

try to fix hunk: 2
replace from 111 with range 15 to
    if (n.isQualifiedName() && n.getJSDocInfo() != null) {

try to fix hunk: 3
delete from 127 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 11001
try to fix hunk: 0
replace from 101 with range 4 to
    if (n.isExprResult() || n.isBlock()) {

try to fix hunk: 1
delete from 106 with range 1
try to fix hunk: 4
delete from 134 with range 5
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 11010
try to fix hunk: 0
replace from 101 with range 4 to
    if (n.isExprResult() || n.isBlock()) {

try to fix hunk: 1
delete from 106 with range 1
try to fix hunk: 3
delete from 127 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 11100
try to fix hunk: 0
replace from 101 with range 4 to
    if (n.isExprResult() || n.isBlock()) {

try to fix hunk: 1
delete from 106 with range 1
try to fix hunk: 2
replace from 111 with range 15 to
    if (n.isQualifiedName() && n.getJSDocInfo() != null) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 01111
try to fix hunk: 1
delete from 106 with range 1
try to fix hunk: 2
replace from 111 with range 15 to
    if (n.isQualifiedName() && n.getJSDocInfo() != null) {

try to fix hunk: 3
delete from 127 with range 1
try to fix hunk: 4
delete from 134 with range 5
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 10111
try to fix hunk: 0
replace from 101 with range 4 to
    if (n.isExprResult() || n.isBlock()) {

try to fix hunk: 2
replace from 111 with range 15 to
    if (n.isQualifiedName() && n.getJSDocInfo() != null) {

try to fix hunk: 3
delete from 127 with range 1
try to fix hunk: 4
delete from 134 with range 5
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 11011
try to fix hunk: 0
replace from 101 with range 4 to
    if (n.isExprResult() || n.isBlock()) {

try to fix hunk: 1
delete from 106 with range 1
try to fix hunk: 3
delete from 127 with range 1
try to fix hunk: 4
delete from 134 with range 5
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 11101
try to fix hunk: 0
replace from 101 with range 4 to
    if (n.isExprResult() || n.isBlock()) {

try to fix hunk: 1
delete from 106 with range 1
try to fix hunk: 2
replace from 111 with range 15 to
    if (n.isQualifiedName() && n.getJSDocInfo() != null) {

try to fix hunk: 4
delete from 134 with range 5
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 11110
try to fix hunk: 0
replace from 101 with range 4 to
    if (n.isExprResult() || n.isBlock()) {

try to fix hunk: 1
delete from 106 with range 1
try to fix hunk: 2
replace from 111 with range 15 to
    if (n.isQualifiedName() && n.getJSDocInfo() != null) {

try to fix hunk: 3
delete from 127 with range 1
patches are written to file
running tests...
used time: Finished in 269.08 seconds
Failing tests: 0
Can independently fix ['com.google.javascript.jscomp.CheckSideEffectsTest::testUselessCode$catena_13', 'com.google.javascript.jscomp.CheckSideEffectsTest::testUselessCode$catena_14']
select new bug
Pattern: 11110
failing tests: com.google.javascript.jscomp.CheckSideEffectsTest::testUselessCode$catena_13@com.google.javascript.jscomp.CheckSideEffectsTest::testUselessCode$catena_14
pattern: 11111
try to fix hunk: 0
replace from 101 with range 4 to
    if (n.isExprResult() || n.isBlock()) {

try to fix hunk: 1
delete from 106 with range 1
try to fix hunk: 2
replace from 111 with range 15 to
    if (n.isQualifiedName() && n.getJSDocInfo() != null) {

try to fix hunk: 3
delete from 127 with range 1
try to fix hunk: 4
delete from 134 with range 5
patches are written to file
running tests...
used time: Finished in 262.84 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
Find 1 new bugs
