---
Begin generate bug_id: Closure_145
num_of_hunks: 4
timeout for running: 3600
use working dir: ./working/data/Closure_145
Try to checkout Closure_145
build dir: ['./working/data/Closure_145/build/classes', './working/data/Closure_145/build/test']
init FileManager
trace file: src/com/google/javascript/jscomp/CodeGenerator.java
trying to replace old failing tests
edit: replace from 944 range 17 at test/com/google/javascript/jscomp/CodePrinterTest.java
to
  public void testFunctionSafariCompatiblity$catena_0() {
    // Functions within IFs cause syntax errors on Safari.
    assertPrint("function(){if(e1){function goo(){return true}}else foo()}",
        "function(){if(e1){function goo(){return true}}else foo()}");                                       /***** ORIGINAL ASSERTION IS HERE *****/

    try{ assertPrint("function(){if(e1)function goo(){return true}else foo()}",
        "function(){if(e1){function goo(){return true}}else foo()}");                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(e1){function goo(){return true}}",
        "if(e1){function goo(){return true}}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(e1)function goo(){return true}",
        "if(e1){function goo(){return true}}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(e1)A:function goo(){return true}",
        "if(e1){A:function goo(){return true}}");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFunctionSafariCompatiblity$catena_1() {
    // Functions within IFs cause syntax errors on Safari.
    try{ assertPrint("function(){if(e1){function goo(){return true}}else foo()}",
        "function(){if(e1){function goo(){return true}}else foo()}");                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    assertPrint("function(){if(e1)function goo(){return true}else foo()}",
        "function(){if(e1){function goo(){return true}}else foo()}");                                       /***** ORIGINAL ASSERTION IS HERE *****/

    try{ assertPrint("if(e1){function goo(){return true}}",
        "if(e1){function goo(){return true}}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(e1)function goo(){return true}",
        "if(e1){function goo(){return true}}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(e1)A:function goo(){return true}",
        "if(e1){A:function goo(){return true}}");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFunctionSafariCompatiblity$catena_2() {
    // Functions within IFs cause syntax errors on Safari.
    try{ assertPrint("function(){if(e1){function goo(){return true}}else foo()}",
        "function(){if(e1){function goo(){return true}}else foo()}");                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("function(){if(e1)function goo(){return true}else foo()}",
        "function(){if(e1){function goo(){return true}}else foo()}");                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    assertPrint("if(e1){function goo(){return true}}",
        "if(e1){function goo(){return true}}");                                                             /***** ORIGINAL ASSERTION IS HERE *****/

    try{ assertPrint("if(e1)function goo(){return true}",
        "if(e1){function goo(){return true}}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(e1)A:function goo(){return true}",
        "if(e1){A:function goo(){return true}}");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFunctionSafariCompatiblity$catena_3() {
    // Functions within IFs cause syntax errors on Safari.
    try{ assertPrint("function(){if(e1){function goo(){return true}}else foo()}",
        "function(){if(e1){function goo(){return true}}else foo()}");                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("function(){if(e1)function goo(){return true}else foo()}",
        "function(){if(e1){function goo(){return true}}else foo()}");                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(e1){function goo(){return true}}",
        "if(e1){function goo(){return true}}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    assertPrint("if(e1)function goo(){return true}",
        "if(e1){function goo(){return true}}");                                                             /***** ORIGINAL ASSERTION IS HERE *****/

    try{ assertPrint("if(e1)A:function goo(){return true}",
        "if(e1){A:function goo(){return true}}");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFunctionSafariCompatiblity$catena_4() {
    // Functions within IFs cause syntax errors on Safari.
    try{ assertPrint("function(){if(e1){function goo(){return true}}else foo()}",
        "function(){if(e1){function goo(){return true}}else foo()}");                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("function(){if(e1)function goo(){return true}else foo()}",
        "function(){if(e1){function goo(){return true}}else foo()}");                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(e1){function goo(){return true}}",
        "if(e1){function goo(){return true}}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(e1)function goo(){return true}",
        "if(e1){function goo(){return true}}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    assertPrint("if(e1)A:function goo(){return true}",
        "if(e1){A:function goo(){return true}}");                                                           /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 917 range 26 at test/com/google/javascript/jscomp/CodePrinterTest.java
to
  public void testDoLoopIECompatiblity$catena_0() {
    // Do loops within IFs cause syntax errors in IE6 and IE7.
    assertPrint("function(){if(e1){do foo();while(e2)}else foo()}",
        "function(){if(e1){do foo();while(e2)}else foo()}");                                                /***** ORIGINAL ASSERTION IS HERE *****/

    try{ assertPrint("function(){if(e1)do foo();while(e2)else foo()}",
        "function(){if(e1){do foo();while(e2)}else foo()}");                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(x){do{foo()}while(y)}else bar()",
        "if(x){do foo();while(y)}else bar()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(x)do{foo()}while(y);else bar()",
        "if(x){do foo();while(y)}else bar()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(x){do{foo()}while(y)}",
        "if(x){do foo();while(y)}");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(x)do{foo()}while(y);",
        "if(x){do foo();while(y)}");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(x)A:do{foo()}while(y);",
        "if(x){A:do foo();while(y)}");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertPrint("var i = 0;a: do{b: do{i++;break b;} while(0);} while(0);",
        "var i=0;a:do{b:do{i++;break b}while(0)}while(0)");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDoLoopIECompatiblity$catena_1() {
    // Do loops within IFs cause syntax errors in IE6 and IE7.
    try{ assertPrint("function(){if(e1){do foo();while(e2)}else foo()}",
        "function(){if(e1){do foo();while(e2)}else foo()}");                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    assertPrint("function(){if(e1)do foo();while(e2)else foo()}",
        "function(){if(e1){do foo();while(e2)}else foo()}");                                                /***** ORIGINAL ASSERTION IS HERE *****/

    try{ assertPrint("if(x){do{foo()}while(y)}else bar()",
        "if(x){do foo();while(y)}else bar()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(x)do{foo()}while(y);else bar()",
        "if(x){do foo();while(y)}else bar()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(x){do{foo()}while(y)}",
        "if(x){do foo();while(y)}");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(x)do{foo()}while(y);",
        "if(x){do foo();while(y)}");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(x)A:do{foo()}while(y);",
        "if(x){A:do foo();while(y)}");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertPrint("var i = 0;a: do{b: do{i++;break b;} while(0);} while(0);",
        "var i=0;a:do{b:do{i++;break b}while(0)}while(0)");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDoLoopIECompatiblity$catena_2() {
    // Do loops within IFs cause syntax errors in IE6 and IE7.
    try{ assertPrint("function(){if(e1){do foo();while(e2)}else foo()}",
        "function(){if(e1){do foo();while(e2)}else foo()}");                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("function(){if(e1)do foo();while(e2)else foo()}",
        "function(){if(e1){do foo();while(e2)}else foo()}");                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    assertPrint("if(x){do{foo()}while(y)}else bar()",
        "if(x){do foo();while(y)}else bar()");                                                              /***** ORIGINAL ASSERTION IS HERE *****/

    try{ assertPrint("if(x)do{foo()}while(y);else bar()",
        "if(x){do foo();while(y)}else bar()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(x){do{foo()}while(y)}",
        "if(x){do foo();while(y)}");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(x)do{foo()}while(y);",
        "if(x){do foo();while(y)}");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(x)A:do{foo()}while(y);",
        "if(x){A:do foo();while(y)}");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertPrint("var i = 0;a: do{b: do{i++;break b;} while(0);} while(0);",
        "var i=0;a:do{b:do{i++;break b}while(0)}while(0)");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDoLoopIECompatiblity$catena_3() {
    // Do loops within IFs cause syntax errors in IE6 and IE7.
    try{ assertPrint("function(){if(e1){do foo();while(e2)}else foo()}",
        "function(){if(e1){do foo();while(e2)}else foo()}");                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("function(){if(e1)do foo();while(e2)else foo()}",
        "function(){if(e1){do foo();while(e2)}else foo()}");                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(x){do{foo()}while(y)}else bar()",
        "if(x){do foo();while(y)}else bar()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    assertPrint("if(x)do{foo()}while(y);else bar()",
        "if(x){do foo();while(y)}else bar()");                                                              /***** ORIGINAL ASSERTION IS HERE *****/

    try{ assertPrint("if(x){do{foo()}while(y)}",
        "if(x){do foo();while(y)}");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(x)do{foo()}while(y);",
        "if(x){do foo();while(y)}");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(x)A:do{foo()}while(y);",
        "if(x){A:do foo();while(y)}");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertPrint("var i = 0;a: do{b: do{i++;break b;} while(0);} while(0);",
        "var i=0;a:do{b:do{i++;break b}while(0)}while(0)");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDoLoopIECompatiblity$catena_4() {
    // Do loops within IFs cause syntax errors in IE6 and IE7.
    try{ assertPrint("function(){if(e1){do foo();while(e2)}else foo()}",
        "function(){if(e1){do foo();while(e2)}else foo()}");                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("function(){if(e1)do foo();while(e2)else foo()}",
        "function(){if(e1){do foo();while(e2)}else foo()}");                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(x){do{foo()}while(y)}else bar()",
        "if(x){do foo();while(y)}else bar()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(x)do{foo()}while(y);else bar()",
        "if(x){do foo();while(y)}else bar()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    assertPrint("if(x){do{foo()}while(y)}",
        "if(x){do foo();while(y)}");                                                                        /***** ORIGINAL ASSERTION IS HERE *****/

    try{ assertPrint("if(x)do{foo()}while(y);",
        "if(x){do foo();while(y)}");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(x)A:do{foo()}while(y);",
        "if(x){A:do foo();while(y)}");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertPrint("var i = 0;a: do{b: do{i++;break b;} while(0);} while(0);",
        "var i=0;a:do{b:do{i++;break b}while(0)}while(0)");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDoLoopIECompatiblity$catena_5() {
    // Do loops within IFs cause syntax errors in IE6 and IE7.
    try{ assertPrint("function(){if(e1){do foo();while(e2)}else foo()}",
        "function(){if(e1){do foo();while(e2)}else foo()}");                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("function(){if(e1)do foo();while(e2)else foo()}",
        "function(){if(e1){do foo();while(e2)}else foo()}");                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(x){do{foo()}while(y)}else bar()",
        "if(x){do foo();while(y)}else bar()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(x)do{foo()}while(y);else bar()",
        "if(x){do foo();while(y)}else bar()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(x){do{foo()}while(y)}",
        "if(x){do foo();while(y)}");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

    assertPrint("if(x)do{foo()}while(y);",
        "if(x){do foo();while(y)}");                                                                        /***** ORIGINAL ASSERTION IS HERE *****/

    try{ assertPrint("if(x)A:do{foo()}while(y);",
        "if(x){A:do foo();while(y)}");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertPrint("var i = 0;a: do{b: do{i++;break b;} while(0);} while(0);",
        "var i=0;a:do{b:do{i++;break b}while(0)}while(0)");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDoLoopIECompatiblity$catena_6() {
    // Do loops within IFs cause syntax errors in IE6 and IE7.
    try{ assertPrint("function(){if(e1){do foo();while(e2)}else foo()}",
        "function(){if(e1){do foo();while(e2)}else foo()}");                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("function(){if(e1)do foo();while(e2)else foo()}",
        "function(){if(e1){do foo();while(e2)}else foo()}");                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(x){do{foo()}while(y)}else bar()",
        "if(x){do foo();while(y)}else bar()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(x)do{foo()}while(y);else bar()",
        "if(x){do foo();while(y)}else bar()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(x){do{foo()}while(y)}",
        "if(x){do foo();while(y)}");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(x)do{foo()}while(y);",
        "if(x){do foo();while(y)}");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

    assertPrint("if(x)A:do{foo()}while(y);",
        "if(x){A:do foo();while(y)}");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/
    
    try{ assertPrint("var i = 0;a: do{b: do{i++;break b;} while(0);} while(0);",
        "var i=0;a:do{b:do{i++;break b}while(0)}while(0)");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDoLoopIECompatiblity$catena_7() {
    // Do loops within IFs cause syntax errors in IE6 and IE7.
    try{ assertPrint("function(){if(e1){do foo();while(e2)}else foo()}",
        "function(){if(e1){do foo();while(e2)}else foo()}");                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("function(){if(e1)do foo();while(e2)else foo()}",
        "function(){if(e1){do foo();while(e2)}else foo()}");                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(x){do{foo()}while(y)}else bar()",
        "if(x){do foo();while(y)}else bar()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(x)do{foo()}while(y);else bar()",
        "if(x){do foo();while(y)}else bar()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(x){do{foo()}while(y)}",
        "if(x){do foo();while(y)}");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(x)do{foo()}while(y);",
        "if(x){do foo();while(y)}");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertPrint("if(x)A:do{foo()}while(y);",
        "if(x){A:do foo();while(y)}");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    
    assertPrint("var i = 0;a: do{b: do{i++;break b;} while(0);} while(0);",
        "var i=0;a:do{b:do{i++;break b}while(0)}while(0)");                                                 /***** ORIGINAL ASSERTION IS HERE *****/
  }
trace file: test/com/google/javascript/jscomp/CodePrinterTest.java
new test num: 13
ori test num: 0
pattern: 0000
patches are written to file
running tests...
used time: Finished in 124.06 seconds
Failing tests: 3
	com.google.javascript.jscomp.CodePrinterTest::testFunctionSafariCompatiblity$catena_4
	com.google.javascript.jscomp.CodePrinterTest::testDoLoopIECompatiblity$catena_6
	com.google.javascript.jscomp.CodePrinterTest::testDoLoopIECompatiblity$catena_7
processed: 0000
pattern: 0001
try to fix hunk: 3
insert before 715 with     }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001
pattern: 0010
try to fix hunk: 2
insert before 714 with           return false;
        }
      }
    } else {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010
pattern: 0100
try to fix hunk: 1
insert before 712 with         if (getNonEmptyChildCount(n, 2) == 1) { 
          return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));
        } else {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100
pattern: 1000
try to fix hunk: 0
insert before 709 with     if (n.getType() == Token.LABEL) {
      Node labeledStatement = n.getLastChild();
      if (labeledStatement.getType() != Token.BLOCK) {
        return isOneExactlyFunctionOrDo(labeledStatement);
      } else {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000
pattern: 0011
try to fix hunk: 2
insert before 714 with           return false;
        }
      }
    } else {

try to fix hunk: 3
insert before 715 with     }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0011
pattern: 0101
try to fix hunk: 1
insert before 712 with         if (getNonEmptyChildCount(n, 2) == 1) { 
          return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));
        } else {

try to fix hunk: 3
insert before 715 with     }

patches are written to file
running tests...
used time: Finished in 114.55 seconds
Failing tests: 3
	com.google.javascript.jscomp.CodePrinterTest::testFunctionSafariCompatiblity$catena_4
	com.google.javascript.jscomp.CodePrinterTest::testDoLoopIECompatiblity$catena_6
	com.google.javascript.jscomp.CodePrinterTest::testDoLoopIECompatiblity$catena_7
Can independently fix []
Could not fix independently
processed: 0101
pattern: 0110
try to fix hunk: 1
insert before 712 with         if (getNonEmptyChildCount(n, 2) == 1) { 
          return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));
        } else {

try to fix hunk: 2
insert before 714 with           return false;
        }
      }
    } else {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110
pattern: 1001
try to fix hunk: 0
insert before 709 with     if (n.getType() == Token.LABEL) {
      Node labeledStatement = n.getLastChild();
      if (labeledStatement.getType() != Token.BLOCK) {
        return isOneExactlyFunctionOrDo(labeledStatement);
      } else {

try to fix hunk: 3
insert before 715 with     }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001
pattern: 1010
try to fix hunk: 0
insert before 709 with     if (n.getType() == Token.LABEL) {
      Node labeledStatement = n.getLastChild();
      if (labeledStatement.getType() != Token.BLOCK) {
        return isOneExactlyFunctionOrDo(labeledStatement);
      } else {

try to fix hunk: 2
insert before 714 with           return false;
        }
      }
    } else {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010
pattern: 1100
try to fix hunk: 0
insert before 709 with     if (n.getType() == Token.LABEL) {
      Node labeledStatement = n.getLastChild();
      if (labeledStatement.getType() != Token.BLOCK) {
        return isOneExactlyFunctionOrDo(labeledStatement);
      } else {

try to fix hunk: 1
insert before 712 with         if (getNonEmptyChildCount(n, 2) == 1) { 
          return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));
        } else {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1100
pattern: 0111
try to fix hunk: 1
insert before 712 with         if (getNonEmptyChildCount(n, 2) == 1) { 
          return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));
        } else {

try to fix hunk: 2
insert before 714 with           return false;
        }
      }
    } else {

try to fix hunk: 3
insert before 715 with     }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0111
pattern: 1011
try to fix hunk: 0
insert before 709 with     if (n.getType() == Token.LABEL) {
      Node labeledStatement = n.getLastChild();
      if (labeledStatement.getType() != Token.BLOCK) {
        return isOneExactlyFunctionOrDo(labeledStatement);
      } else {

try to fix hunk: 2
insert before 714 with           return false;
        }
      }
    } else {

try to fix hunk: 3
insert before 715 with     }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1011
pattern: 1101
try to fix hunk: 0
insert before 709 with     if (n.getType() == Token.LABEL) {
      Node labeledStatement = n.getLastChild();
      if (labeledStatement.getType() != Token.BLOCK) {
        return isOneExactlyFunctionOrDo(labeledStatement);
      } else {

try to fix hunk: 1
insert before 712 with         if (getNonEmptyChildCount(n, 2) == 1) { 
          return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));
        } else {

try to fix hunk: 3
insert before 715 with     }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1101
pattern: 1110
try to fix hunk: 0
insert before 709 with     if (n.getType() == Token.LABEL) {
      Node labeledStatement = n.getLastChild();
      if (labeledStatement.getType() != Token.BLOCK) {
        return isOneExactlyFunctionOrDo(labeledStatement);
      } else {

try to fix hunk: 1
insert before 712 with         if (getNonEmptyChildCount(n, 2) == 1) { 
          return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));
        } else {

try to fix hunk: 2
insert before 714 with           return false;
        }
      }
    } else {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1110
pattern: 1111
try to fix hunk: 0
insert before 709 with     if (n.getType() == Token.LABEL) {
      Node labeledStatement = n.getLastChild();
      if (labeledStatement.getType() != Token.BLOCK) {
        return isOneExactlyFunctionOrDo(labeledStatement);
      } else {

try to fix hunk: 1
insert before 712 with         if (getNonEmptyChildCount(n, 2) == 1) { 
          return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));
        } else {

try to fix hunk: 2
insert before 714 with           return false;
        }
      }
    } else {

try to fix hunk: 3
insert before 715 with     }

patches are written to file
running tests...
used time: Finished in 111.64 seconds
Failing tests: 0
Can independently fix ['com.google.javascript.jscomp.CodePrinterTest::testDoLoopIECompatiblity$catena_7', 'com.google.javascript.jscomp.CodePrinterTest::testDoLoopIECompatiblity$catena_6', 'com.google.javascript.jscomp.CodePrinterTest::testFunctionSafariCompatiblity$catena_4']
select new bug
Pattern: 1111
new failing tests:
com.google.javascript.jscomp.CodePrinterTest::testDoLoopIECompatiblity$catena_7
com.google.javascript.jscomp.CodePrinterTest::testDoLoopIECompatiblity$catena_6
com.google.javascript.jscomp.CodePrinterTest::testFunctionSafariCompatiblity$catena_4
Save found bug
processed: 1111
Find 1 new bugs
