---
Begin generate bug_id: Closure_47
num_of_hunks: 3
use working dir: ./working/data/Closure_47
Try to checkout Closure_47
build dir: ['./working/data/Closure_47/build/classes', './working/data/Closure_47/build/test']
init FileManager
trace file: src/com/google/debugging/sourcemap/SourceMapConsumerV3.java
trace file: src/com/google/javascript/jscomp/SourceMap.java
trace file: src/com/google/javascript/jscomp/SourceMap.java
trying to replace old failing tests
edit: replace from 146 range 31 at test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
to
  public void testGoldenOutput1$catena_0() throws Exception {
    detailLevel = SourceMap.DetailLevel.ALL;

    checkSourceMap("function f(foo, bar) { foo = foo + bar + 2; return foo; }",

                   "{\n" +
                   "\"version\":3,\n" +
                   "\"file\":\"testcode\",\n" +
                   "\"lineCount\":1,\n" +
                   "\"mappings\":\"AAAAA,QAASA,EAAC,CAACC,GAAD,CAAMC,GAAN," +
                       "CAAW,CAAED,GAAA,CAAMA,GAAN,CAAYC,GAAZ,CAAkB,CAAG," +
                       "OAAOD,IAA9B;\",\n" +
                   "\"sources\":[\"testcode\"],\n" +
                   "\"names\":[\"f\",\"foo\",\"bar\"]\n" +
                   "}\n");                                                                                  /***** ORIGINAL ASSERTION IS HERE *****/

    detailLevel = SourceMap.DetailLevel.SYMBOLS;

    try{ checkSourceMap("function f(foo, bar) { foo = foo + bar + 2; return foo; }",

                   "{\n" +
                   "\"version\":3,\n" +
                   "\"file\":\"testcode\",\n" +
                   "\"lineCount\":1,\n" +
                   "\"mappings\":\"AAAAA,QAASA,EAATA,CAAWC,GAAXD,CAAgBE," +
                       "GAAhBF,EAAuBC,GAAvBD,CAA6BC,GAA7BD,CAAmCE,GAAnCF," +
                       "SAAmDC,IAAnDD;\",\n" +
                   "\"sources\":[\"testcode\"],\n" +
                   "\"names\":[\"f\",\"foo\",\"bar\"]\n" +
                   "}\n");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testGoldenOutput1$catena_1() throws Exception {
    detailLevel = SourceMap.DetailLevel.ALL;

    try{ checkSourceMap("function f(foo, bar) { foo = foo + bar + 2; return foo; }",

                   "{\n" +
                   "\"version\":3,\n" +
                   "\"file\":\"testcode\",\n" +
                   "\"lineCount\":1,\n" +
                   "\"mappings\":\"AAAAA,QAASA,EAAC,CAACC,GAAD,CAAMC,GAAN," +
                       "CAAW,CAAED,GAAA,CAAMA,GAAN,CAAYC,GAAZ,CAAkB,CAAG," +
                       "OAAOD,IAA9B;\",\n" +
                   "\"sources\":[\"testcode\"],\n" +
                   "\"names\":[\"f\",\"foo\",\"bar\"]\n" +
                   "}\n");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    detailLevel = SourceMap.DetailLevel.SYMBOLS;

    checkSourceMap("function f(foo, bar) { foo = foo + bar + 2; return foo; }",

                   "{\n" +
                   "\"version\":3,\n" +
                   "\"file\":\"testcode\",\n" +
                   "\"lineCount\":1,\n" +
                   "\"mappings\":\"AAAAA,QAASA,EAATA,CAAWC,GAAXD,CAAgBE," +
                       "GAAhBF,EAAuBC,GAAvBD,CAA6BC,GAA7BD,CAAmCE,GAAnCF," +
                       "SAAmDC,IAAnDD;\",\n" +
                   "\"sources\":[\"testcode\"],\n" +
                   "\"names\":[\"f\",\"foo\",\"bar\"]\n" +
                   "}\n");                                                                                  /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 222 range 90 at test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
to
  public void testGoldenOutput5$catena_0() throws Exception {
    detailLevel = SourceMap.DetailLevel.ALL;

    checkSourceMap(
        "c:\\myfile.js",
        "/** @preserve\n" +
        " * this is a test.\n" +
        " */\n" +
        "var foo=a + 'this is a really long line that will force the"
        + " mapping to span multiple lines 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + "' + c + d + e;",

        "{\n" +
        "\"version\":3,\n" +
        "\"file\":\"testcode\",\n" +
        "\"lineCount\":6,\n" +
        "\"mappings\":\"A;;;;AAGA,IAAIA,IAAIC,CAAJD,CAAQ,mxCAARA;AAA8xCE," +
            "CAA9xCF,CAAkyCG,CAAlyCH,CAAsyCI;\",\n" +
        "\"sources\":[\"c:\\\\myfile.js\"],\n" +
        "\"names\":[\"foo\",\"a\",\"c\",\"d\",\"e\"]\n" +
        "}\n");                                                                                             /***** ORIGINAL ASSERTION IS HERE *****/

    detailLevel = SourceMap.DetailLevel.SYMBOLS;

    try{ checkSourceMap("c:\\myfile.js",
        "/** @preserve\n" +
        " * this is a test.\n" +
        " */\n" +
        "var foo=a + 'this is a really long line that will force the"
        + " mapping to span multiple lines 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + "' + c + d + e;",

        "{\n" +
        "\"version\":3,\n" +
        "\"file\":\"testcode\",\n" +
        "\"lineCount\":6,\n" +
        "\"mappings\":\"A;;;;IAGIA,IAAIC,CAAJD;AAA8xCE,CAA9xCF,CAAkyCG," +
            "CAAlyCH,CAAsyCI;\",\n" +
        "\"sources\":[\"c:\\\\myfile.js\"],\n" +
        "\"names\":[\"foo\",\"a\",\"c\",\"d\",\"e\"]\n" +
        "}\n");                                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testGoldenOutput5$catena_1() throws Exception {
    detailLevel = SourceMap.DetailLevel.ALL;

    try{ checkSourceMap(
        "c:\\myfile.js",
        "/** @preserve\n" +
        " * this is a test.\n" +
        " */\n" +
        "var foo=a + 'this is a really long line that will force the"
        + " mapping to span multiple lines 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + "' + c + d + e;",

        "{\n" +
        "\"version\":3,\n" +
        "\"file\":\"testcode\",\n" +
        "\"lineCount\":6,\n" +
        "\"mappings\":\"A;;;;AAGA,IAAIA,IAAIC,CAAJD,CAAQ,mxCAARA;AAA8xCE," +
            "CAA9xCF,CAAkyCG,CAAlyCH,CAAsyCI;\",\n" +
        "\"sources\":[\"c:\\\\myfile.js\"],\n" +
        "\"names\":[\"foo\",\"a\",\"c\",\"d\",\"e\"]\n" +
        "}\n");                                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    detailLevel = SourceMap.DetailLevel.SYMBOLS;

    checkSourceMap("c:\\myfile.js",
        "/** @preserve\n" +
        " * this is a test.\n" +
        " */\n" +
        "var foo=a + 'this is a really long line that will force the"
        + " mapping to span multiple lines 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + " 123456789 123456789 123456789 123456789 123456789"
        + "' + c + d + e;",

        "{\n" +
        "\"version\":3,\n" +
        "\"file\":\"testcode\",\n" +
        "\"lineCount\":6,\n" +
        "\"mappings\":\"A;;;;IAGIA,IAAIC,CAAJD;AAA8xCE,CAA9xCF,CAAkyCG," +
            "CAAlyCH,CAAsyCI;\",\n" +
        "\"sources\":[\"c:\\\\myfile.js\"],\n" +
        "\"names\":[\"foo\",\"a\",\"c\",\"d\",\"e\"]\n" +
        "}\n");                                                                                             /***** ORIGINAL ASSERTION IS HERE *****/
  }
trace file: test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
new test num: 4
ori test num: 14
pattern: 000
patches are written to file
running tests...
used time: Finished in 237.18 seconds
Failing tests: 18
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testParseSourceMetaMap
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput0a
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput5$catena_0
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput5$catena_1
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultilineMapping
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultiFunctionMapping
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testLiteralMappingsGoldenOutput
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultilineMapping2
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput1$catena_0
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput1$catena_1
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMappingGoldenOutput
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testSourceMapMerging
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testLiteralMappings
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMapping1
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMapping2
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput2
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput3
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput4
pattern: 001
try to fix hunk: 2
replace from 141 with range 1 to
        new FilePosition(node.getLineno() - lineBaseOffset, node.getCharno()),

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 010
try to fix hunk: 1
insert before 138 with     int lineBaseOffset = 1;
    if (generator instanceof SourceMapGeneratorV1
        || generator instanceof SourceMapGeneratorV2) {
      lineBaseOffset = 0;
    }

patches are written to file
running tests...
used time: Finished in 212.79 seconds
Failing tests: 18
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testParseSourceMetaMap
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput0a
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput5$catena_0
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput5$catena_1
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultilineMapping
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultiFunctionMapping
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testLiteralMappingsGoldenOutput
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultilineMapping2
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput1$catena_0
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput1$catena_1
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMappingGoldenOutput
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testSourceMapMerging
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testLiteralMappings
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMapping1
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMapping2
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput2
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput3
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput4
No new failing tests but only 1 hunk
pattern: 100
try to fix hunk: 0
replace from 489 with range 2 to
        .setLineNumber(entry.getSourceLine() + 1)
        .setColumnPosition(entry.getSourceColumn() + 1);

patches are written to file
running tests...
used time: Finished in 219.90 seconds
Failing tests: 18
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testParseSourceMetaMap
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput0a
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput5$catena_0
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput5$catena_1
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultilineMapping
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultiFunctionMapping
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testLiteralMappingsGoldenOutput
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultilineMapping2
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput1$catena_0
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput1$catena_1
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMappingGoldenOutput
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testSourceMapMerging
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testLiteralMappings
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMapping1
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMapping2
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput2
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput3
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput4
No new failing tests but only 1 hunk
pattern: 011
try to fix hunk: 1
insert before 138 with     int lineBaseOffset = 1;
    if (generator instanceof SourceMapGeneratorV1
        || generator instanceof SourceMapGeneratorV2) {
      lineBaseOffset = 0;
    }

try to fix hunk: 2
replace from 141 with range 1 to
        new FilePosition(node.getLineno() - lineBaseOffset, node.getCharno()),

patches are written to file
running tests...
used time: Finished in 220.19 seconds
Failing tests: 8
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testParseSourceMetaMap
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultilineMapping
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultiFunctionMapping
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultilineMapping2
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testSourceMapMerging
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testLiteralMappings
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMapping1
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMapping2
Can independently fix ['com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput1$catena_0', 'com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMappingGoldenOutput', 'com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testLiteralMappingsGoldenOutput', 'com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput0a', 'com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput5$catena_1', 'com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput5$catena_0', 'com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput1$catena_1', 'com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput2', 'com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput3', 'com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput4']
select new bug
Pattern: 011
failing tests: com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput1$catena_0@com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMappingGoldenOutput@com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testLiteralMappingsGoldenOutput@com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput0a@com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput5$catena_1@com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput5$catena_0@com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput1$catena_1@com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput2@com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput3@com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput4
pattern: 101
try to fix hunk: 0
replace from 489 with range 2 to
        .setLineNumber(entry.getSourceLine() + 1)
        .setColumnPosition(entry.getSourceColumn() + 1);

try to fix hunk: 2
replace from 141 with range 1 to
        new FilePosition(node.getLineno() - lineBaseOffset, node.getCharno()),

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 110
try to fix hunk: 0
replace from 489 with range 2 to
        .setLineNumber(entry.getSourceLine() + 1)
        .setColumnPosition(entry.getSourceColumn() + 1);

try to fix hunk: 1
insert before 138 with     int lineBaseOffset = 1;
    if (generator instanceof SourceMapGeneratorV1
        || generator instanceof SourceMapGeneratorV2) {
      lineBaseOffset = 0;
    }

patches are written to file
running tests...
used time: Finished in 226.12 seconds
Failing tests: 18
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testParseSourceMetaMap
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput0a
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput5$catena_0
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput5$catena_1
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultilineMapping
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultiFunctionMapping
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testLiteralMappingsGoldenOutput
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultilineMapping2
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput1$catena_0
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput1$catena_1
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMappingGoldenOutput
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testSourceMapMerging
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testLiteralMappings
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMapping1
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMapping2
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput2
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput3
	com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput4
Can independently fix []
Could not fix independently
pattern: 111
try to fix hunk: 0
replace from 489 with range 2 to
        .setLineNumber(entry.getSourceLine() + 1)
        .setColumnPosition(entry.getSourceColumn() + 1);

try to fix hunk: 1
insert before 138 with     int lineBaseOffset = 1;
    if (generator instanceof SourceMapGeneratorV1
        || generator instanceof SourceMapGeneratorV2) {
      lineBaseOffset = 0;
    }

try to fix hunk: 2
replace from 141 with range 1 to
        new FilePosition(node.getLineno() - lineBaseOffset, node.getCharno()),

patches are written to file
running tests...
used time: Finished in 231.64 seconds
Failing tests: 0
Can independently fix ['com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMapping1', 'com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultilineMapping2', 'com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testSourceMapMerging', 'com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMapping2', 'com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testLiteralMappings', 'com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultiFunctionMapping', 'com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testParseSourceMetaMap', 'com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultilineMapping']
select new bug
Pattern: 111
failing tests: com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMapping1@com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultilineMapping2@com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testSourceMapMerging@com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMapping2@com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testLiteralMappings@com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultiFunctionMapping@com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testParseSourceMetaMap@com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultilineMapping
Find 2 new bugs
