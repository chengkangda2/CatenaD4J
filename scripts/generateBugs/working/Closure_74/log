---
Begin generate bug_id: Closure_74
num_of_hunks: 2
use working dir: ./working/data/Closure_74
Try to checkout Closure_74
build dir: ['./working/data/Closure_74/build/classes', './working/data/Closure_74/build/test']
init FileManager
trace file: src/com/google/javascript/jscomp/PeepholeFoldConstants.java
trace file: src/com/google/javascript/jscomp/PeepholeFoldConstants.java
trying to replace old failing tests
edit: replace from 699 range 25 at test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
to
  public void testFoldComparison3$catena_0() {
    fold("x = !1 == !0", "x = false");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/

    try{ fold("x = !0 == !0", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !1", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 == !0", "true");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == !0", "false");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 === !0", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !1", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !0", "x = false");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 === !0", "true");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === !0", "false");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldComparison3$catena_1() {
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    fold("x = !0 == !0", "x = true");                                                                       /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = !1 == !1", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 == !0", "true");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == !0", "false");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 === !0", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !1", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !0", "x = false");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 === !0", "true");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === !0", "false");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldComparison3$catena_2() {
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 == !0", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = !1 == !1", "x = true");                                                                       /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = !1 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 == !0", "true");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == !0", "false");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 === !0", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !1", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !0", "x = false");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 === !0", "true");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === !0", "false");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldComparison3$catena_3() {
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 == !0", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !1", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = !1 == null", "x = false");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 == !0", "true");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == !0", "false");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 === !0", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !1", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !0", "x = false");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 === !0", "true");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === !0", "false");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldComparison3$catena_4() {
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 == !0", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !1", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = !1 == !0", "x = false");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = !0 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 == !0", "true");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == !0", "false");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 === !0", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !1", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !0", "x = false");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 === !0", "true");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === !0", "false");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldComparison3$catena_5() {
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 == !0", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !1", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = !0 == null", "x = false");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/

    try{ fold("!0 == !0", "true");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == !0", "false");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 === !0", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !1", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !0", "x = false");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 === !0", "true");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === !0", "false");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldComparison3$catena_6() {
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 == !0", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !1", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    fold("!0 == !0", "true");                                                                               /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("!1 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == !0", "false");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 === !0", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !1", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !0", "x = false");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 === !0", "true");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === !0", "false");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldComparison3$catena_7() {
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 == !0", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !1", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 == !0", "true");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("!1 == null", "false");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("!1 == !0", "false");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 === !0", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !1", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !0", "x = false");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 === !0", "true");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === !0", "false");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldComparison3$catena_8() {
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 == !0", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !1", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 == !0", "true");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("!1 == !0", "false");                                                                              /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("!0 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 === !0", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !1", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !0", "x = false");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 === !0", "true");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === !0", "false");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldComparison3$catena_9() {
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 == !0", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !1", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 == !0", "true");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == !0", "false");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("!0 == null", "false");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/

    try{ fold("x = !0 === !0", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !1", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !0", "x = false");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 === !0", "true");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === !0", "false");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldComparison3$catena_10() {
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 == !0", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !1", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 == !0", "true");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == !0", "false");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    fold("x = !0 === !0", "x = true");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = !1 === !1", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !0", "x = false");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 === !0", "true");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === !0", "false");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldComparison3$catena_11() {
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 == !0", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !1", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 == !0", "true");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == !0", "false");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 === !0", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = !1 === !1", "x = true");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = !1 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !0", "x = false");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 === !0", "true");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === !0", "false");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldComparison3$catena_12() {
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 == !0", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !1", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 == !0", "true");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == !0", "false");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 === !0", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !1", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = !1 === null", "x = false");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = !1 === !0", "x = false");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 === !0", "true");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === !0", "false");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldComparison3$catena_13() {
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 == !0", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !1", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 == !0", "true");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == !0", "false");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 === !0", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !1", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = !1 === !0", "x = false");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = !0 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 === !0", "true");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === !0", "false");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldComparison3$catena_14() {
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 == !0", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !1", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 == !0", "true");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == !0", "false");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 === !0", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !1", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !0", "x = false");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = !0 === null", "x = false");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/

    try{ fold("!0 === !0", "true");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === !0", "false");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldComparison3$catena_15() {
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 == !0", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !1", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 == !0", "true");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == !0", "false");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 === !0", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !1", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !0", "x = false");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    fold("!0 === !0", "true");                                                                              /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("!1 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === !0", "false");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldComparison3$catena_16() {
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 == !0", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !1", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 == !0", "true");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == !0", "false");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 === !0", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !1", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !0", "x = false");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 === !0", "true");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("!1 === null", "false");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("!1 === !0", "false");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldComparison3$catena_17() {
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 == !0", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !1", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 == !0", "true");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == !0", "false");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 === !0", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !1", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !0", "x = false");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 === !0", "true");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("!1 === !0", "false");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("!0 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldComparison3$catena_18() {
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 == !0", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !1", "x = true");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 == !0", "x = false");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 == null", "x = false");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 == !0", "true");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 == !0", "false");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!0 == null", "false");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = !0 === !0", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !1", "x = true");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !1 === !0", "x = false");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = !0 === null", "x = false");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("!0 === !0", "true");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === null", "false");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("!1 === !0", "false");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("!0 === null", "false");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 1094 range 45 at test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
to
  public void testInvertibleOperators$catena_0() {
    Map<String, String> inverses = ImmutableMap.<String, String>builder()
        .put("==", "!=")
        .put("===", "!==")
        .put("<=", ">")
        .put("<", ">=")
        .put(">=", "<")
        .put(">", "<=")
        .put("!=", "==")
        .put("!==", "===")
        .build();
    Set<String> comparators = ImmutableSet.of("<=", "<", ">=", ">");
    Set<String> equalitors = ImmutableSet.of("==", "===");
    Set<String> uncomparables = ImmutableSet.of("undefined", "void 0");
    List<String> operators = ImmutableList.copyOf(inverses.values());
    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {
      for (int iOperandB = 0;
           iOperandB < LITERAL_OPERANDS.size();
           iOperandB++) {
        for (int iOp = 0; iOp < operators.size(); iOp++) {
          String a = LITERAL_OPERANDS.get(iOperandA);
          String b = LITERAL_OPERANDS.get(iOperandB);
          String op = operators.get(iOp);
          String inverse = inverses.get(op);

          // Test invertability.
          if (comparators.contains(op) &&
              (uncomparables.contains(a) || uncomparables.contains(b))) {
            assertSameResults(join(a, op, b), "false");                                                     /***** ORIGINAL ASSERTION IS HERE *****/
            try{ assertSameResults(join(a, inverse, b), "false");                                           }catch(Throwable __SHOULD_BE_IGNORED){}
          } else if (a.equals(b) && equalitors.contains(op)) {
            if (a.equals("NaN") || a.equals("Infinity")) {
              try{ foldSame(join(a, op, b));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
              try{ foldSame(join(a, inverse, b));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
            } else {
              try{ assertSameResults(join(a, op, b), "true");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
              try{ assertSameResults(join(a, inverse, b), "false");                                         }catch(Throwable __SHOULD_BE_IGNORED){}
            }
          } else {
            try{ assertNotSameResults(join(a, op, b), join(a, inverse, b));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
          }
        }
      }
    }
  }   public void testInvertibleOperators$catena_1() {
    Map<String, String> inverses = ImmutableMap.<String, String>builder()
        .put("==", "!=")
        .put("===", "!==")
        .put("<=", ">")
        .put("<", ">=")
        .put(">=", "<")
        .put(">", "<=")
        .put("!=", "==")
        .put("!==", "===")
        .build();
    Set<String> comparators = ImmutableSet.of("<=", "<", ">=", ">");
    Set<String> equalitors = ImmutableSet.of("==", "===");
    Set<String> uncomparables = ImmutableSet.of("undefined", "void 0");
    List<String> operators = ImmutableList.copyOf(inverses.values());
    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {
      for (int iOperandB = 0;
           iOperandB < LITERAL_OPERANDS.size();
           iOperandB++) {
        for (int iOp = 0; iOp < operators.size(); iOp++) {
          String a = LITERAL_OPERANDS.get(iOperandA);
          String b = LITERAL_OPERANDS.get(iOperandB);
          String op = operators.get(iOp);
          String inverse = inverses.get(op);

          // Test invertability.
          if (comparators.contains(op) &&
              (uncomparables.contains(a) || uncomparables.contains(b))) {
            try{ assertSameResults(join(a, op, b), "false");                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            assertSameResults(join(a, inverse, b), "false");                                                /***** ORIGINAL ASSERTION IS HERE *****/
          } else if (a.equals(b) && equalitors.contains(op)) {
            if (a.equals("NaN") || a.equals("Infinity")) {
              try{ foldSame(join(a, op, b));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
              try{ foldSame(join(a, inverse, b));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
            } else {
              try{ assertSameResults(join(a, op, b), "true");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
              try{ assertSameResults(join(a, inverse, b), "false");                                         }catch(Throwable __SHOULD_BE_IGNORED){}
            }
          } else {
            try{ assertNotSameResults(join(a, op, b), join(a, inverse, b));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
          }
        }
      }
    }
  }   public void testInvertibleOperators$catena_2() {
    Map<String, String> inverses = ImmutableMap.<String, String>builder()
        .put("==", "!=")
        .put("===", "!==")
        .put("<=", ">")
        .put("<", ">=")
        .put(">=", "<")
        .put(">", "<=")
        .put("!=", "==")
        .put("!==", "===")
        .build();
    Set<String> comparators = ImmutableSet.of("<=", "<", ">=", ">");
    Set<String> equalitors = ImmutableSet.of("==", "===");
    Set<String> uncomparables = ImmutableSet.of("undefined", "void 0");
    List<String> operators = ImmutableList.copyOf(inverses.values());
    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {
      for (int iOperandB = 0;
           iOperandB < LITERAL_OPERANDS.size();
           iOperandB++) {
        for (int iOp = 0; iOp < operators.size(); iOp++) {
          String a = LITERAL_OPERANDS.get(iOperandA);
          String b = LITERAL_OPERANDS.get(iOperandB);
          String op = operators.get(iOp);
          String inverse = inverses.get(op);

          // Test invertability.
          if (comparators.contains(op) &&
              (uncomparables.contains(a) || uncomparables.contains(b))) {
            try{ assertSameResults(join(a, op, b), "false");                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertSameResults(join(a, inverse, b), "false");                                           }catch(Throwable __SHOULD_BE_IGNORED){}
          } else if (a.equals(b) && equalitors.contains(op)) {
            if (a.equals("NaN") || a.equals("Infinity")) {
              foldSame(join(a, op, b));                                                                     /***** ORIGINAL ASSERTION IS HERE *****/
              try{ foldSame(join(a, inverse, b));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
            } else {
              try{ assertSameResults(join(a, op, b), "true");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
              try{ assertSameResults(join(a, inverse, b), "false");                                         }catch(Throwable __SHOULD_BE_IGNORED){}
            }
          } else {
            try{ assertNotSameResults(join(a, op, b), join(a, inverse, b));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
          }
        }
      }
    }
  }   public void testInvertibleOperators$catena_3() {
    Map<String, String> inverses = ImmutableMap.<String, String>builder()
        .put("==", "!=")
        .put("===", "!==")
        .put("<=", ">")
        .put("<", ">=")
        .put(">=", "<")
        .put(">", "<=")
        .put("!=", "==")
        .put("!==", "===")
        .build();
    Set<String> comparators = ImmutableSet.of("<=", "<", ">=", ">");
    Set<String> equalitors = ImmutableSet.of("==", "===");
    Set<String> uncomparables = ImmutableSet.of("undefined", "void 0");
    List<String> operators = ImmutableList.copyOf(inverses.values());
    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {
      for (int iOperandB = 0;
           iOperandB < LITERAL_OPERANDS.size();
           iOperandB++) {
        for (int iOp = 0; iOp < operators.size(); iOp++) {
          String a = LITERAL_OPERANDS.get(iOperandA);
          String b = LITERAL_OPERANDS.get(iOperandB);
          String op = operators.get(iOp);
          String inverse = inverses.get(op);

          // Test invertability.
          if (comparators.contains(op) &&
              (uncomparables.contains(a) || uncomparables.contains(b))) {
            try{ assertSameResults(join(a, op, b), "false");                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertSameResults(join(a, inverse, b), "false");                                           }catch(Throwable __SHOULD_BE_IGNORED){}
          } else if (a.equals(b) && equalitors.contains(op)) {
            if (a.equals("NaN") || a.equals("Infinity")) {
              try{ foldSame(join(a, op, b));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
              foldSame(join(a, inverse, b));                                                                /***** ORIGINAL ASSERTION IS HERE *****/
            } else {
              try{ assertSameResults(join(a, op, b), "true");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
              try{ assertSameResults(join(a, inverse, b), "false");                                         }catch(Throwable __SHOULD_BE_IGNORED){}
            }
          } else {
            try{ assertNotSameResults(join(a, op, b), join(a, inverse, b));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
          }
        }
      }
    }
  }   public void testInvertibleOperators$catena_4() {
    Map<String, String> inverses = ImmutableMap.<String, String>builder()
        .put("==", "!=")
        .put("===", "!==")
        .put("<=", ">")
        .put("<", ">=")
        .put(">=", "<")
        .put(">", "<=")
        .put("!=", "==")
        .put("!==", "===")
        .build();
    Set<String> comparators = ImmutableSet.of("<=", "<", ">=", ">");
    Set<String> equalitors = ImmutableSet.of("==", "===");
    Set<String> uncomparables = ImmutableSet.of("undefined", "void 0");
    List<String> operators = ImmutableList.copyOf(inverses.values());
    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {
      for (int iOperandB = 0;
           iOperandB < LITERAL_OPERANDS.size();
           iOperandB++) {
        for (int iOp = 0; iOp < operators.size(); iOp++) {
          String a = LITERAL_OPERANDS.get(iOperandA);
          String b = LITERAL_OPERANDS.get(iOperandB);
          String op = operators.get(iOp);
          String inverse = inverses.get(op);

          // Test invertability.
          if (comparators.contains(op) &&
              (uncomparables.contains(a) || uncomparables.contains(b))) {
            try{ assertSameResults(join(a, op, b), "false");                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertSameResults(join(a, inverse, b), "false");                                           }catch(Throwable __SHOULD_BE_IGNORED){}
          } else if (a.equals(b) && equalitors.contains(op)) {
            if (a.equals("NaN") || a.equals("Infinity")) {
              try{ foldSame(join(a, op, b));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
              try{ foldSame(join(a, inverse, b));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
            } else {
              assertSameResults(join(a, op, b), "true");                                                    /***** ORIGINAL ASSERTION IS HERE *****/
              try{ assertSameResults(join(a, inverse, b), "false");                                         }catch(Throwable __SHOULD_BE_IGNORED){}
            }
          } else {
            try{ assertNotSameResults(join(a, op, b), join(a, inverse, b));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
          }
        }
      }
    }
  }   public void testInvertibleOperators$catena_5() {
    Map<String, String> inverses = ImmutableMap.<String, String>builder()
        .put("==", "!=")
        .put("===", "!==")
        .put("<=", ">")
        .put("<", ">=")
        .put(">=", "<")
        .put(">", "<=")
        .put("!=", "==")
        .put("!==", "===")
        .build();
    Set<String> comparators = ImmutableSet.of("<=", "<", ">=", ">");
    Set<String> equalitors = ImmutableSet.of("==", "===");
    Set<String> uncomparables = ImmutableSet.of("undefined", "void 0");
    List<String> operators = ImmutableList.copyOf(inverses.values());
    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {
      for (int iOperandB = 0;
           iOperandB < LITERAL_OPERANDS.size();
           iOperandB++) {
        for (int iOp = 0; iOp < operators.size(); iOp++) {
          String a = LITERAL_OPERANDS.get(iOperandA);
          String b = LITERAL_OPERANDS.get(iOperandB);
          String op = operators.get(iOp);
          String inverse = inverses.get(op);

          // Test invertability.
          if (comparators.contains(op) &&
              (uncomparables.contains(a) || uncomparables.contains(b))) {
            try{ assertSameResults(join(a, op, b), "false");                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertSameResults(join(a, inverse, b), "false");                                           }catch(Throwable __SHOULD_BE_IGNORED){}
          } else if (a.equals(b) && equalitors.contains(op)) {
            if (a.equals("NaN") || a.equals("Infinity")) {
              try{ foldSame(join(a, op, b));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
              try{ foldSame(join(a, inverse, b));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
            } else {
              try{ assertSameResults(join(a, op, b), "true");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
              assertSameResults(join(a, inverse, b), "false");                                              /***** ORIGINAL ASSERTION IS HERE *****/
            }
          } else {
            try{ assertNotSameResults(join(a, op, b), join(a, inverse, b));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
          }
        }
      }
    }
  }   public void testInvertibleOperators$catena_6() {
    Map<String, String> inverses = ImmutableMap.<String, String>builder()
        .put("==", "!=")
        .put("===", "!==")
        .put("<=", ">")
        .put("<", ">=")
        .put(">=", "<")
        .put(">", "<=")
        .put("!=", "==")
        .put("!==", "===")
        .build();
    Set<String> comparators = ImmutableSet.of("<=", "<", ">=", ">");
    Set<String> equalitors = ImmutableSet.of("==", "===");
    Set<String> uncomparables = ImmutableSet.of("undefined", "void 0");
    List<String> operators = ImmutableList.copyOf(inverses.values());
    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {
      for (int iOperandB = 0;
           iOperandB < LITERAL_OPERANDS.size();
           iOperandB++) {
        for (int iOp = 0; iOp < operators.size(); iOp++) {
          String a = LITERAL_OPERANDS.get(iOperandA);
          String b = LITERAL_OPERANDS.get(iOperandB);
          String op = operators.get(iOp);
          String inverse = inverses.get(op);

          // Test invertability.
          if (comparators.contains(op) &&
              (uncomparables.contains(a) || uncomparables.contains(b))) {
            try{ assertSameResults(join(a, op, b), "false");                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertSameResults(join(a, inverse, b), "false");                                           }catch(Throwable __SHOULD_BE_IGNORED){}
          } else if (a.equals(b) && equalitors.contains(op)) {
            if (a.equals("NaN") || a.equals("Infinity")) {
              try{ foldSame(join(a, op, b));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
              try{ foldSame(join(a, inverse, b));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
            } else {
              try{ assertSameResults(join(a, op, b), "true");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
              try{ assertSameResults(join(a, inverse, b), "false");                                         }catch(Throwable __SHOULD_BE_IGNORED){}
            }
          } else {
            assertNotSameResults(join(a, op, b), join(a, inverse, b));                                      /***** ORIGINAL ASSERTION IS HERE *****/
          }
        }
      }
    }
  }
trace file: test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
new test num: 26
ori test num: 1
pattern: 00
patches are written to file
running tests...
used time: Finished in 199.16 seconds
Failing tests: 24
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testInvertibleOperators$catena_0
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testInvertibleOperators$catena_1
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testInvertibleOperators$catena_4
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testInvertibleOperators$catena_5
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testCommutativeOperators
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_0
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_1
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_2
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_3
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_4
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_5
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_6
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_7
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_8
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_9
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_10
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_11
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_12
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_13
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_14
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_15
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_16
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_17
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_18
pattern: 01
try to fix hunk: 1
insert before 1074 with   private int getNormalizedNodeType(Node n) {
    int type = n.getType();
    if (type == Token.NOT) {
      TernaryValue value = NodeUtil.getPureBooleanValue(n);
      switch (value) {
        case TRUE:
          return Token.TRUE;
        case FALSE:
          return Token.FALSE;
      }
    }
    return type;
  }

patches are written to file
running tests...
used time: Finished in 187.61 seconds
Failing tests: 24
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testInvertibleOperators$catena_0
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testInvertibleOperators$catena_1
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testInvertibleOperators$catena_4
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testInvertibleOperators$catena_5
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testCommutativeOperators
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_0
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_1
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_2
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_3
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_4
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_5
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_6
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_7
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_8
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_9
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_10
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_11
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_12
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_13
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_14
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_15
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_16
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_17
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_18
No new failing tests but only 1 hunk
pattern: 10
try to fix hunk: 0
replace from 907 with range 2 to
    int lhType = getNormalizedNodeType(left);
    int rhType = getNormalizedNodeType(right);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 11
try to fix hunk: 0
replace from 907 with range 2 to
    int lhType = getNormalizedNodeType(left);
    int rhType = getNormalizedNodeType(right);

try to fix hunk: 1
insert before 1074 with   private int getNormalizedNodeType(Node n) {
    int type = n.getType();
    if (type == Token.NOT) {
      TernaryValue value = NodeUtil.getPureBooleanValue(n);
      switch (value) {
        case TRUE:
          return Token.TRUE;
        case FALSE:
          return Token.FALSE;
      }
    }
    return type;
  }

patches are written to file
running tests...
used time: Finished in 198.50 seconds
Failing tests: 0
Can independently fix ['com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_1', 'com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_17', 'com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_3', 'com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_0', 'com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_13', 'com.google.javascript.jscomp.PeepholeFoldConstantsTest::testInvertibleOperators$catena_1', 'com.google.javascript.jscomp.PeepholeFoldConstantsTest::testInvertibleOperators$catena_4', 'com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_14', 'com.google.javascript.jscomp.PeepholeFoldConstantsTest::testCommutativeOperators', 'com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_9', 'com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_8', 'com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_2', 'com.google.javascript.jscomp.PeepholeFoldConstantsTest::testInvertibleOperators$catena_0', 'com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_4', 'com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_18', 'com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_12', 'com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_5', 'com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_6', 'com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_15', 'com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_16', 'com.google.javascript.jscomp.PeepholeFoldConstantsTest::testInvertibleOperators$catena_5', 'com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_11', 'com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_7', 'com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_10']
select new bug
Pattern: 11
failing tests: com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_1@com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_17@com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_3@com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_0@com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_13@com.google.javascript.jscomp.PeepholeFoldConstantsTest::testInvertibleOperators$catena_1@com.google.javascript.jscomp.PeepholeFoldConstantsTest::testInvertibleOperators$catena_4@com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_14@com.google.javascript.jscomp.PeepholeFoldConstantsTest::testCommutativeOperators@com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_9@com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_8@com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_2@com.google.javascript.jscomp.PeepholeFoldConstantsTest::testInvertibleOperators$catena_0@com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_4@com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_18@com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_12@com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_5@com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_6@com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_15@com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_16@com.google.javascript.jscomp.PeepholeFoldConstantsTest::testInvertibleOperators$catena_5@com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_11@com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_7@com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_10
Find 1 new bugs
