{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
            "from_line_no": 907,
            "to_line_no": 908,
            "replaced_with": "    int lhType = getNormalizedNodeType(left);\n    int rhType = getNormalizedNodeType(right);\n",
            "replaced": "    int lhType = left.getType();\n    int rhType = right.getType();\n",
            "patch_type": "replace",
            "next_line_no": 909
        },
        "1": {
            "file_name": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
            "replaced_with": "  private int getNormalizedNodeType(Node n) {\n    int type = n.getType();\n    if (type == Token.NOT) {\n      TernaryValue value = NodeUtil.getPureBooleanValue(n);\n      switch (value) {\n        case TRUE:\n          return Token.TRUE;\n        case FALSE:\n          return Token.FALSE;\n      }\n    }\n    return type;\n  }\n",
            "patch_type": "insert",
            "next_line_no": 1074
        }
    },
    "method": {
        "failing_tests": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testInvertibleOperators",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testCommutativeOperators"
        ],
        "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3": {
            "file_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
            "Instance": "Begin: Pos(699, 10)\nEnd: Pos(723, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_74/test//com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\nName: testFoldComparison3\nChilds: [StatementAssertion<Begin: Pos(700, 5), End: Pos(700, 38)>,\nStatementAssertion<Begin: Pos(702, 5), End: Pos(702, 37)>,\nStatementAssertion<Begin: Pos(703, 5), End: Pos(703, 37)>,\nStatementAssertion<Begin: Pos(704, 5), End: Pos(704, 40)>,\nStatementAssertion<Begin: Pos(705, 5), End: Pos(705, 38)>,\nStatementAssertion<Begin: Pos(706, 5), End: Pos(706, 40)>,\nStatementAssertion<Begin: Pos(708, 5), End: Pos(708, 29)>,\nStatementAssertion<Begin: Pos(709, 5), End: Pos(709, 32)>,\nStatementAssertion<Begin: Pos(710, 5), End: Pos(710, 30)>,\nStatementAssertion<Begin: Pos(711, 5), End: Pos(711, 32)>,\nStatementAssertion<Begin: Pos(713, 5), End: Pos(713, 38)>,\nStatementAssertion<Begin: Pos(714, 5), End: Pos(714, 38)>,\nStatementAssertion<Begin: Pos(715, 5), End: Pos(715, 41)>,\nStatementAssertion<Begin: Pos(716, 5), End: Pos(716, 39)>,\nStatementAssertion<Begin: Pos(717, 5), End: Pos(717, 41)>,\nStatementAssertion<Begin: Pos(719, 5), End: Pos(719, 30)>,\nStatementAssertion<Begin: Pos(720, 5), End: Pos(720, 33)>,\nStatementAssertion<Begin: Pos(721, 5), End: Pos(721, 31)>,\nStatementAssertion<Begin: Pos(722, 5), End: Pos(722, 33)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_74/test//com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
            "name": "testFoldComparison3",
            "begin": "Pos(699, 10)",
            "end": "Pos(723, 3)",
            "begin_line_no": 699,
            "end_line_no": 723,
            "child": [
                "Begin: Pos(700, 5)\nEnd: Pos(700, 38)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(702, 5)\nEnd: Pos(702, 37)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(703, 5)\nEnd: Pos(703, 37)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(704, 5)\nEnd: Pos(704, 40)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(705, 5)\nEnd: Pos(705, 38)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(706, 5)\nEnd: Pos(706, 40)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(708, 5)\nEnd: Pos(708, 29)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(709, 5)\nEnd: Pos(709, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(710, 5)\nEnd: Pos(710, 30)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(711, 5)\nEnd: Pos(711, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(713, 5)\nEnd: Pos(713, 38)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(714, 5)\nEnd: Pos(714, 38)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(715, 5)\nEnd: Pos(715, 41)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(716, 5)\nEnd: Pos(716, 39)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(717, 5)\nEnd: Pos(717, 41)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(719, 5)\nEnd: Pos(719, 30)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(720, 5)\nEnd: Pos(720, 33)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(721, 5)\nEnd: Pos(721, 31)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(722, 5)\nEnd: Pos(722, 33)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testFoldComparison3$catena_0() {\n    fold(\"x = !1 == !0\", \"x = false\");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldComparison3$catena_1() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    fold(\"x = !0 == !0\", \"x = true\");                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldComparison3$catena_2() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = !1 == !1\", \"x = true\");                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldComparison3$catena_3() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = !1 == null\", \"x = false\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldComparison3$catena_4() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = !1 == !0\", \"x = false\");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldComparison3$catena_5() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = !0 == null\", \"x = false\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldComparison3$catena_6() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    fold(\"!0 == !0\", \"true\");                                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldComparison3$catena_7() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"!1 == null\", \"false\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldComparison3$catena_8() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"!1 == !0\", \"false\");                                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldComparison3$catena_9() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"!0 == null\", \"false\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldComparison3$catena_10() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    fold(\"x = !0 === !0\", \"x = true\");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldComparison3$catena_11() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = !1 === !1\", \"x = true\");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldComparison3$catena_12() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = !1 === null\", \"x = false\");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldComparison3$catena_13() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = !1 === !0\", \"x = false\");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldComparison3$catena_14() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = !0 === null\", \"x = false\");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldComparison3$catena_15() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    fold(\"!0 === !0\", \"true\");                                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldComparison3$catena_16() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"!1 === null\", \"false\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldComparison3$catena_17() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"!1 === !0\", \"false\");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldComparison3$catena_18() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"!0 === null\", \"false\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testFoldComparison3$catena_0() {\n    fold(\"x = !1 == !0\", \"x = false\");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testFoldComparison3$catena_1() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    fold(\"x = !0 == !0\", \"x = true\");                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testFoldComparison3$catena_2() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = !1 == !1\", \"x = true\");                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "3": "  public void testFoldComparison3$catena_3() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = !1 == null\", \"x = false\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "4": "  public void testFoldComparison3$catena_4() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = !1 == !0\", \"x = false\");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "5": "  public void testFoldComparison3$catena_5() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = !0 == null\", \"x = false\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "6": "  public void testFoldComparison3$catena_6() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    fold(\"!0 == !0\", \"true\");                                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "7": "  public void testFoldComparison3$catena_7() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"!1 == null\", \"false\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "8": "  public void testFoldComparison3$catena_8() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"!1 == !0\", \"false\");                                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "9": "  public void testFoldComparison3$catena_9() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"!0 == null\", \"false\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "10": "  public void testFoldComparison3$catena_10() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    fold(\"x = !0 === !0\", \"x = true\");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "11": "  public void testFoldComparison3$catena_11() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = !1 === !1\", \"x = true\");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "12": "  public void testFoldComparison3$catena_12() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = !1 === null\", \"x = false\");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "13": "  public void testFoldComparison3$catena_13() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = !1 === !0\", \"x = false\");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "14": "  public void testFoldComparison3$catena_14() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = !0 === null\", \"x = false\");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "15": "  public void testFoldComparison3$catena_15() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    fold(\"!0 === !0\", \"true\");                                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "16": "  public void testFoldComparison3$catena_16() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"!1 === null\", \"false\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "17": "  public void testFoldComparison3$catena_17() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"!1 === !0\", \"false\");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "18": "  public void testFoldComparison3$catena_18() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"!0 === null\", \"false\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        },
        "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testInvertibleOperators": {
            "file_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
            "Instance": "Begin: Pos(1094, 10)\nEnd: Pos(1138, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_74/test//com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\nName: testInvertibleOperators\nChilds: [StatementAssertion<Begin: Pos(1122, 13), End: Pos(1122, 55)>,\nStatementAssertion<Begin: Pos(1123, 13), End: Pos(1123, 60)>,\nStatementAssertion<Begin: Pos(1126, 15), End: Pos(1126, 39)>,\nStatementAssertion<Begin: Pos(1127, 15), End: Pos(1127, 44)>,\nStatementAssertion<Begin: Pos(1129, 15), End: Pos(1129, 56)>,\nStatementAssertion<Begin: Pos(1130, 15), End: Pos(1130, 62)>,\nStatementAssertion<Begin: Pos(1133, 13), End: Pos(1133, 70)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_74/test//com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
            "name": "testInvertibleOperators",
            "begin": "Pos(1094, 10)",
            "end": "Pos(1138, 3)",
            "begin_line_no": 1094,
            "end_line_no": 1138,
            "child": [
                "Begin: Pos(1122, 13)\nEnd: Pos(1122, 55)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1123, 13)\nEnd: Pos(1123, 60)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1126, 15)\nEnd: Pos(1126, 39)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1127, 15)\nEnd: Pos(1127, 44)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1129, 15)\nEnd: Pos(1129, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1130, 15)\nEnd: Pos(1130, 62)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1133, 13)\nEnd: Pos(1133, 70)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testInvertibleOperators$catena_0() {\n    Map<String, String> inverses = ImmutableMap.<String, String>builder()\n        .put(\"==\", \"!=\")\n        .put(\"===\", \"!==\")\n        .put(\"<=\", \">\")\n        .put(\"<\", \">=\")\n        .put(\">=\", \"<\")\n        .put(\">\", \"<=\")\n        .put(\"!=\", \"==\")\n        .put(\"!==\", \"===\")\n        .build();\n    Set<String> comparators = ImmutableSet.of(\"<=\", \"<\", \">=\", \">\");\n    Set<String> equalitors = ImmutableSet.of(\"==\", \"===\");\n    Set<String> uncomparables = ImmutableSet.of(\"undefined\", \"void 0\");\n    List<String> operators = ImmutableList.copyOf(inverses.values());\n    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {\n      for (int iOperandB = 0;\n           iOperandB < LITERAL_OPERANDS.size();\n           iOperandB++) {\n        for (int iOp = 0; iOp < operators.size(); iOp++) {\n          String a = LITERAL_OPERANDS.get(iOperandA);\n          String b = LITERAL_OPERANDS.get(iOperandB);\n          String op = operators.get(iOp);\n          String inverse = inverses.get(op);\n\n          // Test invertability.\n          if (comparators.contains(op) &&\n              (uncomparables.contains(a) || uncomparables.contains(b))) {\n            assertSameResults(join(a, op, b), \"false\");                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertSameResults(join(a, inverse, b), \"false\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n          } else if (a.equals(b) && equalitors.contains(op)) {\n            if (a.equals(\"NaN\") || a.equals(\"Infinity\")) {\n              try{ foldSame(join(a, op, b));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n              try{ foldSame(join(a, inverse, b));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } else {\n              try{ assertSameResults(join(a, op, b), \"true\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n              try{ assertSameResults(join(a, inverse, b), \"false\");                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n          } else {\n            try{ assertNotSameResults(join(a, op, b), join(a, inverse, b));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n          }\n        }\n      }\n    }\n  }",
                "  public void testInvertibleOperators$catena_1() {\n    Map<String, String> inverses = ImmutableMap.<String, String>builder()\n        .put(\"==\", \"!=\")\n        .put(\"===\", \"!==\")\n        .put(\"<=\", \">\")\n        .put(\"<\", \">=\")\n        .put(\">=\", \"<\")\n        .put(\">\", \"<=\")\n        .put(\"!=\", \"==\")\n        .put(\"!==\", \"===\")\n        .build();\n    Set<String> comparators = ImmutableSet.of(\"<=\", \"<\", \">=\", \">\");\n    Set<String> equalitors = ImmutableSet.of(\"==\", \"===\");\n    Set<String> uncomparables = ImmutableSet.of(\"undefined\", \"void 0\");\n    List<String> operators = ImmutableList.copyOf(inverses.values());\n    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {\n      for (int iOperandB = 0;\n           iOperandB < LITERAL_OPERANDS.size();\n           iOperandB++) {\n        for (int iOp = 0; iOp < operators.size(); iOp++) {\n          String a = LITERAL_OPERANDS.get(iOperandA);\n          String b = LITERAL_OPERANDS.get(iOperandB);\n          String op = operators.get(iOp);\n          String inverse = inverses.get(op);\n\n          // Test invertability.\n          if (comparators.contains(op) &&\n              (uncomparables.contains(a) || uncomparables.contains(b))) {\n            try{ assertSameResults(join(a, op, b), \"false\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertSameResults(join(a, inverse, b), \"false\");                                                /***** ORIGINAL ASSERTION IS HERE *****/\n          } else if (a.equals(b) && equalitors.contains(op)) {\n            if (a.equals(\"NaN\") || a.equals(\"Infinity\")) {\n              try{ foldSame(join(a, op, b));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n              try{ foldSame(join(a, inverse, b));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } else {\n              try{ assertSameResults(join(a, op, b), \"true\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n              try{ assertSameResults(join(a, inverse, b), \"false\");                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n          } else {\n            try{ assertNotSameResults(join(a, op, b), join(a, inverse, b));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n          }\n        }\n      }\n    }\n  }",
                "  public void testInvertibleOperators$catena_2() {\n    Map<String, String> inverses = ImmutableMap.<String, String>builder()\n        .put(\"==\", \"!=\")\n        .put(\"===\", \"!==\")\n        .put(\"<=\", \">\")\n        .put(\"<\", \">=\")\n        .put(\">=\", \"<\")\n        .put(\">\", \"<=\")\n        .put(\"!=\", \"==\")\n        .put(\"!==\", \"===\")\n        .build();\n    Set<String> comparators = ImmutableSet.of(\"<=\", \"<\", \">=\", \">\");\n    Set<String> equalitors = ImmutableSet.of(\"==\", \"===\");\n    Set<String> uncomparables = ImmutableSet.of(\"undefined\", \"void 0\");\n    List<String> operators = ImmutableList.copyOf(inverses.values());\n    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {\n      for (int iOperandB = 0;\n           iOperandB < LITERAL_OPERANDS.size();\n           iOperandB++) {\n        for (int iOp = 0; iOp < operators.size(); iOp++) {\n          String a = LITERAL_OPERANDS.get(iOperandA);\n          String b = LITERAL_OPERANDS.get(iOperandB);\n          String op = operators.get(iOp);\n          String inverse = inverses.get(op);\n\n          // Test invertability.\n          if (comparators.contains(op) &&\n              (uncomparables.contains(a) || uncomparables.contains(b))) {\n            try{ assertSameResults(join(a, op, b), \"false\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertSameResults(join(a, inverse, b), \"false\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n          } else if (a.equals(b) && equalitors.contains(op)) {\n            if (a.equals(\"NaN\") || a.equals(\"Infinity\")) {\n              foldSame(join(a, op, b));                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n              try{ foldSame(join(a, inverse, b));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } else {\n              try{ assertSameResults(join(a, op, b), \"true\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n              try{ assertSameResults(join(a, inverse, b), \"false\");                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n          } else {\n            try{ assertNotSameResults(join(a, op, b), join(a, inverse, b));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n          }\n        }\n      }\n    }\n  }",
                "  public void testInvertibleOperators$catena_3() {\n    Map<String, String> inverses = ImmutableMap.<String, String>builder()\n        .put(\"==\", \"!=\")\n        .put(\"===\", \"!==\")\n        .put(\"<=\", \">\")\n        .put(\"<\", \">=\")\n        .put(\">=\", \"<\")\n        .put(\">\", \"<=\")\n        .put(\"!=\", \"==\")\n        .put(\"!==\", \"===\")\n        .build();\n    Set<String> comparators = ImmutableSet.of(\"<=\", \"<\", \">=\", \">\");\n    Set<String> equalitors = ImmutableSet.of(\"==\", \"===\");\n    Set<String> uncomparables = ImmutableSet.of(\"undefined\", \"void 0\");\n    List<String> operators = ImmutableList.copyOf(inverses.values());\n    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {\n      for (int iOperandB = 0;\n           iOperandB < LITERAL_OPERANDS.size();\n           iOperandB++) {\n        for (int iOp = 0; iOp < operators.size(); iOp++) {\n          String a = LITERAL_OPERANDS.get(iOperandA);\n          String b = LITERAL_OPERANDS.get(iOperandB);\n          String op = operators.get(iOp);\n          String inverse = inverses.get(op);\n\n          // Test invertability.\n          if (comparators.contains(op) &&\n              (uncomparables.contains(a) || uncomparables.contains(b))) {\n            try{ assertSameResults(join(a, op, b), \"false\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertSameResults(join(a, inverse, b), \"false\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n          } else if (a.equals(b) && equalitors.contains(op)) {\n            if (a.equals(\"NaN\") || a.equals(\"Infinity\")) {\n              try{ foldSame(join(a, op, b));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n              foldSame(join(a, inverse, b));                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n            } else {\n              try{ assertSameResults(join(a, op, b), \"true\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n              try{ assertSameResults(join(a, inverse, b), \"false\");                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n          } else {\n            try{ assertNotSameResults(join(a, op, b), join(a, inverse, b));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n          }\n        }\n      }\n    }\n  }",
                "  public void testInvertibleOperators$catena_4() {\n    Map<String, String> inverses = ImmutableMap.<String, String>builder()\n        .put(\"==\", \"!=\")\n        .put(\"===\", \"!==\")\n        .put(\"<=\", \">\")\n        .put(\"<\", \">=\")\n        .put(\">=\", \"<\")\n        .put(\">\", \"<=\")\n        .put(\"!=\", \"==\")\n        .put(\"!==\", \"===\")\n        .build();\n    Set<String> comparators = ImmutableSet.of(\"<=\", \"<\", \">=\", \">\");\n    Set<String> equalitors = ImmutableSet.of(\"==\", \"===\");\n    Set<String> uncomparables = ImmutableSet.of(\"undefined\", \"void 0\");\n    List<String> operators = ImmutableList.copyOf(inverses.values());\n    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {\n      for (int iOperandB = 0;\n           iOperandB < LITERAL_OPERANDS.size();\n           iOperandB++) {\n        for (int iOp = 0; iOp < operators.size(); iOp++) {\n          String a = LITERAL_OPERANDS.get(iOperandA);\n          String b = LITERAL_OPERANDS.get(iOperandB);\n          String op = operators.get(iOp);\n          String inverse = inverses.get(op);\n\n          // Test invertability.\n          if (comparators.contains(op) &&\n              (uncomparables.contains(a) || uncomparables.contains(b))) {\n            try{ assertSameResults(join(a, op, b), \"false\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertSameResults(join(a, inverse, b), \"false\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n          } else if (a.equals(b) && equalitors.contains(op)) {\n            if (a.equals(\"NaN\") || a.equals(\"Infinity\")) {\n              try{ foldSame(join(a, op, b));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n              try{ foldSame(join(a, inverse, b));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } else {\n              assertSameResults(join(a, op, b), \"true\");                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n              try{ assertSameResults(join(a, inverse, b), \"false\");                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n          } else {\n            try{ assertNotSameResults(join(a, op, b), join(a, inverse, b));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n          }\n        }\n      }\n    }\n  }",
                "  public void testInvertibleOperators$catena_5() {\n    Map<String, String> inverses = ImmutableMap.<String, String>builder()\n        .put(\"==\", \"!=\")\n        .put(\"===\", \"!==\")\n        .put(\"<=\", \">\")\n        .put(\"<\", \">=\")\n        .put(\">=\", \"<\")\n        .put(\">\", \"<=\")\n        .put(\"!=\", \"==\")\n        .put(\"!==\", \"===\")\n        .build();\n    Set<String> comparators = ImmutableSet.of(\"<=\", \"<\", \">=\", \">\");\n    Set<String> equalitors = ImmutableSet.of(\"==\", \"===\");\n    Set<String> uncomparables = ImmutableSet.of(\"undefined\", \"void 0\");\n    List<String> operators = ImmutableList.copyOf(inverses.values());\n    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {\n      for (int iOperandB = 0;\n           iOperandB < LITERAL_OPERANDS.size();\n           iOperandB++) {\n        for (int iOp = 0; iOp < operators.size(); iOp++) {\n          String a = LITERAL_OPERANDS.get(iOperandA);\n          String b = LITERAL_OPERANDS.get(iOperandB);\n          String op = operators.get(iOp);\n          String inverse = inverses.get(op);\n\n          // Test invertability.\n          if (comparators.contains(op) &&\n              (uncomparables.contains(a) || uncomparables.contains(b))) {\n            try{ assertSameResults(join(a, op, b), \"false\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertSameResults(join(a, inverse, b), \"false\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n          } else if (a.equals(b) && equalitors.contains(op)) {\n            if (a.equals(\"NaN\") || a.equals(\"Infinity\")) {\n              try{ foldSame(join(a, op, b));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n              try{ foldSame(join(a, inverse, b));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } else {\n              try{ assertSameResults(join(a, op, b), \"true\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n              assertSameResults(join(a, inverse, b), \"false\");                                              /***** ORIGINAL ASSERTION IS HERE *****/\n            }\n          } else {\n            try{ assertNotSameResults(join(a, op, b), join(a, inverse, b));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n          }\n        }\n      }\n    }\n  }",
                "  public void testInvertibleOperators$catena_6() {\n    Map<String, String> inverses = ImmutableMap.<String, String>builder()\n        .put(\"==\", \"!=\")\n        .put(\"===\", \"!==\")\n        .put(\"<=\", \">\")\n        .put(\"<\", \">=\")\n        .put(\">=\", \"<\")\n        .put(\">\", \"<=\")\n        .put(\"!=\", \"==\")\n        .put(\"!==\", \"===\")\n        .build();\n    Set<String> comparators = ImmutableSet.of(\"<=\", \"<\", \">=\", \">\");\n    Set<String> equalitors = ImmutableSet.of(\"==\", \"===\");\n    Set<String> uncomparables = ImmutableSet.of(\"undefined\", \"void 0\");\n    List<String> operators = ImmutableList.copyOf(inverses.values());\n    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {\n      for (int iOperandB = 0;\n           iOperandB < LITERAL_OPERANDS.size();\n           iOperandB++) {\n        for (int iOp = 0; iOp < operators.size(); iOp++) {\n          String a = LITERAL_OPERANDS.get(iOperandA);\n          String b = LITERAL_OPERANDS.get(iOperandB);\n          String op = operators.get(iOp);\n          String inverse = inverses.get(op);\n\n          // Test invertability.\n          if (comparators.contains(op) &&\n              (uncomparables.contains(a) || uncomparables.contains(b))) {\n            try{ assertSameResults(join(a, op, b), \"false\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertSameResults(join(a, inverse, b), \"false\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n          } else if (a.equals(b) && equalitors.contains(op)) {\n            if (a.equals(\"NaN\") || a.equals(\"Infinity\")) {\n              try{ foldSame(join(a, op, b));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n              try{ foldSame(join(a, inverse, b));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } else {\n              try{ assertSameResults(join(a, op, b), \"true\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n              try{ assertSameResults(join(a, inverse, b), \"false\");                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n          } else {\n            assertNotSameResults(join(a, op, b), join(a, inverse, b));                                      /***** ORIGINAL ASSERTION IS HERE *****/\n          }\n        }\n      }\n    }\n  }"
            ],
            "func": {
                "0": "  public void testInvertibleOperators$catena_0() {\n    Map<String, String> inverses = ImmutableMap.<String, String>builder()\n        .put(\"==\", \"!=\")\n        .put(\"===\", \"!==\")\n        .put(\"<=\", \">\")\n        .put(\"<\", \">=\")\n        .put(\">=\", \"<\")\n        .put(\">\", \"<=\")\n        .put(\"!=\", \"==\")\n        .put(\"!==\", \"===\")\n        .build();\n    Set<String> comparators = ImmutableSet.of(\"<=\", \"<\", \">=\", \">\");\n    Set<String> equalitors = ImmutableSet.of(\"==\", \"===\");\n    Set<String> uncomparables = ImmutableSet.of(\"undefined\", \"void 0\");\n    List<String> operators = ImmutableList.copyOf(inverses.values());\n    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {\n      for (int iOperandB = 0;\n           iOperandB < LITERAL_OPERANDS.size();\n           iOperandB++) {\n        for (int iOp = 0; iOp < operators.size(); iOp++) {\n          String a = LITERAL_OPERANDS.get(iOperandA);\n          String b = LITERAL_OPERANDS.get(iOperandB);\n          String op = operators.get(iOp);\n          String inverse = inverses.get(op);\n\n          // Test invertability.\n          if (comparators.contains(op) &&\n              (uncomparables.contains(a) || uncomparables.contains(b))) {\n            assertSameResults(join(a, op, b), \"false\");                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertSameResults(join(a, inverse, b), \"false\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n          } else if (a.equals(b) && equalitors.contains(op)) {\n            if (a.equals(\"NaN\") || a.equals(\"Infinity\")) {\n              try{ foldSame(join(a, op, b));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n              try{ foldSame(join(a, inverse, b));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } else {\n              try{ assertSameResults(join(a, op, b), \"true\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n              try{ assertSameResults(join(a, inverse, b), \"false\");                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n          } else {\n            try{ assertNotSameResults(join(a, op, b), join(a, inverse, b));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n          }\n        }\n      }\n    }\n  }",
                "1": "  public void testInvertibleOperators$catena_1() {\n    Map<String, String> inverses = ImmutableMap.<String, String>builder()\n        .put(\"==\", \"!=\")\n        .put(\"===\", \"!==\")\n        .put(\"<=\", \">\")\n        .put(\"<\", \">=\")\n        .put(\">=\", \"<\")\n        .put(\">\", \"<=\")\n        .put(\"!=\", \"==\")\n        .put(\"!==\", \"===\")\n        .build();\n    Set<String> comparators = ImmutableSet.of(\"<=\", \"<\", \">=\", \">\");\n    Set<String> equalitors = ImmutableSet.of(\"==\", \"===\");\n    Set<String> uncomparables = ImmutableSet.of(\"undefined\", \"void 0\");\n    List<String> operators = ImmutableList.copyOf(inverses.values());\n    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {\n      for (int iOperandB = 0;\n           iOperandB < LITERAL_OPERANDS.size();\n           iOperandB++) {\n        for (int iOp = 0; iOp < operators.size(); iOp++) {\n          String a = LITERAL_OPERANDS.get(iOperandA);\n          String b = LITERAL_OPERANDS.get(iOperandB);\n          String op = operators.get(iOp);\n          String inverse = inverses.get(op);\n\n          // Test invertability.\n          if (comparators.contains(op) &&\n              (uncomparables.contains(a) || uncomparables.contains(b))) {\n            try{ assertSameResults(join(a, op, b), \"false\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertSameResults(join(a, inverse, b), \"false\");                                                /***** ORIGINAL ASSERTION IS HERE *****/\n          } else if (a.equals(b) && equalitors.contains(op)) {\n            if (a.equals(\"NaN\") || a.equals(\"Infinity\")) {\n              try{ foldSame(join(a, op, b));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n              try{ foldSame(join(a, inverse, b));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } else {\n              try{ assertSameResults(join(a, op, b), \"true\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n              try{ assertSameResults(join(a, inverse, b), \"false\");                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n          } else {\n            try{ assertNotSameResults(join(a, op, b), join(a, inverse, b));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n          }\n        }\n      }\n    }\n  }",
                "2": "  public void testInvertibleOperators$catena_2() {\n    Map<String, String> inverses = ImmutableMap.<String, String>builder()\n        .put(\"==\", \"!=\")\n        .put(\"===\", \"!==\")\n        .put(\"<=\", \">\")\n        .put(\"<\", \">=\")\n        .put(\">=\", \"<\")\n        .put(\">\", \"<=\")\n        .put(\"!=\", \"==\")\n        .put(\"!==\", \"===\")\n        .build();\n    Set<String> comparators = ImmutableSet.of(\"<=\", \"<\", \">=\", \">\");\n    Set<String> equalitors = ImmutableSet.of(\"==\", \"===\");\n    Set<String> uncomparables = ImmutableSet.of(\"undefined\", \"void 0\");\n    List<String> operators = ImmutableList.copyOf(inverses.values());\n    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {\n      for (int iOperandB = 0;\n           iOperandB < LITERAL_OPERANDS.size();\n           iOperandB++) {\n        for (int iOp = 0; iOp < operators.size(); iOp++) {\n          String a = LITERAL_OPERANDS.get(iOperandA);\n          String b = LITERAL_OPERANDS.get(iOperandB);\n          String op = operators.get(iOp);\n          String inverse = inverses.get(op);\n\n          // Test invertability.\n          if (comparators.contains(op) &&\n              (uncomparables.contains(a) || uncomparables.contains(b))) {\n            try{ assertSameResults(join(a, op, b), \"false\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertSameResults(join(a, inverse, b), \"false\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n          } else if (a.equals(b) && equalitors.contains(op)) {\n            if (a.equals(\"NaN\") || a.equals(\"Infinity\")) {\n              foldSame(join(a, op, b));                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n              try{ foldSame(join(a, inverse, b));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } else {\n              try{ assertSameResults(join(a, op, b), \"true\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n              try{ assertSameResults(join(a, inverse, b), \"false\");                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n          } else {\n            try{ assertNotSameResults(join(a, op, b), join(a, inverse, b));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n          }\n        }\n      }\n    }\n  }",
                "3": "  public void testInvertibleOperators$catena_3() {\n    Map<String, String> inverses = ImmutableMap.<String, String>builder()\n        .put(\"==\", \"!=\")\n        .put(\"===\", \"!==\")\n        .put(\"<=\", \">\")\n        .put(\"<\", \">=\")\n        .put(\">=\", \"<\")\n        .put(\">\", \"<=\")\n        .put(\"!=\", \"==\")\n        .put(\"!==\", \"===\")\n        .build();\n    Set<String> comparators = ImmutableSet.of(\"<=\", \"<\", \">=\", \">\");\n    Set<String> equalitors = ImmutableSet.of(\"==\", \"===\");\n    Set<String> uncomparables = ImmutableSet.of(\"undefined\", \"void 0\");\n    List<String> operators = ImmutableList.copyOf(inverses.values());\n    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {\n      for (int iOperandB = 0;\n           iOperandB < LITERAL_OPERANDS.size();\n           iOperandB++) {\n        for (int iOp = 0; iOp < operators.size(); iOp++) {\n          String a = LITERAL_OPERANDS.get(iOperandA);\n          String b = LITERAL_OPERANDS.get(iOperandB);\n          String op = operators.get(iOp);\n          String inverse = inverses.get(op);\n\n          // Test invertability.\n          if (comparators.contains(op) &&\n              (uncomparables.contains(a) || uncomparables.contains(b))) {\n            try{ assertSameResults(join(a, op, b), \"false\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertSameResults(join(a, inverse, b), \"false\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n          } else if (a.equals(b) && equalitors.contains(op)) {\n            if (a.equals(\"NaN\") || a.equals(\"Infinity\")) {\n              try{ foldSame(join(a, op, b));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n              foldSame(join(a, inverse, b));                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n            } else {\n              try{ assertSameResults(join(a, op, b), \"true\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n              try{ assertSameResults(join(a, inverse, b), \"false\");                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n          } else {\n            try{ assertNotSameResults(join(a, op, b), join(a, inverse, b));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n          }\n        }\n      }\n    }\n  }",
                "4": "  public void testInvertibleOperators$catena_4() {\n    Map<String, String> inverses = ImmutableMap.<String, String>builder()\n        .put(\"==\", \"!=\")\n        .put(\"===\", \"!==\")\n        .put(\"<=\", \">\")\n        .put(\"<\", \">=\")\n        .put(\">=\", \"<\")\n        .put(\">\", \"<=\")\n        .put(\"!=\", \"==\")\n        .put(\"!==\", \"===\")\n        .build();\n    Set<String> comparators = ImmutableSet.of(\"<=\", \"<\", \">=\", \">\");\n    Set<String> equalitors = ImmutableSet.of(\"==\", \"===\");\n    Set<String> uncomparables = ImmutableSet.of(\"undefined\", \"void 0\");\n    List<String> operators = ImmutableList.copyOf(inverses.values());\n    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {\n      for (int iOperandB = 0;\n           iOperandB < LITERAL_OPERANDS.size();\n           iOperandB++) {\n        for (int iOp = 0; iOp < operators.size(); iOp++) {\n          String a = LITERAL_OPERANDS.get(iOperandA);\n          String b = LITERAL_OPERANDS.get(iOperandB);\n          String op = operators.get(iOp);\n          String inverse = inverses.get(op);\n\n          // Test invertability.\n          if (comparators.contains(op) &&\n              (uncomparables.contains(a) || uncomparables.contains(b))) {\n            try{ assertSameResults(join(a, op, b), \"false\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertSameResults(join(a, inverse, b), \"false\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n          } else if (a.equals(b) && equalitors.contains(op)) {\n            if (a.equals(\"NaN\") || a.equals(\"Infinity\")) {\n              try{ foldSame(join(a, op, b));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n              try{ foldSame(join(a, inverse, b));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } else {\n              assertSameResults(join(a, op, b), \"true\");                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n              try{ assertSameResults(join(a, inverse, b), \"false\");                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n          } else {\n            try{ assertNotSameResults(join(a, op, b), join(a, inverse, b));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n          }\n        }\n      }\n    }\n  }",
                "5": "  public void testInvertibleOperators$catena_5() {\n    Map<String, String> inverses = ImmutableMap.<String, String>builder()\n        .put(\"==\", \"!=\")\n        .put(\"===\", \"!==\")\n        .put(\"<=\", \">\")\n        .put(\"<\", \">=\")\n        .put(\">=\", \"<\")\n        .put(\">\", \"<=\")\n        .put(\"!=\", \"==\")\n        .put(\"!==\", \"===\")\n        .build();\n    Set<String> comparators = ImmutableSet.of(\"<=\", \"<\", \">=\", \">\");\n    Set<String> equalitors = ImmutableSet.of(\"==\", \"===\");\n    Set<String> uncomparables = ImmutableSet.of(\"undefined\", \"void 0\");\n    List<String> operators = ImmutableList.copyOf(inverses.values());\n    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {\n      for (int iOperandB = 0;\n           iOperandB < LITERAL_OPERANDS.size();\n           iOperandB++) {\n        for (int iOp = 0; iOp < operators.size(); iOp++) {\n          String a = LITERAL_OPERANDS.get(iOperandA);\n          String b = LITERAL_OPERANDS.get(iOperandB);\n          String op = operators.get(iOp);\n          String inverse = inverses.get(op);\n\n          // Test invertability.\n          if (comparators.contains(op) &&\n              (uncomparables.contains(a) || uncomparables.contains(b))) {\n            try{ assertSameResults(join(a, op, b), \"false\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertSameResults(join(a, inverse, b), \"false\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n          } else if (a.equals(b) && equalitors.contains(op)) {\n            if (a.equals(\"NaN\") || a.equals(\"Infinity\")) {\n              try{ foldSame(join(a, op, b));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n              try{ foldSame(join(a, inverse, b));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } else {\n              try{ assertSameResults(join(a, op, b), \"true\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n              assertSameResults(join(a, inverse, b), \"false\");                                              /***** ORIGINAL ASSERTION IS HERE *****/\n            }\n          } else {\n            try{ assertNotSameResults(join(a, op, b), join(a, inverse, b));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n          }\n        }\n      }\n    }\n  }",
                "6": "  public void testInvertibleOperators$catena_6() {\n    Map<String, String> inverses = ImmutableMap.<String, String>builder()\n        .put(\"==\", \"!=\")\n        .put(\"===\", \"!==\")\n        .put(\"<=\", \">\")\n        .put(\"<\", \">=\")\n        .put(\">=\", \"<\")\n        .put(\">\", \"<=\")\n        .put(\"!=\", \"==\")\n        .put(\"!==\", \"===\")\n        .build();\n    Set<String> comparators = ImmutableSet.of(\"<=\", \"<\", \">=\", \">\");\n    Set<String> equalitors = ImmutableSet.of(\"==\", \"===\");\n    Set<String> uncomparables = ImmutableSet.of(\"undefined\", \"void 0\");\n    List<String> operators = ImmutableList.copyOf(inverses.values());\n    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {\n      for (int iOperandB = 0;\n           iOperandB < LITERAL_OPERANDS.size();\n           iOperandB++) {\n        for (int iOp = 0; iOp < operators.size(); iOp++) {\n          String a = LITERAL_OPERANDS.get(iOperandA);\n          String b = LITERAL_OPERANDS.get(iOperandB);\n          String op = operators.get(iOp);\n          String inverse = inverses.get(op);\n\n          // Test invertability.\n          if (comparators.contains(op) &&\n              (uncomparables.contains(a) || uncomparables.contains(b))) {\n            try{ assertSameResults(join(a, op, b), \"false\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertSameResults(join(a, inverse, b), \"false\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n          } else if (a.equals(b) && equalitors.contains(op)) {\n            if (a.equals(\"NaN\") || a.equals(\"Infinity\")) {\n              try{ foldSame(join(a, op, b));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n              try{ foldSame(join(a, inverse, b));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } else {\n              try{ assertSameResults(join(a, op, b), \"true\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n              try{ assertSameResults(join(a, inverse, b), \"false\");                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n          } else {\n            assertNotSameResults(join(a, op, b), join(a, inverse, b));                                      /***** ORIGINAL ASSERTION IS HERE *****/\n          }\n        }\n      }\n    }\n  }"
            }
        },
        "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testCommutativeOperators": {
            "file_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
            "Instance": "Begin: Pos(1140, 10)\nEnd: Pos(1166, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_74/test//com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\nName: testCommutativeOperators\nChilds: [StatementAssertion<Begin: Pos(1162, 11), End: Pos(1162, 73)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_74/test//com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
            "name": "testCommutativeOperators",
            "begin": "Pos(1140, 10)",
            "end": "Pos(1166, 3)",
            "begin_line_no": 1140,
            "end_line_no": 1166,
            "child": [
                "Begin: Pos(1162, 11)\nEnd: Pos(1162, 73)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        }
    },
    "11": {
        "failing_tests": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_1",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_17",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_3",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_0",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_13",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testInvertibleOperators$catena_1",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testInvertibleOperators$catena_4",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_14",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testCommutativeOperators",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_9",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_8",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_2",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testInvertibleOperators$catena_0",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_4",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_18",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_12",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_5",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_6",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_15",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_16",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testInvertibleOperators$catena_5",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_11",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_7",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3$catena_10"
        ]
    }
}