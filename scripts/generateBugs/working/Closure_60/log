---
Begin generate bug_id: Closure_60
num_of_hunks: 3
timeout for running: 3600
use working dir: ./working/data/Closure_60
Try to checkout Closure_60
build dir: ['./working/data/Closure_60/build/classes', './working/data/Closure_60/build/test']
init FileManager
trace file: src/com/google/javascript/jscomp/NodeUtil.java
trying to replace old failing tests
edit: replace from 91 range 21 at test/com/google/javascript/jscomp/NodeUtilTest.java
to
  public void testGetBooleanValue$catena_0() {
    assertPureBooleanTrue("true");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertPureBooleanTrue("10");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("'0'");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("/a/");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("{}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("[]");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("false");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("null");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("0");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("''");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("undefined");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("void 0");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("void foo()");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("b");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("-'0.0'");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    // Known but getBooleanValue return false for expressions with side-effects
    try{ assertPureBooleanUnknown("{a:foo()}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("[foo()]");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testGetBooleanValue$catena_1() {
    try{ assertPureBooleanTrue("true");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    assertPureBooleanTrue("10");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertPureBooleanTrue("'0'");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("/a/");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("{}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("[]");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("false");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("null");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("0");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("''");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("undefined");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("void 0");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("void foo()");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("b");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("-'0.0'");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    // Known but getBooleanValue return false for expressions with side-effects
    try{ assertPureBooleanUnknown("{a:foo()}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("[foo()]");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testGetBooleanValue$catena_2() {
    try{ assertPureBooleanTrue("true");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("10");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    assertPureBooleanTrue("'0'");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertPureBooleanTrue("/a/");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("{}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("[]");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("false");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("null");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("0");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("''");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("undefined");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("void 0");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("void foo()");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("b");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("-'0.0'");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    // Known but getBooleanValue return false for expressions with side-effects
    try{ assertPureBooleanUnknown("{a:foo()}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("[foo()]");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testGetBooleanValue$catena_3() {
    try{ assertPureBooleanTrue("true");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("10");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("'0'");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    assertPureBooleanTrue("/a/");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertPureBooleanTrue("{}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("[]");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("false");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("null");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("0");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("''");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("undefined");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("void 0");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("void foo()");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("b");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("-'0.0'");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    // Known but getBooleanValue return false for expressions with side-effects
    try{ assertPureBooleanUnknown("{a:foo()}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("[foo()]");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testGetBooleanValue$catena_4() {
    try{ assertPureBooleanTrue("true");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("10");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("'0'");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("/a/");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    assertPureBooleanTrue("{}");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertPureBooleanTrue("[]");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("false");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("null");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("0");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("''");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("undefined");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("void 0");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("void foo()");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("b");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("-'0.0'");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    // Known but getBooleanValue return false for expressions with side-effects
    try{ assertPureBooleanUnknown("{a:foo()}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("[foo()]");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testGetBooleanValue$catena_5() {
    try{ assertPureBooleanTrue("true");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("10");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("'0'");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("/a/");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("{}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    assertPureBooleanTrue("[]");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertPureBooleanFalse("false");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("null");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("0");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("''");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("undefined");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("void 0");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("void foo()");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("b");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("-'0.0'");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    // Known but getBooleanValue return false for expressions with side-effects
    try{ assertPureBooleanUnknown("{a:foo()}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("[foo()]");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testGetBooleanValue$catena_6() {
    try{ assertPureBooleanTrue("true");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("10");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("'0'");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("/a/");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("{}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("[]");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    assertPureBooleanFalse("false");                                                                        /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertPureBooleanFalse("null");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("0");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("''");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("undefined");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("void 0");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("void foo()");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("b");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("-'0.0'");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    // Known but getBooleanValue return false for expressions with side-effects
    try{ assertPureBooleanUnknown("{a:foo()}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("[foo()]");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testGetBooleanValue$catena_7() {
    try{ assertPureBooleanTrue("true");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("10");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("'0'");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("/a/");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("{}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("[]");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("false");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    assertPureBooleanFalse("null");                                                                         /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertPureBooleanFalse("0");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("''");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("undefined");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("void 0");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("void foo()");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("b");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("-'0.0'");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    // Known but getBooleanValue return false for expressions with side-effects
    try{ assertPureBooleanUnknown("{a:foo()}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("[foo()]");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testGetBooleanValue$catena_8() {
    try{ assertPureBooleanTrue("true");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("10");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("'0'");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("/a/");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("{}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("[]");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("false");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("null");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    assertPureBooleanFalse("0");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertPureBooleanFalse("''");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("undefined");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("void 0");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("void foo()");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("b");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("-'0.0'");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    // Known but getBooleanValue return false for expressions with side-effects
    try{ assertPureBooleanUnknown("{a:foo()}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("[foo()]");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testGetBooleanValue$catena_9() {
    try{ assertPureBooleanTrue("true");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("10");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("'0'");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("/a/");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("{}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("[]");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("false");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("null");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("0");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    assertPureBooleanFalse("''");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertPureBooleanFalse("undefined");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("void 0");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("void foo()");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("b");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("-'0.0'");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    // Known but getBooleanValue return false for expressions with side-effects
    try{ assertPureBooleanUnknown("{a:foo()}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("[foo()]");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testGetBooleanValue$catena_10() {
    try{ assertPureBooleanTrue("true");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("10");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("'0'");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("/a/");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("{}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("[]");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("false");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("null");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("0");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("''");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    assertPureBooleanFalse("undefined");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertPureBooleanFalse("void 0");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("void foo()");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("b");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("-'0.0'");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    // Known but getBooleanValue return false for expressions with side-effects
    try{ assertPureBooleanUnknown("{a:foo()}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("[foo()]");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testGetBooleanValue$catena_11() {
    try{ assertPureBooleanTrue("true");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("10");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("'0'");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("/a/");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("{}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("[]");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("false");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("null");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("0");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("''");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("undefined");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    assertPureBooleanFalse("void 0");                                                                       /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertPureBooleanUnknown("void foo()");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("b");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("-'0.0'");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    // Known but getBooleanValue return false for expressions with side-effects
    try{ assertPureBooleanUnknown("{a:foo()}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("[foo()]");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testGetBooleanValue$catena_12() {
    try{ assertPureBooleanTrue("true");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("10");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("'0'");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("/a/");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("{}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("[]");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("false");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("null");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("0");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("''");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("undefined");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("void 0");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    assertPureBooleanUnknown("void foo()");                                                                 /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertPureBooleanUnknown("b");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("-'0.0'");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    // Known but getBooleanValue return false for expressions with side-effects
    try{ assertPureBooleanUnknown("{a:foo()}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("[foo()]");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testGetBooleanValue$catena_13() {
    try{ assertPureBooleanTrue("true");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("10");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("'0'");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("/a/");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("{}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("[]");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("false");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("null");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("0");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("''");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("undefined");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("void 0");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("void foo()");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    assertPureBooleanUnknown("b");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertPureBooleanUnknown("-'0.0'");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    // Known but getBooleanValue return false for expressions with side-effects
    try{ assertPureBooleanUnknown("{a:foo()}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("[foo()]");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testGetBooleanValue$catena_14() {
    try{ assertPureBooleanTrue("true");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("10");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("'0'");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("/a/");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("{}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("[]");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("false");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("null");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("0");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("''");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("undefined");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("void 0");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("void foo()");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("b");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    assertPureBooleanUnknown("-'0.0'");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/

    // Known but getBooleanValue return false for expressions with side-effects
    try{ assertPureBooleanUnknown("{a:foo()}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("[foo()]");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testGetBooleanValue$catena_15() {
    try{ assertPureBooleanTrue("true");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("10");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("'0'");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("/a/");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("{}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("[]");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("false");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("null");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("0");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("''");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("undefined");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("void 0");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("void foo()");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("b");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("-'0.0'");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    // Known but getBooleanValue return false for expressions with side-effects
    assertPureBooleanUnknown("{a:foo()}");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertPureBooleanUnknown("[foo()]");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testGetBooleanValue$catena_16() {
    try{ assertPureBooleanTrue("true");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("10");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("'0'");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("/a/");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("{}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanTrue("[]");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("false");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("null");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("0");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("''");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("undefined");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanFalse("void 0");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("void foo()");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("b");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertPureBooleanUnknown("-'0.0'");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    // Known but getBooleanValue return false for expressions with side-effects
    try{ assertPureBooleanUnknown("{a:foo()}");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    assertPureBooleanUnknown("[foo()]");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/
  }
trace file: test/com/google/javascript/jscomp/NodeUtilTest.java
new test num: 17
ori test num: 1
pattern: 000
patches are written to file
running tests...
used time: Finished in 224.25 seconds
Failing tests: 2
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue504
	com.google.javascript.jscomp.NodeUtilTest::testGetBooleanValue$catena_12
processed: 000
pattern: 001
try to fix hunk: 2
insert before 137 with         }
        break;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001
pattern: 010
try to fix hunk: 1
insert before 136 with         if (!mayHaveSideEffects(n.getFirstChild())) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010
pattern: 100
try to fix hunk: 0
insert before 108 with       case Token.VOID:
        return TernaryValue.FALSE;

patches are written to file
running tests...
used time: Finished in 208.17 seconds
Failing tests: 2
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue504
	com.google.javascript.jscomp.NodeUtilTest::testGetBooleanValue$catena_12
No new failing tests but only 1 hunk
processed: 100
pattern: 011
try to fix hunk: 1
insert before 136 with         if (!mayHaveSideEffects(n.getFirstChild())) {

try to fix hunk: 2
insert before 137 with         }
        break;

patches are written to file
running tests...
used time: Finished in 212.56 seconds
Failing tests: 2
	com.google.javascript.jscomp.NodeUtilTest::testGetExpressionBooleanValue
	com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest::testIf
Includes new failing tests, set to unusable
processed: 011
pattern: 101
try to fix hunk: 0
insert before 108 with       case Token.VOID:
        return TernaryValue.FALSE;

try to fix hunk: 2
insert before 137 with         }
        break;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101
pattern: 110
try to fix hunk: 0
insert before 108 with       case Token.VOID:
        return TernaryValue.FALSE;

try to fix hunk: 1
insert before 136 with         if (!mayHaveSideEffects(n.getFirstChild())) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110
pattern: 111
try to fix hunk: 0
insert before 108 with       case Token.VOID:
        return TernaryValue.FALSE;

try to fix hunk: 1
insert before 136 with         if (!mayHaveSideEffects(n.getFirstChild())) {

try to fix hunk: 2
insert before 137 with         }
        break;

patches are written to file
running tests...
used time: Finished in 219.12 seconds
Failing tests: 0
Can independently fix ['com.google.javascript.jscomp.CommandLineRunnerTest::testIssue504', 'com.google.javascript.jscomp.NodeUtilTest::testGetBooleanValue$catena_12']
select new bug
Pattern: 111
new failing tests:
com.google.javascript.jscomp.CommandLineRunnerTest::testIssue504
com.google.javascript.jscomp.NodeUtilTest::testGetBooleanValue$catena_12
Save found bug
processed: 111
Find 1 new bugs
