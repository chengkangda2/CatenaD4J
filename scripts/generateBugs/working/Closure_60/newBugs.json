{
    "original": {
        "num_of_hunks": 3,
        "0": {
            "file_name": "src/com/google/javascript/jscomp/NodeUtil.java",
            "replaced_with": "      case Token.VOID:\n        return TernaryValue.FALSE;\n",
            "patch_type": "insert",
            "next_line_no": 108
        },
        "1": {
            "file_name": "src/com/google/javascript/jscomp/NodeUtil.java",
            "replaced_with": "        if (!mayHaveSideEffects(n.getFirstChild())) {\n",
            "patch_type": "insert",
            "next_line_no": 136
        },
        "2": {
            "file_name": "src/com/google/javascript/jscomp/NodeUtil.java",
            "replaced_with": "        }\n        break;\n",
            "patch_type": "insert",
            "next_line_no": 137
        }
    },
    "method": {
        "failing_tests": [
            "com.google.javascript.jscomp.CommandLineRunnerTest::testIssue504",
            "com.google.javascript.jscomp.NodeUtilTest::testGetBooleanValue"
        ],
        "com.google.javascript.jscomp.CommandLineRunnerTest::testIssue504": {
            "file_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
            "Instance": "Begin: Pos(363, 10)\nEnd: Pos(367, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_60/test//com/google/javascript/jscomp/CommandLineRunnerTest.java\nName: testIssue504\nChilds: [StatementAssertion<Begin: Pos(365, 5), End: Pos(366, 62)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_60/test//com/google/javascript/jscomp/CommandLineRunnerTest.java",
            "name": "testIssue504",
            "begin": "Pos(363, 10)",
            "end": "Pos(367, 3)",
            "begin_line_no": 363,
            "end_line_no": 367,
            "child": [
                "Begin: Pos(365, 5)\nEnd: Pos(366, 62)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "com.google.javascript.jscomp.NodeUtilTest::testGetBooleanValue": {
            "file_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
            "Instance": "Begin: Pos(91, 10)\nEnd: Pos(111, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_60/test//com/google/javascript/jscomp/NodeUtilTest.java\nName: testGetBooleanValue\nChilds: [StatementAssertion<Begin: Pos(92, 5), End: Pos(92, 34)>,\nStatementAssertion<Begin: Pos(93, 5), End: Pos(93, 32)>,\nStatementAssertion<Begin: Pos(94, 5), End: Pos(94, 33)>,\nStatementAssertion<Begin: Pos(95, 5), End: Pos(95, 33)>,\nStatementAssertion<Begin: Pos(96, 5), End: Pos(96, 32)>,\nStatementAssertion<Begin: Pos(97, 5), End: Pos(97, 32)>,\nStatementAssertion<Begin: Pos(98, 5), End: Pos(98, 36)>,\nStatementAssertion<Begin: Pos(99, 5), End: Pos(99, 35)>,\nStatementAssertion<Begin: Pos(100, 5), End: Pos(100, 32)>,\nStatementAssertion<Begin: Pos(101, 5), End: Pos(101, 33)>,\nStatementAssertion<Begin: Pos(102, 5), End: Pos(102, 40)>,\nStatementAssertion<Begin: Pos(103, 5), End: Pos(103, 37)>,\nStatementAssertion<Begin: Pos(104, 5), End: Pos(104, 43)>,\nStatementAssertion<Begin: Pos(105, 5), End: Pos(105, 34)>,\nStatementAssertion<Begin: Pos(106, 5), End: Pos(106, 39)>,\nStatementAssertion<Begin: Pos(109, 5), End: Pos(109, 42)>,\nStatementAssertion<Begin: Pos(110, 5), End: Pos(110, 40)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_60/test//com/google/javascript/jscomp/NodeUtilTest.java",
            "name": "testGetBooleanValue",
            "begin": "Pos(91, 10)",
            "end": "Pos(111, 3)",
            "begin_line_no": 91,
            "end_line_no": 111,
            "child": [
                "Begin: Pos(92, 5)\nEnd: Pos(92, 34)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(93, 5)\nEnd: Pos(93, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(94, 5)\nEnd: Pos(94, 33)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(95, 5)\nEnd: Pos(95, 33)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(96, 5)\nEnd: Pos(96, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(97, 5)\nEnd: Pos(97, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(98, 5)\nEnd: Pos(98, 36)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(99, 5)\nEnd: Pos(99, 35)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(100, 5)\nEnd: Pos(100, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(101, 5)\nEnd: Pos(101, 33)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(102, 5)\nEnd: Pos(102, 40)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(103, 5)\nEnd: Pos(103, 37)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(104, 5)\nEnd: Pos(104, 43)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(105, 5)\nEnd: Pos(105, 34)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(106, 5)\nEnd: Pos(106, 39)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(109, 5)\nEnd: Pos(109, 42)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(110, 5)\nEnd: Pos(110, 40)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testGetBooleanValue$catena_0() {\n    assertPureBooleanTrue(\"true\");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testGetBooleanValue$catena_1() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanTrue(\"10\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testGetBooleanValue$catena_2() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanTrue(\"'0'\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testGetBooleanValue$catena_3() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanTrue(\"/a/\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testGetBooleanValue$catena_4() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanTrue(\"{}\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testGetBooleanValue$catena_5() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanTrue(\"[]\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testGetBooleanValue$catena_6() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanFalse(\"false\");                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testGetBooleanValue$catena_7() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanFalse(\"null\");                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testGetBooleanValue$catena_8() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanFalse(\"0\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testGetBooleanValue$catena_9() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanFalse(\"''\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testGetBooleanValue$catena_10() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanFalse(\"undefined\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testGetBooleanValue$catena_11() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanFalse(\"void 0\");                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testGetBooleanValue$catena_12() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanUnknown(\"void foo()\");                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testGetBooleanValue$catena_13() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanUnknown(\"b\");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testGetBooleanValue$catena_14() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanUnknown(\"-'0.0'\");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testGetBooleanValue$catena_15() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    assertPureBooleanUnknown(\"{a:foo()}\");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testGetBooleanValue$catena_16() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanUnknown(\"[foo()]\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testGetBooleanValue$catena_0() {\n    assertPureBooleanTrue(\"true\");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testGetBooleanValue$catena_1() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanTrue(\"10\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testGetBooleanValue$catena_2() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanTrue(\"'0'\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "3": "  public void testGetBooleanValue$catena_3() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanTrue(\"/a/\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "4": "  public void testGetBooleanValue$catena_4() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanTrue(\"{}\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "5": "  public void testGetBooleanValue$catena_5() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanTrue(\"[]\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "6": "  public void testGetBooleanValue$catena_6() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanFalse(\"false\");                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "7": "  public void testGetBooleanValue$catena_7() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanFalse(\"null\");                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "8": "  public void testGetBooleanValue$catena_8() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanFalse(\"0\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "9": "  public void testGetBooleanValue$catena_9() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanFalse(\"''\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "10": "  public void testGetBooleanValue$catena_10() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanFalse(\"undefined\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "11": "  public void testGetBooleanValue$catena_11() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanFalse(\"void 0\");                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "12": "  public void testGetBooleanValue$catena_12() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanUnknown(\"void foo()\");                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "13": "  public void testGetBooleanValue$catena_13() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanUnknown(\"b\");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "14": "  public void testGetBooleanValue$catena_14() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanUnknown(\"-'0.0'\");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "15": "  public void testGetBooleanValue$catena_15() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    assertPureBooleanUnknown(\"{a:foo()}\");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "16": "  public void testGetBooleanValue$catena_16() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanUnknown(\"[foo()]\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        }
    },
    "111": {
        "failing_tests": [
            "com.google.javascript.jscomp.CommandLineRunnerTest::testIssue504",
            "com.google.javascript.jscomp.NodeUtilTest::testGetBooleanValue$catena_12"
        ]
    }
}