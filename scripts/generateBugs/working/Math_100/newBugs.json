{
    "original": {
        "num_of_hunks": 3,
        "0": {
            "file_name": "src/java/org/apache/commons/math/estimation/AbstractEstimator.java",
            "from_line_no": 166,
            "to_line_no": 166,
            "replaced_with": "        final int cols = problem.getUnboundParameters().length;\n",
            "replaced": "        final int cols = problem.getAllParameters().length;\n",
            "patch_type": "replace",
            "next_line_no": 167
        },
        "1": {
            "file_name": "src/java/org/apache/commons/math/estimation/AbstractEstimator.java",
            "from_line_no": 202,
            "to_line_no": 202,
            "replaced_with": "        int p = problem.getUnboundParameters().length;\n",
            "replaced": "        int p = problem.getAllParameters().length;\n",
            "patch_type": "replace",
            "next_line_no": 203
        },
        "2": {
            "file_name": "src/java/org/apache/commons/math/estimation/AbstractEstimator.java",
            "from_line_no": 207,
            "to_line_no": 207,
            "replaced_with": "        double[] errors = new double[problem.getUnboundParameters().length];\n",
            "replaced": "        double[] errors = new double[problem.getAllParameters().length];\n",
            "patch_type": "replace",
            "next_line_no": 208
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math.estimation.GaussNewtonEstimatorTest::testBoundParameters"
        ],
        "org.apache.commons.math.estimation.GaussNewtonEstimatorTest::testBoundParameters": {
            "file_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
            "Instance": "Begin: Pos(451, 10)\nEnd: Pos(487, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_100/src/test//org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java\nName: testBoundParameters\nChilds: [StatementAssertion<Begin: Pos(471, 7), End: Pos(471, 54)>,\nStatementAssertion<Begin: Pos(478, 7), End: Pos(478, 60)>,\nStatementAssertion<Begin: Pos(479, 7), End: Pos(479, 60)>,\nStatementAssertion<Begin: Pos(480, 7), End: Pos(480, 60)>,\nStatementAssertion<Begin: Pos(481, 7), End: Pos(481, 60)>,\nStatementAssertion<Begin: Pos(484, 7), End: Pos(484, 43)>,\nStatementAssertion<Begin: Pos(485, 7), End: Pos(485, 43)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_100/src/test//org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
            "name": "testBoundParameters",
            "begin": "Pos(451, 10)",
            "end": "Pos(487, 3)",
            "begin_line_no": 451,
            "end_line_no": 487,
            "child": [
                "Begin: Pos(471, 7)\nEnd: Pos(471, 54)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(478, 7)\nEnd: Pos(478, 60)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(479, 7)\nEnd: Pos(479, 60)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(480, 7)\nEnd: Pos(480, 60)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(481, 7)\nEnd: Pos(481, 60)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(484, 7)\nEnd: Pos(484, 43)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(485, 7)\nEnd: Pos(485, 43)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testBoundParameters$catena_0() throws EstimationException {\n      EstimatedParameter[] p = {\n        new EstimatedParameter(\"unbound0\", 2, false),\n        new EstimatedParameter(\"unbound1\", 2, false),\n        new EstimatedParameter(\"bound\",    2, true)\n      };\n      LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n        new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              3.0),\n        new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              1.0),\n        new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              7.0)\n      });\n\n      GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n      estimator.estimate(problem);\n      assertTrue(estimator.getRMS(problem) < 1.0e-10);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n      double[][] covariances = estimator.getCovariances(problem);\n      int i0 = 0, i1 = 1;\n      if (problem.getUnboundParameters()[0].getName().endsWith(\"1\")) {\n          i0 = 1;\n          i1 = 0;\n      }\n      try{ assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n      double[] errors = estimator.guessParametersErrors(problem);\n      try{ assertEquals(0, errors[i0], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(0, errors[i1], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
                "  public void testBoundParameters$catena_1() throws EstimationException {\n      EstimatedParameter[] p = {\n        new EstimatedParameter(\"unbound0\", 2, false),\n        new EstimatedParameter(\"unbound1\", 2, false),\n        new EstimatedParameter(\"bound\",    2, true)\n      };\n      LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n        new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              3.0),\n        new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              1.0),\n        new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              7.0)\n      });\n\n      GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n      estimator.estimate(problem);\n      try{ assertTrue(estimator.getRMS(problem) < 1.0e-10);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n      double[][] covariances = estimator.getCovariances(problem);\n      int i0 = 0, i1 = 1;\n      if (problem.getUnboundParameters()[0].getName().endsWith(\"1\")) {\n          i0 = 1;\n          i1 = 0;\n      }\n      assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n      try{ assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n      double[] errors = estimator.guessParametersErrors(problem);\n      try{ assertEquals(0, errors[i0], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(0, errors[i1], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
                "  public void testBoundParameters$catena_2() throws EstimationException {\n      EstimatedParameter[] p = {\n        new EstimatedParameter(\"unbound0\", 2, false),\n        new EstimatedParameter(\"unbound1\", 2, false),\n        new EstimatedParameter(\"bound\",    2, true)\n      };\n      LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n        new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              3.0),\n        new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              1.0),\n        new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              7.0)\n      });\n\n      GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n      estimator.estimate(problem);\n      try{ assertTrue(estimator.getRMS(problem) < 1.0e-10);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n      double[][] covariances = estimator.getCovariances(problem);\n      int i0 = 0, i1 = 1;\n      if (problem.getUnboundParameters()[0].getName().endsWith(\"1\")) {\n          i0 = 1;\n          i1 = 0;\n      }\n      try{ assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n      try{ assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n      double[] errors = estimator.guessParametersErrors(problem);\n      try{ assertEquals(0, errors[i0], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(0, errors[i1], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
                "  public void testBoundParameters$catena_3() throws EstimationException {\n      EstimatedParameter[] p = {\n        new EstimatedParameter(\"unbound0\", 2, false),\n        new EstimatedParameter(\"unbound1\", 2, false),\n        new EstimatedParameter(\"bound\",    2, true)\n      };\n      LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n        new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              3.0),\n        new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              1.0),\n        new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              7.0)\n      });\n\n      GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n      estimator.estimate(problem);\n      try{ assertTrue(estimator.getRMS(problem) < 1.0e-10);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n      double[][] covariances = estimator.getCovariances(problem);\n      int i0 = 0, i1 = 1;\n      if (problem.getUnboundParameters()[0].getName().endsWith(\"1\")) {\n          i0 = 1;\n          i1 = 0;\n      }\n      try{ assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n      try{ assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n      double[] errors = estimator.guessParametersErrors(problem);\n      try{ assertEquals(0, errors[i0], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(0, errors[i1], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
                "  public void testBoundParameters$catena_4() throws EstimationException {\n      EstimatedParameter[] p = {\n        new EstimatedParameter(\"unbound0\", 2, false),\n        new EstimatedParameter(\"unbound1\", 2, false),\n        new EstimatedParameter(\"bound\",    2, true)\n      };\n      LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n        new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              3.0),\n        new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              1.0),\n        new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              7.0)\n      });\n\n      GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n      estimator.estimate(problem);\n      try{ assertTrue(estimator.getRMS(problem) < 1.0e-10);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n      double[][] covariances = estimator.getCovariances(problem);\n      int i0 = 0, i1 = 1;\n      if (problem.getUnboundParameters()[0].getName().endsWith(\"1\")) {\n          i0 = 1;\n          i1 = 0;\n      }\n      try{ assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n      double[] errors = estimator.guessParametersErrors(problem);\n      try{ assertEquals(0, errors[i0], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(0, errors[i1], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
                "  public void testBoundParameters$catena_5() throws EstimationException {\n      EstimatedParameter[] p = {\n        new EstimatedParameter(\"unbound0\", 2, false),\n        new EstimatedParameter(\"unbound1\", 2, false),\n        new EstimatedParameter(\"bound\",    2, true)\n      };\n      LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n        new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              3.0),\n        new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              1.0),\n        new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              7.0)\n      });\n\n      GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n      estimator.estimate(problem);\n      try{ assertTrue(estimator.getRMS(problem) < 1.0e-10);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n      double[][] covariances = estimator.getCovariances(problem);\n      int i0 = 0, i1 = 1;\n      if (problem.getUnboundParameters()[0].getName().endsWith(\"1\")) {\n          i0 = 1;\n          i1 = 0;\n      }\n      try{ assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n      double[] errors = estimator.guessParametersErrors(problem);\n      assertEquals(0, errors[i0], 1.0e-10);                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n      try{ assertEquals(0, errors[i1], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
                "  public void testBoundParameters$catena_6() throws EstimationException {\n      EstimatedParameter[] p = {\n        new EstimatedParameter(\"unbound0\", 2, false),\n        new EstimatedParameter(\"unbound1\", 2, false),\n        new EstimatedParameter(\"bound\",    2, true)\n      };\n      LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n        new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              3.0),\n        new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              1.0),\n        new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              7.0)\n      });\n\n      GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n      estimator.estimate(problem);\n      try{ assertTrue(estimator.getRMS(problem) < 1.0e-10);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n      double[][] covariances = estimator.getCovariances(problem);\n      int i0 = 0, i1 = 1;\n      if (problem.getUnboundParameters()[0].getName().endsWith(\"1\")) {\n          i0 = 1;\n          i1 = 0;\n      }\n      try{ assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n      double[] errors = estimator.guessParametersErrors(problem);\n      try{ assertEquals(0, errors[i0], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n      assertEquals(0, errors[i1], 1.0e-10);                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n  }"
            ],
            "func": {
                "0": "  public void testBoundParameters$catena_0() throws EstimationException {\n      EstimatedParameter[] p = {\n        new EstimatedParameter(\"unbound0\", 2, false),\n        new EstimatedParameter(\"unbound1\", 2, false),\n        new EstimatedParameter(\"bound\",    2, true)\n      };\n      LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n        new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              3.0),\n        new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              1.0),\n        new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              7.0)\n      });\n\n      GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n      estimator.estimate(problem);\n      assertTrue(estimator.getRMS(problem) < 1.0e-10);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n      double[][] covariances = estimator.getCovariances(problem);\n      int i0 = 0, i1 = 1;\n      if (problem.getUnboundParameters()[0].getName().endsWith(\"1\")) {\n          i0 = 1;\n          i1 = 0;\n      }\n      try{ assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n      double[] errors = estimator.guessParametersErrors(problem);\n      try{ assertEquals(0, errors[i0], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(0, errors[i1], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
                "1": "  public void testBoundParameters$catena_1() throws EstimationException {\n      EstimatedParameter[] p = {\n        new EstimatedParameter(\"unbound0\", 2, false),\n        new EstimatedParameter(\"unbound1\", 2, false),\n        new EstimatedParameter(\"bound\",    2, true)\n      };\n      LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n        new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              3.0),\n        new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              1.0),\n        new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              7.0)\n      });\n\n      GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n      estimator.estimate(problem);\n      try{ assertTrue(estimator.getRMS(problem) < 1.0e-10);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n      double[][] covariances = estimator.getCovariances(problem);\n      int i0 = 0, i1 = 1;\n      if (problem.getUnboundParameters()[0].getName().endsWith(\"1\")) {\n          i0 = 1;\n          i1 = 0;\n      }\n      assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n      try{ assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n      double[] errors = estimator.guessParametersErrors(problem);\n      try{ assertEquals(0, errors[i0], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(0, errors[i1], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
                "2": "  public void testBoundParameters$catena_2() throws EstimationException {\n      EstimatedParameter[] p = {\n        new EstimatedParameter(\"unbound0\", 2, false),\n        new EstimatedParameter(\"unbound1\", 2, false),\n        new EstimatedParameter(\"bound\",    2, true)\n      };\n      LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n        new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              3.0),\n        new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              1.0),\n        new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              7.0)\n      });\n\n      GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n      estimator.estimate(problem);\n      try{ assertTrue(estimator.getRMS(problem) < 1.0e-10);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n      double[][] covariances = estimator.getCovariances(problem);\n      int i0 = 0, i1 = 1;\n      if (problem.getUnboundParameters()[0].getName().endsWith(\"1\")) {\n          i0 = 1;\n          i1 = 0;\n      }\n      try{ assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n      try{ assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n      double[] errors = estimator.guessParametersErrors(problem);\n      try{ assertEquals(0, errors[i0], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(0, errors[i1], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
                "3": "  public void testBoundParameters$catena_3() throws EstimationException {\n      EstimatedParameter[] p = {\n        new EstimatedParameter(\"unbound0\", 2, false),\n        new EstimatedParameter(\"unbound1\", 2, false),\n        new EstimatedParameter(\"bound\",    2, true)\n      };\n      LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n        new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              3.0),\n        new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              1.0),\n        new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              7.0)\n      });\n\n      GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n      estimator.estimate(problem);\n      try{ assertTrue(estimator.getRMS(problem) < 1.0e-10);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n      double[][] covariances = estimator.getCovariances(problem);\n      int i0 = 0, i1 = 1;\n      if (problem.getUnboundParameters()[0].getName().endsWith(\"1\")) {\n          i0 = 1;\n          i1 = 0;\n      }\n      try{ assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n      try{ assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n      double[] errors = estimator.guessParametersErrors(problem);\n      try{ assertEquals(0, errors[i0], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(0, errors[i1], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
                "4": "  public void testBoundParameters$catena_4() throws EstimationException {\n      EstimatedParameter[] p = {\n        new EstimatedParameter(\"unbound0\", 2, false),\n        new EstimatedParameter(\"unbound1\", 2, false),\n        new EstimatedParameter(\"bound\",    2, true)\n      };\n      LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n        new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              3.0),\n        new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              1.0),\n        new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              7.0)\n      });\n\n      GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n      estimator.estimate(problem);\n      try{ assertTrue(estimator.getRMS(problem) < 1.0e-10);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n      double[][] covariances = estimator.getCovariances(problem);\n      int i0 = 0, i1 = 1;\n      if (problem.getUnboundParameters()[0].getName().endsWith(\"1\")) {\n          i0 = 1;\n          i1 = 0;\n      }\n      try{ assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n      double[] errors = estimator.guessParametersErrors(problem);\n      try{ assertEquals(0, errors[i0], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(0, errors[i1], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
                "5": "  public void testBoundParameters$catena_5() throws EstimationException {\n      EstimatedParameter[] p = {\n        new EstimatedParameter(\"unbound0\", 2, false),\n        new EstimatedParameter(\"unbound1\", 2, false),\n        new EstimatedParameter(\"bound\",    2, true)\n      };\n      LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n        new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              3.0),\n        new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              1.0),\n        new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              7.0)\n      });\n\n      GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n      estimator.estimate(problem);\n      try{ assertTrue(estimator.getRMS(problem) < 1.0e-10);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n      double[][] covariances = estimator.getCovariances(problem);\n      int i0 = 0, i1 = 1;\n      if (problem.getUnboundParameters()[0].getName().endsWith(\"1\")) {\n          i0 = 1;\n          i1 = 0;\n      }\n      try{ assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n      double[] errors = estimator.guessParametersErrors(problem);\n      assertEquals(0, errors[i0], 1.0e-10);                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n      try{ assertEquals(0, errors[i1], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
                "6": "  public void testBoundParameters$catena_6() throws EstimationException {\n      EstimatedParameter[] p = {\n        new EstimatedParameter(\"unbound0\", 2, false),\n        new EstimatedParameter(\"unbound1\", 2, false),\n        new EstimatedParameter(\"bound\",    2, true)\n      };\n      LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n        new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              3.0),\n        new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              1.0),\n        new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              7.0)\n      });\n\n      GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n      estimator.estimate(problem);\n      try{ assertTrue(estimator.getRMS(problem) < 1.0e-10);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n      double[][] covariances = estimator.getCovariances(problem);\n      int i0 = 0, i1 = 1;\n      if (problem.getUnboundParameters()[0].getName().endsWith(\"1\")) {\n          i0 = 1;\n          i1 = 0;\n      }\n      try{ assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n      double[] errors = estimator.guessParametersErrors(problem);\n      try{ assertEquals(0, errors[i0], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n      assertEquals(0, errors[i1], 1.0e-10);                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n  }"
            }
        }
    },
    "111": {
        "failing_tests": [
            "org.apache.commons.math.estimation.GaussNewtonEstimatorTest::testBoundParameters$catena_3",
            "org.apache.commons.math.estimation.GaussNewtonEstimatorTest::testBoundParameters$catena_6",
            "org.apache.commons.math.estimation.GaussNewtonEstimatorTest::testBoundParameters$catena_0",
            "org.apache.commons.math.estimation.GaussNewtonEstimatorTest::testBoundParameters$catena_4",
            "org.apache.commons.math.estimation.GaussNewtonEstimatorTest::testBoundParameters$catena_5",
            "org.apache.commons.math.estimation.GaussNewtonEstimatorTest::testBoundParameters$catena_2",
            "org.apache.commons.math.estimation.GaussNewtonEstimatorTest::testBoundParameters$catena_1"
        ]
    }
}