{
    "original": {
        "num_of_hunks": 3,
        "0": {
            "file_name": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
            "replaced_with": "            String best = null;\n",
            "patch_type": "insert",
            "next_line_no": 2542
        },
        "1": {
            "file_name": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
            "from_line_no": 2544,
            "to_line_no": 2545,
            "replaced_with": "                \tif (best == null || id.length() > best.length()) {\n                \t\tbest = id;\n                \t}\n",
            "replaced": "                    bucket.setZone(DateTimeZone.forID(id));\n                    return position + id.length();\n",
            "patch_type": "replace",
            "next_line_no": 2546
        },
        "2": {
            "file_name": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
            "replaced_with": "            if (best != null) {\n                bucket.setZone(DateTimeZone.forID(best));\n                return position + best.length();\n            }\n",
            "patch_type": "insert",
            "next_line_no": 2548
        }
    },
    "method": {
        "failing_tests": [
            "org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseZoneDawsonCreek"
        ],
        "org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseZoneDawsonCreek": {
            "file_path": "src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java",
            "Instance": "Begin: Pos(255, 12)\nEnd: Pos(263, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Time_20/src/test/java//org/joda/time/format/TestDateTimeFormatterBuilder.java\nName: test_printParseZoneDawsonCreek\nChilds: [StatementAssertion<Begin: Pos(261, 9), End: Pos(261, 75)>,\nStatementAssertion<Begin: Pos(262, 9), End: Pos(262, 83)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Time_20/src/test/java//org/joda/time/format/TestDateTimeFormatterBuilder.java",
            "name": "test_printParseZoneDawsonCreek",
            "begin": "Pos(255, 12)",
            "end": "Pos(263, 5)",
            "begin_line_no": 255,
            "end_line_no": 263,
            "child": [
                "Begin: Pos(261, 9)\nEnd: Pos(261, 75)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(262, 9)\nEnd: Pos(262, 83)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void test_printParseZoneDawsonCreek$catena_0() {  // clashes with shorter Dawson\n        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()\n            .appendPattern(\"yyyy-MM-dd HH:mm \").appendTimeZoneId();\n        DateTimeFormatter f = bld.toFormatter();\n        \n        DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forID(\"America/Dawson_Creek\"));\n        assertEquals(\"2007-03-04 12:30 America/Dawson_Creek\", f.print(dt));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(dt, f.parseDateTime(\"2007-03-04 12:30 America/Dawson_Creek\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_printParseZoneDawsonCreek$catena_1() {  // clashes with shorter Dawson\n        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()\n            .appendPattern(\"yyyy-MM-dd HH:mm \").appendTimeZoneId();\n        DateTimeFormatter f = bld.toFormatter();\n        \n        DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forID(\"America/Dawson_Creek\"));\n        try{ assertEquals(\"2007-03-04 12:30 America/Dawson_Creek\", f.print(dt));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(dt, f.parseDateTime(\"2007-03-04 12:30 America/Dawson_Creek\"));                         /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void test_printParseZoneDawsonCreek$catena_0() {  // clashes with shorter Dawson\n        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()\n            .appendPattern(\"yyyy-MM-dd HH:mm \").appendTimeZoneId();\n        DateTimeFormatter f = bld.toFormatter();\n        \n        DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forID(\"America/Dawson_Creek\"));\n        assertEquals(\"2007-03-04 12:30 America/Dawson_Creek\", f.print(dt));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(dt, f.parseDateTime(\"2007-03-04 12:30 America/Dawson_Creek\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void test_printParseZoneDawsonCreek$catena_1() {  // clashes with shorter Dawson\n        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()\n            .appendPattern(\"yyyy-MM-dd HH:mm \").appendTimeZoneId();\n        DateTimeFormatter f = bld.toFormatter();\n        \n        DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forID(\"America/Dawson_Creek\"));\n        try{ assertEquals(\"2007-03-04 12:30 America/Dawson_Creek\", f.print(dt));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(dt, f.parseDateTime(\"2007-03-04 12:30 America/Dawson_Creek\"));                         /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "111": {
        "failing_tests": [
            "org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseZoneDawsonCreek$catena_1"
        ]
    }
}