---
Begin generate bug_id: Lang_12
num_of_hunks: 3
use working dir: ./working/data/Lang_12
Try to checkout Lang_12
build dir: ['./working/data/Lang_12/target/classes', './working/data/Lang_12/target/tests']
init FileManager
trace file: src/main/java/org/apache/commons/lang3/RandomStringUtils.java
trace file: src/main/java/org/apache/commons/lang3/RandomStringUtils.java
trace file: src/main/java/org/apache/commons/lang3/RandomStringUtils.java
trying to replace old failing tests
edit: replace from 133 range 39 at src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java
to
    public void testExceptions$catena_0() {
        final char[] DUMMY = new char[]{'a'}; // valid char array
        try {
            RandomStringUtils.random(-1);
            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, true, true);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, DUMMY);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(1, new char[0]); // must not provide empty array => IAE
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, "");
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, (String)null);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random());
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
    }     public void testExceptions$catena_1() {
        final char[] DUMMY = new char[]{'a'}; // valid char array
        try {
            RandomStringUtils.random(-1);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, true, true);
            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, DUMMY);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(1, new char[0]); // must not provide empty array => IAE
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, "");
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, (String)null);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random());
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
    }     public void testExceptions$catena_2() {
        final char[] DUMMY = new char[]{'a'}; // valid char array
        try {
            RandomStringUtils.random(-1);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, true, true);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, DUMMY);
            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(1, new char[0]); // must not provide empty array => IAE
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, "");
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, (String)null);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random());
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
    }     public void testExceptions$catena_3() {
        final char[] DUMMY = new char[]{'a'}; // valid char array
        try {
            RandomStringUtils.random(-1);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, true, true);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, DUMMY);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(1, new char[0]); // must not provide empty array => IAE
            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, "");
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, (String)null);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random());
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
    }     public void testExceptions$catena_4() {
        final char[] DUMMY = new char[]{'a'}; // valid char array
        try {
            RandomStringUtils.random(-1);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, true, true);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, DUMMY);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(1, new char[0]); // must not provide empty array => IAE
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, "");
            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, (String)null);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random());
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
    }     public void testExceptions$catena_5() {
        final char[] DUMMY = new char[]{'a'}; // valid char array
        try {
            RandomStringUtils.random(-1);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, true, true);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, DUMMY);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(1, new char[0]); // must not provide empty array => IAE
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, "");
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, (String)null);
            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random());
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
    }     public void testExceptions$catena_6() {
        final char[] DUMMY = new char[]{'a'}; // valid char array
        try {
            RandomStringUtils.random(-1);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, true, true);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, DUMMY);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(1, new char[0]); // must not provide empty array => IAE
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, "");
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, (String)null);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false);
            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random());
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
    }     public void testExceptions$catena_7() {
        final char[] DUMMY = new char[]{'a'}; // valid char array
        try {
            RandomStringUtils.random(-1);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, true, true);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, DUMMY);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(1, new char[0]); // must not provide empty array => IAE
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, "");
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, (String)null);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY);
            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random());
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
    }     public void testExceptions$catena_8() {
        final char[] DUMMY = new char[]{'a'}; // valid char array
        try {
            RandomStringUtils.random(-1);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, true, true);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, DUMMY);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(1, new char[0]); // must not provide empty array => IAE
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, "");
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, (String)null);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random());
            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (IllegalArgumentException ex) {}
    }
trace file: src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java
new test num: 9
ori test num: 1
pattern: 000
patches are written to file
running tests...
used time: Finished in 43.22 seconds
Failing tests: 10
	org.apache.commons.lang3.RandomStringUtilsTest::testLANG805
	org.apache.commons.lang3.RandomStringUtilsTest::testExceptions$catena_0
	org.apache.commons.lang3.RandomStringUtilsTest::testExceptions$catena_1
	org.apache.commons.lang3.RandomStringUtilsTest::testExceptions$catena_2
	org.apache.commons.lang3.RandomStringUtilsTest::testExceptions$catena_3
	org.apache.commons.lang3.RandomStringUtilsTest::testExceptions$catena_4
	org.apache.commons.lang3.RandomStringUtilsTest::testExceptions$catena_5
	org.apache.commons.lang3.RandomStringUtilsTest::testExceptions$catena_6
	org.apache.commons.lang3.RandomStringUtilsTest::testExceptions$catena_7
	org.apache.commons.lang3.RandomStringUtilsTest::testExceptions$catena_8
pattern: 001
try to fix hunk: 2
insert before 238 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 010
try to fix hunk: 1
insert before 232 with             if (chars != null) {
                end = chars.length;
            } else {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 100
try to fix hunk: 0
insert before 230 with         if (chars != null && chars.length == 0) {
            throw new IllegalArgumentException("The chars array must not be empty");
        }

patches are written to file
running tests...
used time: Finished in 32.81 seconds
Failing tests: 1
	org.apache.commons.lang3.RandomStringUtilsTest::testLANG805
No new failing tests but only 1 hunk
pattern: 011
try to fix hunk: 1
insert before 232 with             if (chars != null) {
                end = chars.length;
            } else {

try to fix hunk: 2
insert before 238 with             }

patches are written to file
running tests...
used time: Finished in 33.44 seconds
Failing tests: 0
Can independently fix ['org.apache.commons.lang3.RandomStringUtilsTest::testExceptions$catena_2', 'org.apache.commons.lang3.RandomStringUtilsTest::testLANG805', 'org.apache.commons.lang3.RandomStringUtilsTest::testExceptions$catena_8', 'org.apache.commons.lang3.RandomStringUtilsTest::testExceptions$catena_6', 'org.apache.commons.lang3.RandomStringUtilsTest::testExceptions$catena_5', 'org.apache.commons.lang3.RandomStringUtilsTest::testExceptions$catena_1', 'org.apache.commons.lang3.RandomStringUtilsTest::testExceptions$catena_7', 'org.apache.commons.lang3.RandomStringUtilsTest::testExceptions$catena_3', 'org.apache.commons.lang3.RandomStringUtilsTest::testExceptions$catena_4', 'org.apache.commons.lang3.RandomStringUtilsTest::testExceptions$catena_0']
select new bug
Pattern: 011
failing tests: org.apache.commons.lang3.RandomStringUtilsTest::testExceptions$catena_2@org.apache.commons.lang3.RandomStringUtilsTest::testLANG805@org.apache.commons.lang3.RandomStringUtilsTest::testExceptions$catena_8@org.apache.commons.lang3.RandomStringUtilsTest::testExceptions$catena_6@org.apache.commons.lang3.RandomStringUtilsTest::testExceptions$catena_5@org.apache.commons.lang3.RandomStringUtilsTest::testExceptions$catena_1@org.apache.commons.lang3.RandomStringUtilsTest::testExceptions$catena_7@org.apache.commons.lang3.RandomStringUtilsTest::testExceptions$catena_3@org.apache.commons.lang3.RandomStringUtilsTest::testExceptions$catena_4@org.apache.commons.lang3.RandomStringUtilsTest::testExceptions$catena_0
pattern: 101
try to fix hunk: 0
insert before 230 with         if (chars != null && chars.length == 0) {
            throw new IllegalArgumentException("The chars array must not be empty");
        }

try to fix hunk: 2
insert before 238 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 110
try to fix hunk: 0
insert before 230 with         if (chars != null && chars.length == 0) {
            throw new IllegalArgumentException("The chars array must not be empty");
        }

try to fix hunk: 1
insert before 232 with             if (chars != null) {
                end = chars.length;
            } else {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 111
try to fix hunk: 0
insert before 230 with         if (chars != null && chars.length == 0) {
            throw new IllegalArgumentException("The chars array must not be empty");
        }

try to fix hunk: 1
insert before 232 with             if (chars != null) {
                end = chars.length;
            } else {

try to fix hunk: 2
insert before 238 with             }

patches are written to file
running tests...
used time: Finished in 33.24 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
Find 1 new bugs
