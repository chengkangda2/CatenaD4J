{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
            "from_line_no": 711,
            "to_line_no": 711,
            "replaced": "          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n",
            "patch_type": "delete",
            "next_line_no": 712
        },
        "1": {
            "file_name": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
            "from_line_no": 718,
            "to_line_no": 718,
            "replaced": "          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n",
            "patch_type": "delete",
            "next_line_no": 719
        }
    },
    "method": {
        "failing_tests": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldArithmetic"
        ],
        "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldArithmetic": {
            "file_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
            "Instance": "Begin: Pos(552, 10)\nEnd: Pos(563, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_78/test//com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\nName: testFoldArithmetic\nChilds: [StatementAssertion<Begin: Pos(553, 5), End: Pos(553, 34)>,\nStatementAssertion<Begin: Pos(554, 5), End: Pos(554, 33)>,\nStatementAssertion<Begin: Pos(555, 5), End: Pos(555, 37)>,\nStatementAssertion<Begin: Pos(556, 5), End: Pos(556, 35)>,\nStatementAssertion<Begin: Pos(557, 5), End: Pos(557, 35)>,\nStatementAssertion<Begin: Pos(558, 5), End: Pos(558, 35)>,\nStatementAssertion<Begin: Pos(559, 5), End: Pos(559, 31)>,\nStatementAssertion<Begin: Pos(560, 5), End: Pos(560, 32)>,\nStatementAssertion<Begin: Pos(561, 5), End: Pos(561, 33)>,\nStatementAssertion<Begin: Pos(562, 5), End: Pos(562, 35)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_78/test//com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
            "name": "testFoldArithmetic",
            "begin": "Pos(552, 10)",
            "end": "Pos(563, 3)",
            "begin_line_no": 552,
            "end_line_no": 563,
            "child": [
                "Begin: Pos(553, 5)\nEnd: Pos(553, 34)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(554, 5)\nEnd: Pos(554, 33)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(555, 5)\nEnd: Pos(555, 37)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(556, 5)\nEnd: Pos(556, 35)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(557, 5)\nEnd: Pos(557, 35)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(558, 5)\nEnd: Pos(558, 35)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(559, 5)\nEnd: Pos(559, 31)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(560, 5)\nEnd: Pos(560, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(561, 5)\nEnd: Pos(561, 33)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(562, 5)\nEnd: Pos(562, 35)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testFoldArithmetic$catena_0() {\n    fold(\"x = 10 + 20\", \"x = 30\");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = 2 / 4\", \"x = 0.5\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2.25 * 3\", \"x = 6.75\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"z = x * y\", \"z = x * y\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = y * 5\", \"x = y * 5\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 / 0\", \"x = 1 / 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % 2\", \"x = 1\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % -2\", \"x = 1\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = -1 % 3\", \"x = -1\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 % 0\", \"x = 1 % 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldArithmetic$catena_1() {\n    try{ fold(\"x = 10 + 20\", \"x = 30\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = 2 / 4\", \"x = 0.5\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = 2.25 * 3\", \"x = 6.75\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"z = x * y\", \"z = x * y\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = y * 5\", \"x = y * 5\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 / 0\", \"x = 1 / 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % 2\", \"x = 1\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % -2\", \"x = 1\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = -1 % 3\", \"x = -1\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 % 0\", \"x = 1 % 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldArithmetic$catena_2() {\n    try{ fold(\"x = 10 + 20\", \"x = 30\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2 / 4\", \"x = 0.5\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = 2.25 * 3\", \"x = 6.75\");                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"z = x * y\", \"z = x * y\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = y * 5\", \"x = y * 5\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 / 0\", \"x = 1 / 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % 2\", \"x = 1\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % -2\", \"x = 1\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = -1 % 3\", \"x = -1\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 % 0\", \"x = 1 % 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldArithmetic$catena_3() {\n    try{ fold(\"x = 10 + 20\", \"x = 30\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2 / 4\", \"x = 0.5\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2.25 * 3\", \"x = 6.75\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"z = x * y\", \"z = x * y\");                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = y * 5\", \"x = y * 5\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 / 0\", \"x = 1 / 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % 2\", \"x = 1\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % -2\", \"x = 1\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = -1 % 3\", \"x = -1\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 % 0\", \"x = 1 % 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldArithmetic$catena_4() {\n    try{ fold(\"x = 10 + 20\", \"x = 30\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2 / 4\", \"x = 0.5\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2.25 * 3\", \"x = 6.75\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"z = x * y\", \"z = x * y\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = y * 5\", \"x = y * 5\");                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = 1 / 0\", \"x = 1 / 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % 2\", \"x = 1\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % -2\", \"x = 1\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = -1 % 3\", \"x = -1\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 % 0\", \"x = 1 % 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldArithmetic$catena_5() {\n    try{ fold(\"x = 10 + 20\", \"x = 30\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2 / 4\", \"x = 0.5\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2.25 * 3\", \"x = 6.75\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"z = x * y\", \"z = x * y\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = y * 5\", \"x = y * 5\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = 1 / 0\", \"x = 1 / 0\");                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = 3 % 2\", \"x = 1\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % -2\", \"x = 1\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = -1 % 3\", \"x = -1\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 % 0\", \"x = 1 % 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldArithmetic$catena_6() {\n    try{ fold(\"x = 10 + 20\", \"x = 30\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2 / 4\", \"x = 0.5\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2.25 * 3\", \"x = 6.75\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"z = x * y\", \"z = x * y\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = y * 5\", \"x = y * 5\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 / 0\", \"x = 1 / 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = 3 % 2\", \"x = 1\");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = 3 % -2\", \"x = 1\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = -1 % 3\", \"x = -1\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 % 0\", \"x = 1 % 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldArithmetic$catena_7() {\n    try{ fold(\"x = 10 + 20\", \"x = 30\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2 / 4\", \"x = 0.5\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2.25 * 3\", \"x = 6.75\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"z = x * y\", \"z = x * y\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = y * 5\", \"x = y * 5\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 / 0\", \"x = 1 / 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % 2\", \"x = 1\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = 3 % -2\", \"x = 1\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = -1 % 3\", \"x = -1\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 % 0\", \"x = 1 % 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldArithmetic$catena_8() {\n    try{ fold(\"x = 10 + 20\", \"x = 30\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2 / 4\", \"x = 0.5\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2.25 * 3\", \"x = 6.75\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"z = x * y\", \"z = x * y\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = y * 5\", \"x = y * 5\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 / 0\", \"x = 1 / 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % 2\", \"x = 1\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % -2\", \"x = 1\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = -1 % 3\", \"x = -1\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = 1 % 0\", \"x = 1 % 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldArithmetic$catena_9() {\n    try{ fold(\"x = 10 + 20\", \"x = 30\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2 / 4\", \"x = 0.5\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2.25 * 3\", \"x = 6.75\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"z = x * y\", \"z = x * y\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = y * 5\", \"x = y * 5\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 / 0\", \"x = 1 / 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % 2\", \"x = 1\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % -2\", \"x = 1\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = -1 % 3\", \"x = -1\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = 1 % 0\", \"x = 1 % 0\");                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testFoldArithmetic$catena_0() {\n    fold(\"x = 10 + 20\", \"x = 30\");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = 2 / 4\", \"x = 0.5\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2.25 * 3\", \"x = 6.75\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"z = x * y\", \"z = x * y\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = y * 5\", \"x = y * 5\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 / 0\", \"x = 1 / 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % 2\", \"x = 1\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % -2\", \"x = 1\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = -1 % 3\", \"x = -1\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 % 0\", \"x = 1 % 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testFoldArithmetic$catena_1() {\n    try{ fold(\"x = 10 + 20\", \"x = 30\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = 2 / 4\", \"x = 0.5\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = 2.25 * 3\", \"x = 6.75\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"z = x * y\", \"z = x * y\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = y * 5\", \"x = y * 5\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 / 0\", \"x = 1 / 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % 2\", \"x = 1\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % -2\", \"x = 1\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = -1 % 3\", \"x = -1\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 % 0\", \"x = 1 % 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testFoldArithmetic$catena_2() {\n    try{ fold(\"x = 10 + 20\", \"x = 30\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2 / 4\", \"x = 0.5\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = 2.25 * 3\", \"x = 6.75\");                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"z = x * y\", \"z = x * y\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = y * 5\", \"x = y * 5\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 / 0\", \"x = 1 / 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % 2\", \"x = 1\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % -2\", \"x = 1\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = -1 % 3\", \"x = -1\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 % 0\", \"x = 1 % 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "3": "  public void testFoldArithmetic$catena_3() {\n    try{ fold(\"x = 10 + 20\", \"x = 30\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2 / 4\", \"x = 0.5\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2.25 * 3\", \"x = 6.75\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"z = x * y\", \"z = x * y\");                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = y * 5\", \"x = y * 5\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 / 0\", \"x = 1 / 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % 2\", \"x = 1\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % -2\", \"x = 1\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = -1 % 3\", \"x = -1\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 % 0\", \"x = 1 % 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "4": "  public void testFoldArithmetic$catena_4() {\n    try{ fold(\"x = 10 + 20\", \"x = 30\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2 / 4\", \"x = 0.5\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2.25 * 3\", \"x = 6.75\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"z = x * y\", \"z = x * y\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = y * 5\", \"x = y * 5\");                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = 1 / 0\", \"x = 1 / 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % 2\", \"x = 1\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % -2\", \"x = 1\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = -1 % 3\", \"x = -1\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 % 0\", \"x = 1 % 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "5": "  public void testFoldArithmetic$catena_5() {\n    try{ fold(\"x = 10 + 20\", \"x = 30\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2 / 4\", \"x = 0.5\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2.25 * 3\", \"x = 6.75\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"z = x * y\", \"z = x * y\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = y * 5\", \"x = y * 5\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = 1 / 0\", \"x = 1 / 0\");                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = 3 % 2\", \"x = 1\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % -2\", \"x = 1\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = -1 % 3\", \"x = -1\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 % 0\", \"x = 1 % 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "6": "  public void testFoldArithmetic$catena_6() {\n    try{ fold(\"x = 10 + 20\", \"x = 30\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2 / 4\", \"x = 0.5\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2.25 * 3\", \"x = 6.75\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"z = x * y\", \"z = x * y\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = y * 5\", \"x = y * 5\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 / 0\", \"x = 1 / 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = 3 % 2\", \"x = 1\");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = 3 % -2\", \"x = 1\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = -1 % 3\", \"x = -1\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 % 0\", \"x = 1 % 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "7": "  public void testFoldArithmetic$catena_7() {\n    try{ fold(\"x = 10 + 20\", \"x = 30\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2 / 4\", \"x = 0.5\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2.25 * 3\", \"x = 6.75\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"z = x * y\", \"z = x * y\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = y * 5\", \"x = y * 5\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 / 0\", \"x = 1 / 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % 2\", \"x = 1\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = 3 % -2\", \"x = 1\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = -1 % 3\", \"x = -1\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 % 0\", \"x = 1 % 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "8": "  public void testFoldArithmetic$catena_8() {\n    try{ fold(\"x = 10 + 20\", \"x = 30\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2 / 4\", \"x = 0.5\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2.25 * 3\", \"x = 6.75\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"z = x * y\", \"z = x * y\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = y * 5\", \"x = y * 5\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 / 0\", \"x = 1 / 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % 2\", \"x = 1\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % -2\", \"x = 1\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = -1 % 3\", \"x = -1\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = 1 % 0\", \"x = 1 % 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "9": "  public void testFoldArithmetic$catena_9() {\n    try{ fold(\"x = 10 + 20\", \"x = 30\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2 / 4\", \"x = 0.5\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2.25 * 3\", \"x = 6.75\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"z = x * y\", \"z = x * y\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = y * 5\", \"x = y * 5\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 / 0\", \"x = 1 / 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % 2\", \"x = 1\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % -2\", \"x = 1\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = -1 % 3\", \"x = -1\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = 1 % 0\", \"x = 1 % 0\");                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        }
    }
}