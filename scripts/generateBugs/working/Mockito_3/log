---
Begin generate bug_id: Mockito_3
num_of_hunks: 3
timeout for running: 3600
use working dir: ./working/data/Mockito_3
Try to checkout Mockito_3
build dir: ['./working/data/Mockito_3/build/classes/main', './working/data/Mockito_3/build/classes/test']
init FileManager
trace file: src/org/mockito/internal/invocation/InvocationMatcher.java
trying to replace old failing tests
edit: replace from 43 range 10 at test/org/mockitousage/bugs/varargs/VarargsAndAnyObjectPicksUpExtraInvocationsTest.java
to
    @Test
    public void shouldVerifyCorrectlyNumberOfInvocationsWithVarargs$catena_0() {
        //when
        table.newRow("qux", "foo", "bar", "baz");
        table.newRow("abc", "def");
        
        //then
        verify(table).newRow(anyString(), eq("foo"), anyString(), anyString());                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ verify(table).newRow(anyString(), anyString());                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void shouldVerifyCorrectlyNumberOfInvocationsWithVarargs$catena_1() {
        //when
        table.newRow("qux", "foo", "bar", "baz");
        table.newRow("abc", "def");
        
        //then
        try{ verify(table).newRow(anyString(), eq("foo"), anyString(), anyString());                        }catch(Throwable __SHOULD_BE_IGNORED){}
        verify(table).newRow(anyString(), anyString());                                                     /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 24 range 12 at test/org/mockitousage/bugs/varargs/VarargsNotPlayingWithAnyObjectTest.java
to
    @Test
    public void shouldMatchAnyVararg$catena_0() {
        mock.run("a", "b");

        verify(mock).run(anyString(), anyString());                                                         /***** ORIGINAL ASSERTION IS HERE *****/
        try{ verify(mock).run((String) anyObject(), (String) anyObject());                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ verify(mock).run((String[]) anyVararg());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        
        try{ verify(mock, never()).run();                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ verify(mock, never()).run(anyString(), eq("f"));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void shouldMatchAnyVararg$catena_1() {
        mock.run("a", "b");

        try{ verify(mock).run(anyString(), anyString());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        verify(mock).run((String) anyObject(), (String) anyObject());                                       /***** ORIGINAL ASSERTION IS HERE *****/

        try{ verify(mock).run((String[]) anyVararg());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        
        try{ verify(mock, never()).run();                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ verify(mock, never()).run(anyString(), eq("f"));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void shouldMatchAnyVararg$catena_2() {
        mock.run("a", "b");

        try{ verify(mock).run(anyString(), anyString());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ verify(mock).run((String) anyObject(), (String) anyObject());                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        verify(mock).run((String[]) anyVararg());                                                           /***** ORIGINAL ASSERTION IS HERE *****/
        
        try{ verify(mock, never()).run();                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ verify(mock, never()).run(anyString(), eq("f"));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void shouldMatchAnyVararg$catena_3() {
        mock.run("a", "b");

        try{ verify(mock).run(anyString(), anyString());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ verify(mock).run((String) anyObject(), (String) anyObject());                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ verify(mock).run((String[]) anyVararg());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        
        verify(mock, never()).run();                                                                        /***** ORIGINAL ASSERTION IS HERE *****/
        try{ verify(mock, never()).run(anyString(), eq("f"));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void shouldMatchAnyVararg$catena_4() {
        mock.run("a", "b");

        try{ verify(mock).run(anyString(), anyString());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ verify(mock).run((String) anyObject(), (String) anyObject());                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ verify(mock).run((String[]) anyVararg());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        
        try{ verify(mock, never()).run();                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        verify(mock, never()).run(anyString(), eq("f"));                                                    /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 266 range 14 at test/org/mockitousage/matchers/CapturingArgumentsTest.java
to
    @Test
    public void should_capture_all_vararg$catena_0() throws Exception {
        // given
        ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);

        // when
        mock.mixedVarargs(42, "a", "b", "c");
        mock.mixedVarargs(42, "again ?!");

        // then
        verify(mock, times(2)).mixedVarargs(any(), argumentCaptor.capture());                                    /***** ORIGINAL ASSERTION IS HERE *****/

        try{ Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly("a", "b", "c", "again ?!");    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void should_capture_all_vararg$catena_1() throws Exception {
        // given
        ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);

        // when
        mock.mixedVarargs(42, "a", "b", "c");
        mock.mixedVarargs(42, "again ?!");

        // then
        try{ verify(mock, times(2)).mixedVarargs(any(), argumentCaptor.capture());                               }catch(Throwable __SHOULD_BE_IGNORED){}

        Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly("a", "b", "c", "again ?!");         /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 294 range 13 at test/org/mockitousage/matchers/CapturingArgumentsTest.java
to
    @Test
    public void captures_correctly_when_captor_used_multiple_times$catena_0() throws Exception {
        // given
        ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);

        // when
        mock.mixedVarargs(42, "a", "b", "c");

        // then
        // this is only for backwards compatibility. It does not make sense in real to do so.
        verify(mock).mixedVarargs(any(), argumentCaptor.capture(), argumentCaptor.capture(), argumentCaptor.capture());         /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly("a", "b", "c");                               }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void captures_correctly_when_captor_used_multiple_times$catena_1() throws Exception {
        // given
        ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);

        // when
        mock.mixedVarargs(42, "a", "b", "c");

        // then
        // this is only for backwards compatibility. It does not make sense in real to do so.
        try{ verify(mock).mixedVarargs(any(), argumentCaptor.capture(), argumentCaptor.capture(), argumentCaptor.capture());    }catch(Throwable __SHOULD_BE_IGNORED){}
        Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly("a", "b", "c");                                    /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 253 range 12 at test/org/mockitousage/matchers/CapturingArgumentsTest.java
to
    @Test
    public void should_capture_vararg$catena_0() throws Exception {
        // given
        ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);

        // when
        mock.mixedVarargs(42, "a", "b", "c");

        // then
        verify(mock).mixedVarargs(any(), argumentCaptor.capture());                                         /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly("a", "b", "c");           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void should_capture_vararg$catena_1() throws Exception {
        // given
        ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);

        // when
        mock.mixedVarargs(42, "a", "b", "c");

        // then
        try{ verify(mock).mixedVarargs(any(), argumentCaptor.capture());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly("a", "b", "c");                /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 308 range 12 at test/org/mockitousage/matchers/CapturingArgumentsTest.java
to
    @Test
    public void captures_correctly_when_captor_used_on_pure_vararg_method$catena_0() throws Exception {
        // given
        ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);

        // when
        mock.varargs(42, "capturedValue");

        // then
        verify(mock).varargs(eq(42), argumentCaptor.capture());                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assertions.assertThat(argumentCaptor.getValue()).contains("capturedValue");                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void captures_correctly_when_captor_used_on_pure_vararg_method$catena_1() throws Exception {
        // given
        ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);

        // when
        mock.varargs(42, "capturedValue");

        // then
        try{ verify(mock).varargs(eq(42), argumentCaptor.capture());                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        Assertions.assertThat(argumentCaptor.getValue()).contains("capturedValue");                         /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 239 range 13 at test/org/mockitousage/matchers/CapturingArgumentsTest.java
to
    @Test
    public void should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper$catena_0() throws Exception {
        // given
        ArgumentCaptor<Byte> argumentCaptor = ArgumentCaptor.forClass(Byte.class);

        // when
        mock.varargsbyte((byte) 1, (byte) 2);

        // then
        verify(mock).varargsbyte(argumentCaptor.capture());                                                 /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals((byte) 2, (byte) argumentCaptor.getValue());                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly((byte) 1, (byte) 2);      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper$catena_1() throws Exception {
        // given
        ArgumentCaptor<Byte> argumentCaptor = ArgumentCaptor.forClass(Byte.class);

        // when
        mock.varargsbyte((byte) 1, (byte) 2);

        // then
        try{ verify(mock).varargsbyte(argumentCaptor.capture());                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals((byte) 2, (byte) argumentCaptor.getValue());                                           /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly((byte) 1, (byte) 2);      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper$catena_2() throws Exception {
        // given
        ArgumentCaptor<Byte> argumentCaptor = ArgumentCaptor.forClass(Byte.class);

        // when
        mock.varargsbyte((byte) 1, (byte) 2);

        // then
        try{ verify(mock).varargsbyte(argumentCaptor.capture());                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals((byte) 2, (byte) argumentCaptor.getValue());                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly((byte) 1, (byte) 2);           /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 225 range 13 at test/org/mockitousage/matchers/CapturingArgumentsTest.java
to
    @Test
    public void should_capture_byte_vararg_by_creating_captor_with_primitive$catena_0() throws Exception {
        // given
        ArgumentCaptor<Byte> argumentCaptor = ArgumentCaptor.forClass(byte.class);

        // when
        mock.varargsbyte((byte) 1, (byte) 2);

        // then
        verify(mock).varargsbyte(argumentCaptor.capture());                                                 /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals((byte) 2, (byte) argumentCaptor.getValue());                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly((byte) 1, (byte) 2);      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void should_capture_byte_vararg_by_creating_captor_with_primitive$catena_1() throws Exception {
        // given
        ArgumentCaptor<Byte> argumentCaptor = ArgumentCaptor.forClass(byte.class);

        // when
        mock.varargsbyte((byte) 1, (byte) 2);

        // then
        try{ verify(mock).varargsbyte(argumentCaptor.capture());                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals((byte) 2, (byte) argumentCaptor.getValue());                                           /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly((byte) 1, (byte) 2);      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void should_capture_byte_vararg_by_creating_captor_with_primitive$catena_2() throws Exception {
        // given
        ArgumentCaptor<Byte> argumentCaptor = ArgumentCaptor.forClass(byte.class);

        // when
        mock.varargsbyte((byte) 1, (byte) 2);

        // then
        try{ verify(mock).varargsbyte(argumentCaptor.capture());                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals((byte) 2, (byte) argumentCaptor.getValue());                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly((byte) 1, (byte) 2);           /***** ORIGINAL ASSERTION IS HERE *****/
    }
trace file: test/org/mockitousage/matchers/CapturingArgumentsTest.java
trace file: test/org/mockitousage/bugs/varargs/VarargsNotPlayingWithAnyObjectTest.java
trace file: test/org/mockitousage/bugs/varargs/VarargsAndAnyObjectPicksUpExtraInvocationsTest.java
new test num: 21
ori test num: 1
pattern: 000
patches are written to file
running tests...
used time: Finished in 381.51 seconds
Failing tests: 14
	org.mockito.internal.invocation.InvocationMatcherTest::should_capture_varargs_as_vararg
	org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest::shouldVerifyCorrectlyNumberOfInvocationsWithVarargs$catena_0
	org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest::shouldMatchAnyVararg$catena_0
	org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest::shouldMatchAnyVararg$catena_1
	org.mockitousage.matchers.CapturingArgumentsTest::should_capture_all_vararg$catena_1
	org.mockitousage.matchers.CapturingArgumentsTest::captures_correctly_when_captor_used_multiple_times$catena_0
	org.mockitousage.matchers.CapturingArgumentsTest::captures_correctly_when_captor_used_multiple_times$catena_1
	org.mockitousage.matchers.CapturingArgumentsTest::captures_correctly_when_captor_used_on_pure_vararg_method$catena_0
	org.mockitousage.matchers.CapturingArgumentsTest::captures_correctly_when_captor_used_on_pure_vararg_method$catena_1
	org.mockitousage.matchers.CapturingArgumentsTest::should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper$catena_1
	org.mockitousage.matchers.CapturingArgumentsTest::should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper$catena_2
	org.mockitousage.matchers.CapturingArgumentsTest::should_capture_byte_vararg_by_creating_captor_with_primitive$catena_1
	org.mockitousage.matchers.CapturingArgumentsTest::should_capture_byte_vararg_by_creating_captor_with_primitive$catena_2
	org.mockitousage.matchers.CapturingArgumentsTest::should_capture_vararg$catena_1
processed: 000
pattern: 001
try to fix hunk: 2
insert before 143 with     private Set<Matcher> uniqueMatcherSet(int indexOfVararg) {
        HashSet<Matcher> set = new HashSet<Matcher>();
        for (int position = indexOfVararg; position < matchers.size(); position++) {
            Matcher matcher = matchers.get(position);
            if(matcher instanceof MatcherDecorator) {
                set.add(((MatcherDecorator) matcher).getActualMatcher());
            } else {
                set.add(matcher);
            }
        }
        return set;
    }

patches are written to file
running tests...
used time: Finished in 364.53 seconds
Failing tests: 14
	org.mockito.internal.invocation.InvocationMatcherTest::should_capture_varargs_as_vararg
	org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest::shouldVerifyCorrectlyNumberOfInvocationsWithVarargs$catena_0
	org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest::shouldMatchAnyVararg$catena_0
	org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest::shouldMatchAnyVararg$catena_1
	org.mockitousage.matchers.CapturingArgumentsTest::should_capture_all_vararg$catena_1
	org.mockitousage.matchers.CapturingArgumentsTest::captures_correctly_when_captor_used_multiple_times$catena_0
	org.mockitousage.matchers.CapturingArgumentsTest::captures_correctly_when_captor_used_multiple_times$catena_1
	org.mockitousage.matchers.CapturingArgumentsTest::captures_correctly_when_captor_used_on_pure_vararg_method$catena_0
	org.mockitousage.matchers.CapturingArgumentsTest::captures_correctly_when_captor_used_on_pure_vararg_method$catena_1
	org.mockitousage.matchers.CapturingArgumentsTest::should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper$catena_1
	org.mockitousage.matchers.CapturingArgumentsTest::should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper$catena_2
	org.mockitousage.matchers.CapturingArgumentsTest::should_capture_byte_vararg_by_creating_captor_with_primitive$catena_1
	org.mockitousage.matchers.CapturingArgumentsTest::should_capture_byte_vararg_by_creating_captor_with_primitive$catena_2
	org.mockitousage.matchers.CapturingArgumentsTest::should_capture_vararg$catena_1
No new failing tests but only 1 hunk
processed: 001
pattern: 010
try to fix hunk: 1
replace from 130 with range 1 to
                    Object rawArgument = invocation.getRawArguments()[indexOfVararg];
                    for (int i = 0; i < Array.getLength(rawArgument); i++) {
                        ((CapturesArguments) m).captureFrom(Array.get(rawArgument, i));
                    }

patches are written to file
running tests...
used time: Finished in 362.52 seconds
Failing tests: 2
	org.mockitousage.basicapi.UsingVarargsTest::shouldVerifyWithNullVarArgArray
	org.mockitousage.matchers.CapturingArgumentsTest::captures_correctly_when_captor_used_multiple_times$catena_1
Includes new failing tests, set to unusable
processed: 010
pattern: 100
try to fix hunk: 0
replace from 127 with range 2 to
            for (Matcher m : uniqueMatcherSet(indexOfVararg)) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100
pattern: 011
try to fix hunk: 1
replace from 130 with range 1 to
                    Object rawArgument = invocation.getRawArguments()[indexOfVararg];
                    for (int i = 0; i < Array.getLength(rawArgument); i++) {
                        ((CapturesArguments) m).captureFrom(Array.get(rawArgument, i));
                    }

try to fix hunk: 2
insert before 143 with     private Set<Matcher> uniqueMatcherSet(int indexOfVararg) {
        HashSet<Matcher> set = new HashSet<Matcher>();
        for (int position = indexOfVararg; position < matchers.size(); position++) {
            Matcher matcher = matchers.get(position);
            if(matcher instanceof MatcherDecorator) {
                set.add(((MatcherDecorator) matcher).getActualMatcher());
            } else {
                set.add(matcher);
            }
        }
        return set;
    }

patches are written to file
running tests...
used time: Finished in 372.12 seconds
Failing tests: 2
	org.mockitousage.basicapi.UsingVarargsTest::shouldVerifyWithNullVarArgArray
	org.mockitousage.matchers.CapturingArgumentsTest::captures_correctly_when_captor_used_multiple_times$catena_1
Includes new failing tests, set to unusable
processed: 011
pattern: 101
try to fix hunk: 0
replace from 127 with range 2 to
            for (Matcher m : uniqueMatcherSet(indexOfVararg)) {

try to fix hunk: 2
insert before 143 with     private Set<Matcher> uniqueMatcherSet(int indexOfVararg) {
        HashSet<Matcher> set = new HashSet<Matcher>();
        for (int position = indexOfVararg; position < matchers.size(); position++) {
            Matcher matcher = matchers.get(position);
            if(matcher instanceof MatcherDecorator) {
                set.add(((MatcherDecorator) matcher).getActualMatcher());
            } else {
                set.add(matcher);
            }
        }
        return set;
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101
pattern: 110
try to fix hunk: 0
replace from 127 with range 2 to
            for (Matcher m : uniqueMatcherSet(indexOfVararg)) {

try to fix hunk: 1
replace from 130 with range 1 to
                    Object rawArgument = invocation.getRawArguments()[indexOfVararg];
                    for (int i = 0; i < Array.getLength(rawArgument); i++) {
                        ((CapturesArguments) m).captureFrom(Array.get(rawArgument, i));
                    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110
pattern: 111
try to fix hunk: 0
replace from 127 with range 2 to
            for (Matcher m : uniqueMatcherSet(indexOfVararg)) {

try to fix hunk: 1
replace from 130 with range 1 to
                    Object rawArgument = invocation.getRawArguments()[indexOfVararg];
                    for (int i = 0; i < Array.getLength(rawArgument); i++) {
                        ((CapturesArguments) m).captureFrom(Array.get(rawArgument, i));
                    }

try to fix hunk: 2
insert before 143 with     private Set<Matcher> uniqueMatcherSet(int indexOfVararg) {
        HashSet<Matcher> set = new HashSet<Matcher>();
        for (int position = indexOfVararg; position < matchers.size(); position++) {
            Matcher matcher = matchers.get(position);
            if(matcher instanceof MatcherDecorator) {
                set.add(((MatcherDecorator) matcher).getActualMatcher());
            } else {
                set.add(matcher);
            }
        }
        return set;
    }

patches are written to file
running tests...
used time: Finished in 315.42 seconds
Failing tests: 0
Can independently fix ['org.mockitousage.matchers.CapturingArgumentsTest::captures_correctly_when_captor_used_on_pure_vararg_method$catena_1', 'org.mockitousage.matchers.CapturingArgumentsTest::should_capture_vararg$catena_1', 'org.mockitousage.matchers.CapturingArgumentsTest::captures_correctly_when_captor_used_multiple_times$catena_1', 'org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest::shouldVerifyCorrectlyNumberOfInvocationsWithVarargs$catena_0', 'org.mockitousage.matchers.CapturingArgumentsTest::should_capture_byte_vararg_by_creating_captor_with_primitive$catena_2', 'org.mockito.internal.invocation.InvocationMatcherTest::should_capture_varargs_as_vararg', 'org.mockitousage.matchers.CapturingArgumentsTest::should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper$catena_1', 'org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest::shouldMatchAnyVararg$catena_1', 'org.mockitousage.matchers.CapturingArgumentsTest::captures_correctly_when_captor_used_on_pure_vararg_method$catena_0', 'org.mockitousage.matchers.CapturingArgumentsTest::should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper$catena_2', 'org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest::shouldMatchAnyVararg$catena_0', 'org.mockitousage.matchers.CapturingArgumentsTest::captures_correctly_when_captor_used_multiple_times$catena_0', 'org.mockitousage.matchers.CapturingArgumentsTest::should_capture_all_vararg$catena_1', 'org.mockitousage.matchers.CapturingArgumentsTest::should_capture_byte_vararg_by_creating_captor_with_primitive$catena_1']
select new bug
Pattern: 111
new failing tests:
org.mockitousage.matchers.CapturingArgumentsTest::captures_correctly_when_captor_used_on_pure_vararg_method$catena_1
org.mockitousage.matchers.CapturingArgumentsTest::should_capture_vararg$catena_1
org.mockitousage.matchers.CapturingArgumentsTest::captures_correctly_when_captor_used_multiple_times$catena_1
org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest::shouldVerifyCorrectlyNumberOfInvocationsWithVarargs$catena_0
org.mockitousage.matchers.CapturingArgumentsTest::should_capture_byte_vararg_by_creating_captor_with_primitive$catena_2
org.mockito.internal.invocation.InvocationMatcherTest::should_capture_varargs_as_vararg
org.mockitousage.matchers.CapturingArgumentsTest::should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper$catena_1
org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest::shouldMatchAnyVararg$catena_1
org.mockitousage.matchers.CapturingArgumentsTest::captures_correctly_when_captor_used_on_pure_vararg_method$catena_0
org.mockitousage.matchers.CapturingArgumentsTest::should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper$catena_2
org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest::shouldMatchAnyVararg$catena_0
org.mockitousage.matchers.CapturingArgumentsTest::captures_correctly_when_captor_used_multiple_times$catena_0
org.mockitousage.matchers.CapturingArgumentsTest::should_capture_all_vararg$catena_1
org.mockitousage.matchers.CapturingArgumentsTest::should_capture_byte_vararg_by_creating_captor_with_primitive$catena_1
Save found bug
processed: 111
Find 1 new bugs
