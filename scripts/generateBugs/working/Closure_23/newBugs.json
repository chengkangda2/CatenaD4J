{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
            "from_line_no": 1451,
            "to_line_no": 1451,
            "replaced_with": "    for (int i = 0; current != null; i++) {\n      if (i != intIndex) {\n        if (mayHaveSideEffects(current)) {\n          return n;\n        }\n      } else {\n",
            "replaced": "    for (int i = 0; current != null && i < intIndex; i++) {\n",
            "patch_type": "replace",
            "next_line_no": 1452
        },
        "1": {
            "file_name": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
            "replaced_with": "      }\n",
            "patch_type": "insert",
            "next_line_no": 1453
        }
    },
    "method": {
        "failing_tests": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem"
        ],
        "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem": {
            "file_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
            "Instance": "Begin: Pos(764, 10)\nEnd: Pos(778, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_23/test//com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\nName: testFoldGetElem\nChilds: [StatementAssertion<Begin: Pos(765, 5), End: Pos(765, 39)>,\nStatementAssertion<Begin: Pos(766, 5), End: Pos(766, 38)>,\nStatementAssertion<Begin: Pos(767, 5), End: Pos(767, 38)>,\nStatementAssertion<Begin: Pos(768, 5), End: Pos(769, 59)>,\nStatementAssertion<Begin: Pos(770, 5), End: Pos(771, 57)>,\nStatementAssertion<Begin: Pos(772, 5), End: Pos(773, 57)>,\nStatementAssertion<Begin: Pos(775, 5), End: Pos(775, 34)>,\nStatementAssertion<Begin: Pos(776, 5), End: Pos(776, 43)>,\nStatementAssertion<Begin: Pos(777, 5), End: Pos(777, 34)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_23/test//com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
            "name": "testFoldGetElem",
            "begin": "Pos(764, 10)",
            "end": "Pos(778, 3)",
            "begin_line_no": 764,
            "end_line_no": 778,
            "child": [
                "Begin: Pos(765, 5)\nEnd: Pos(765, 39)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(766, 5)\nEnd: Pos(766, 38)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(767, 5)\nEnd: Pos(767, 38)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(768, 5)\nEnd: Pos(769, 59)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(770, 5)\nEnd: Pos(771, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(772, 5)\nEnd: Pos(773, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(775, 5)\nEnd: Pos(775, 34)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(776, 5)\nEnd: Pos(776, 43)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(777, 5)\nEnd: Pos(777, 34)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testFoldGetElem$catena_0() {\n    fold(\"x = [,10][0]\", \"x = void 0\");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = [10, 20][0]\", \"x = 10\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][1]\", \"x = 20\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0.5]\", \"\",\n        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][-1]\",    \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][2]\",     \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ foldSame(\"x = [foo(), 0][1]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [0, foo()][1]\", \"x = foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = [0, foo()][0]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldGetElem$catena_1() {\n    try{ fold(\"x = [,10][0]\", \"x = void 0\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = [10, 20][0]\", \"x = 10\");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = [10, 20][1]\", \"x = 20\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0.5]\", \"\",\n        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][-1]\",    \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][2]\",     \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ foldSame(\"x = [foo(), 0][1]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [0, foo()][1]\", \"x = foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = [0, foo()][0]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldGetElem$catena_2() {\n    try{ fold(\"x = [,10][0]\", \"x = void 0\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0]\", \"x = 10\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = [10, 20][1]\", \"x = 20\");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = [10, 20][0.5]\", \"\",\n        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][-1]\",    \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][2]\",     \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ foldSame(\"x = [foo(), 0][1]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [0, foo()][1]\", \"x = foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = [0, foo()][0]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldGetElem$catena_3() {\n    try{ fold(\"x = [,10][0]\", \"x = void 0\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0]\", \"x = 10\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][1]\", \"x = 20\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = [10, 20][0.5]\", \"\",\n        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = [10, 20][-1]\",    \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][2]\",     \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ foldSame(\"x = [foo(), 0][1]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [0, foo()][1]\", \"x = foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = [0, foo()][0]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldGetElem$catena_4() {\n    try{ fold(\"x = [,10][0]\", \"x = void 0\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0]\", \"x = 10\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][1]\", \"x = 20\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0.5]\", \"\",\n        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = [10, 20][-1]\",    \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = [10, 20][2]\",     \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ foldSame(\"x = [foo(), 0][1]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [0, foo()][1]\", \"x = foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = [0, foo()][0]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldGetElem$catena_5() {\n    try{ fold(\"x = [,10][0]\", \"x = void 0\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0]\", \"x = 10\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][1]\", \"x = 20\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0.5]\", \"\",\n        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][-1]\",    \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = [10, 20][2]\",     \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ foldSame(\"x = [foo(), 0][1]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [0, foo()][1]\", \"x = foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = [0, foo()][0]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldGetElem$catena_6() {\n    try{ fold(\"x = [,10][0]\", \"x = void 0\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0]\", \"x = 10\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][1]\", \"x = 20\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0.5]\", \"\",\n        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][-1]\",    \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][2]\",     \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    foldSame(\"x = [foo(), 0][1]\");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = [0, foo()][1]\", \"x = foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = [0, foo()][0]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldGetElem$catena_7() {\n    try{ fold(\"x = [,10][0]\", \"x = void 0\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0]\", \"x = 10\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][1]\", \"x = 20\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0.5]\", \"\",\n        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][-1]\",    \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][2]\",     \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ foldSame(\"x = [foo(), 0][1]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = [0, foo()][1]\", \"x = foo()\");                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ foldSame(\"x = [0, foo()][0]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testFoldGetElem$catena_8() {\n    try{ fold(\"x = [,10][0]\", \"x = void 0\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0]\", \"x = 10\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][1]\", \"x = 20\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0.5]\", \"\",\n        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][-1]\",    \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][2]\",     \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ foldSame(\"x = [foo(), 0][1]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [0, foo()][1]\", \"x = foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    foldSame(\"x = [0, foo()][0]\");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testFoldGetElem$catena_0() {\n    fold(\"x = [,10][0]\", \"x = void 0\");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = [10, 20][0]\", \"x = 10\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][1]\", \"x = 20\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0.5]\", \"\",\n        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][-1]\",    \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][2]\",     \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ foldSame(\"x = [foo(), 0][1]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [0, foo()][1]\", \"x = foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = [0, foo()][0]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testFoldGetElem$catena_1() {\n    try{ fold(\"x = [,10][0]\", \"x = void 0\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = [10, 20][0]\", \"x = 10\");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = [10, 20][1]\", \"x = 20\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0.5]\", \"\",\n        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][-1]\",    \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][2]\",     \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ foldSame(\"x = [foo(), 0][1]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [0, foo()][1]\", \"x = foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = [0, foo()][0]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testFoldGetElem$catena_2() {\n    try{ fold(\"x = [,10][0]\", \"x = void 0\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0]\", \"x = 10\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = [10, 20][1]\", \"x = 20\");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = [10, 20][0.5]\", \"\",\n        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][-1]\",    \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][2]\",     \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ foldSame(\"x = [foo(), 0][1]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [0, foo()][1]\", \"x = foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = [0, foo()][0]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "3": "  public void testFoldGetElem$catena_3() {\n    try{ fold(\"x = [,10][0]\", \"x = void 0\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0]\", \"x = 10\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][1]\", \"x = 20\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = [10, 20][0.5]\", \"\",\n        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = [10, 20][-1]\",    \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][2]\",     \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ foldSame(\"x = [foo(), 0][1]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [0, foo()][1]\", \"x = foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = [0, foo()][0]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "4": "  public void testFoldGetElem$catena_4() {\n    try{ fold(\"x = [,10][0]\", \"x = void 0\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0]\", \"x = 10\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][1]\", \"x = 20\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0.5]\", \"\",\n        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = [10, 20][-1]\",    \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = [10, 20][2]\",     \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ foldSame(\"x = [foo(), 0][1]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [0, foo()][1]\", \"x = foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = [0, foo()][0]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "5": "  public void testFoldGetElem$catena_5() {\n    try{ fold(\"x = [,10][0]\", \"x = void 0\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0]\", \"x = 10\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][1]\", \"x = 20\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0.5]\", \"\",\n        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][-1]\",    \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = [10, 20][2]\",     \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ foldSame(\"x = [foo(), 0][1]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [0, foo()][1]\", \"x = foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = [0, foo()][0]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "6": "  public void testFoldGetElem$catena_6() {\n    try{ fold(\"x = [,10][0]\", \"x = void 0\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0]\", \"x = 10\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][1]\", \"x = 20\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0.5]\", \"\",\n        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][-1]\",    \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][2]\",     \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    foldSame(\"x = [foo(), 0][1]\");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = [0, foo()][1]\", \"x = foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = [0, foo()][0]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "7": "  public void testFoldGetElem$catena_7() {\n    try{ fold(\"x = [,10][0]\", \"x = void 0\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0]\", \"x = 10\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][1]\", \"x = 20\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0.5]\", \"\",\n        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][-1]\",    \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][2]\",     \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ foldSame(\"x = [foo(), 0][1]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = [0, foo()][1]\", \"x = foo()\");                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ foldSame(\"x = [0, foo()][0]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "8": "  public void testFoldGetElem$catena_8() {\n    try{ fold(\"x = [,10][0]\", \"x = void 0\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0]\", \"x = 10\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][1]\", \"x = 20\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0.5]\", \"\",\n        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][-1]\",    \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][2]\",     \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ foldSame(\"x = [foo(), 0][1]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [0, foo()][1]\", \"x = foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    foldSame(\"x = [0, foo()][0]\");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        }
    },
    "11": {
        "failing_tests": [
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem$catena_5",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem$catena_0",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem$catena_7",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem$catena_6",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem$catena_8",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem$catena_1",
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem$catena_2"
        ]
    }
}