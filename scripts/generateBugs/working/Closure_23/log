---
Begin generate bug_id: Closure_23
num_of_hunks: 2
use working dir: ./working/data/Closure_23
Try to checkout Closure_23
build dir: ['./working/data/Closure_23/build/classes', './working/data/Closure_23/build/test']
init FileManager
trace file: src/com/google/javascript/jscomp/PeepholeFoldConstants.java
trace file: src/com/google/javascript/jscomp/PeepholeFoldConstants.java
trying to replace old failing tests
edit: replace from 764 range 15 at test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
to
  public void testFoldGetElem$catena_0() {
    fold("x = [,10][0]", "x = void 0");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = [10, 20][0]", "x = 10");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][1]", "x = 20");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][0.5]", "",
        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][-1]",    "",
        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][2]",     "",
        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ foldSame("x = [foo(), 0][1]");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [0, foo()][1]", "x = foo()");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ foldSame("x = [0, foo()][0]");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldGetElem$catena_1() {
    try{ fold("x = [,10][0]", "x = void 0");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = [10, 20][0]", "x = 10");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = [10, 20][1]", "x = 20");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][0.5]", "",
        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][-1]",    "",
        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][2]",     "",
        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ foldSame("x = [foo(), 0][1]");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [0, foo()][1]", "x = foo()");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ foldSame("x = [0, foo()][0]");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldGetElem$catena_2() {
    try{ fold("x = [,10][0]", "x = void 0");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][0]", "x = 10");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = [10, 20][1]", "x = 20");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = [10, 20][0.5]", "",
        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][-1]",    "",
        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][2]",     "",
        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ foldSame("x = [foo(), 0][1]");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [0, foo()][1]", "x = foo()");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ foldSame("x = [0, foo()][0]");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldGetElem$catena_3() {
    try{ fold("x = [,10][0]", "x = void 0");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][0]", "x = 10");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][1]", "x = 20");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = [10, 20][0.5]", "",
        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = [10, 20][-1]",    "",
        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][2]",     "",
        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ foldSame("x = [foo(), 0][1]");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [0, foo()][1]", "x = foo()");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ foldSame("x = [0, foo()][0]");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldGetElem$catena_4() {
    try{ fold("x = [,10][0]", "x = void 0");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][0]", "x = 10");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][1]", "x = 20");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][0.5]", "",
        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = [10, 20][-1]",    "",
        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = [10, 20][2]",     "",
        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ foldSame("x = [foo(), 0][1]");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [0, foo()][1]", "x = foo()");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ foldSame("x = [0, foo()][0]");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldGetElem$catena_5() {
    try{ fold("x = [,10][0]", "x = void 0");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][0]", "x = 10");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][1]", "x = 20");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][0.5]", "",
        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][-1]",    "",
        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = [10, 20][2]",     "",
        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   /***** ORIGINAL ASSERTION IS HERE *****/

    try{ foldSame("x = [foo(), 0][1]");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [0, foo()][1]", "x = foo()");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ foldSame("x = [0, foo()][0]");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldGetElem$catena_6() {
    try{ fold("x = [,10][0]", "x = void 0");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][0]", "x = 10");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][1]", "x = 20");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][0.5]", "",
        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][-1]",    "",
        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][2]",     "",
        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    foldSame("x = [foo(), 0][1]");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = [0, foo()][1]", "x = foo()");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ foldSame("x = [0, foo()][0]");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldGetElem$catena_7() {
    try{ fold("x = [,10][0]", "x = void 0");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][0]", "x = 10");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][1]", "x = 20");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][0.5]", "",
        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][-1]",    "",
        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][2]",     "",
        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ foldSame("x = [foo(), 0][1]");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = [0, foo()][1]", "x = foo()");                                                                 /***** ORIGINAL ASSERTION IS HERE *****/
    try{ foldSame("x = [0, foo()][0]");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldGetElem$catena_8() {
    try{ fold("x = [,10][0]", "x = void 0");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][0]", "x = 10");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][1]", "x = 20");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][0.5]", "",
        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][-1]",    "",
        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [10, 20][2]",     "",
        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ foldSame("x = [foo(), 0][1]");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [0, foo()][1]", "x = foo()");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    foldSame("x = [0, foo()][0]");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/
  }
trace file: test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
new test num: 9
ori test num: 0
pattern: 00
patches are written to file
running tests...
used time: Finished in 275.70 seconds
Failing tests: 7
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem$catena_0
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem$catena_1
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem$catena_2
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem$catena_5
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem$catena_6
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem$catena_7
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem$catena_8
pattern: 01
try to fix hunk: 1
insert before 1453 with       }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 10
try to fix hunk: 0
replace from 1451 with range 1 to
    for (int i = 0; current != null; i++) {
      if (i != intIndex) {
        if (mayHaveSideEffects(current)) {
          return n;
        }
      } else {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 11
try to fix hunk: 0
replace from 1451 with range 1 to
    for (int i = 0; current != null; i++) {
      if (i != intIndex) {
        if (mayHaveSideEffects(current)) {
          return n;
        }
      } else {

try to fix hunk: 1
insert before 1453 with       }

patches are written to file
running tests...
used time: Finished in 251.98 seconds
Failing tests: 0
Can independently fix ['com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem$catena_5', 'com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem$catena_0', 'com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem$catena_7', 'com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem$catena_6', 'com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem$catena_8', 'com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem$catena_1', 'com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem$catena_2']
select new bug
Pattern: 11
failing tests: com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem$catena_5@com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem$catena_0@com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem$catena_7@com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem$catena_6@com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem$catena_8@com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem$catena_1@com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem$catena_2
Find 1 new bugs
