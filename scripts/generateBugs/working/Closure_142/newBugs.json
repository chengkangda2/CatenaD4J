{
    "original": {
        "num_of_hunks": 3,
        "0": {
            "file_name": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
            "replaced_with": "    if (scope.getRootNode().getFirstChild().getNext().getChildCount() == 2) {\n      liveness.markAllParametersEscaped();\n    }\n",
            "patch_type": "insert",
            "next_line_no": 108
        },
        "1": {
            "file_name": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
            "replaced_with": "          if (!(option == WhitespaceOption.PRESERVE &&\n                token == JsDocToken.ANNOTATION)) {\n",
            "patch_type": "insert",
            "next_line_no": 1168
        },
        "2": {
            "file_name": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
            "replaced_with": "          }\n",
            "patch_type": "insert",
            "next_line_no": 1183
        }
    },
    "method": {
        "failing_tests": [
            "com.google.javascript.jscomp.CoalesceVariableNamesTest::testParameter4",
            "com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicenseWithAnnotation"
        ],
        "com.google.javascript.jscomp.CoalesceVariableNamesTest::testParameter4": {
            "file_path": "test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java",
            "Instance": "Begin: Pos(188, 10)\nEnd: Pos(193, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_142/test//com/google/javascript/jscomp/CoalesceVariableNamesTest.java\nName: testParameter4\nChilds: [StatementAssertion<Begin: Pos(191, 5), End: Pos(192, 62)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_142/test//com/google/javascript/jscomp/CoalesceVariableNamesTest.java",
            "name": "testParameter4",
            "begin": "Pos(188, 10)",
            "end": "Pos(193, 3)",
            "begin_line_no": 188,
            "end_line_no": 193,
            "child": [
                "Begin: Pos(191, 5)\nEnd: Pos(192, 62)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicenseWithAnnotation": {
            "file_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
            "Instance": "Begin: Pos(1073, 10)\nEnd: Pos(1080, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_142/test//com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\nName: testParseLicenseWithAnnotation\nChilds: [StatementAssertion<Begin: Pos(1077, 5), End: Pos(1077, 19)>,\nStatementAssertion<Begin: Pos(1078, 5), End: Pos(1079, 42)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_142/test//com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
            "name": "testParseLicenseWithAnnotation",
            "begin": "Pos(1073, 10)",
            "end": "Pos(1080, 3)",
            "begin_line_no": 1073,
            "end_line_no": 1080,
            "child": [
                "Begin: Pos(1077, 5)\nEnd: Pos(1077, 19)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1078, 5)\nEnd: Pos(1079, 42)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testParseLicenseWithAnnotation$catena_0() throws Exception {\n    Node node = new Node(1);\n    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();\n    String comment = \"@license Foo \\n * @author Charlie Brown */\";\n    parse(comment);                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\" Foo \\n @author Charlie Brown \",\n        node.getJSDocInfo().getLicense());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testParseLicenseWithAnnotation$catena_1() throws Exception {\n    Node node = new Node(1);\n    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();\n    String comment = \"@license Foo \\n * @author Charlie Brown */\";\n    try{ parse(comment);                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\" Foo \\n @author Charlie Brown \",\n        node.getJSDocInfo().getLicense());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testParseLicenseWithAnnotation$catena_0() throws Exception {\n    Node node = new Node(1);\n    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();\n    String comment = \"@license Foo \\n * @author Charlie Brown */\";\n    parse(comment);                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\" Foo \\n @author Charlie Brown \",\n        node.getJSDocInfo().getLicense());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testParseLicenseWithAnnotation$catena_1() throws Exception {\n    Node node = new Node(1);\n    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();\n    String comment = \"@license Foo \\n * @author Charlie Brown */\";\n    try{ parse(comment);                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\" Foo \\n @author Charlie Brown \",\n        node.getJSDocInfo().getLicense());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        }
    },
    "011": {
        "failing_tests": [
            "com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicenseWithAnnotation$catena_1"
        ]
    }
}