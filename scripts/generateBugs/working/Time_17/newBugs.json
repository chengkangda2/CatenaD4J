{
    "original": {
        "num_of_hunks": 5,
        "0": {
            "file_name": "src/main/java/org/joda/time/DateTimeZone.java",
            "from_line_no": 1167,
            "to_line_no": 1169,
            "replaced_with": "        long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;\n        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;\n        long offsetBefore = getOffset(instantBefore);\n        long offsetAfter = getOffset(instantAfter);\n        if (offsetBefore <= offsetAfter) {\n",
            "replaced": "        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        if (instantBefore == instantAfter) {\n",
            "patch_type": "replace",
            "next_line_no": 1170
        },
        "1": {
            "file_name": "src/main/java/org/joda/time/DateTimeZone.java",
            "from_line_no": 1174,
            "to_line_no": 1175,
            "replaced_with": "        long diff = offsetBefore - offsetAfter;\n        long transition = nextTransition(instantBefore);\n        long overlapStart = transition - diff;\n        long overlapEnd = transition + diff;\n        if (instant < overlapStart || instant >= overlapEnd) {\n          return instant;  // not an overlap\n        }\n",
            "replaced": "        long local = convertUTCToLocal(instant);\n        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n",
            "patch_type": "replace",
            "next_line_no": 1176
        },
        "2": {
            "file_name": "src/main/java/org/joda/time/DateTimeZone.java",
            "replaced_with": "        long afterStart = instant - overlapStart;\n        if (afterStart >= diff) {\n",
            "patch_type": "insert",
            "next_line_no": 1178
        },
        "3": {
            "file_name": "src/main/java/org/joda/time/DateTimeZone.java",
            "replaced_with": "          return earlierOrLater ? instant : instant - diff;\n        } else {\n",
            "patch_type": "insert",
            "next_line_no": 1179
        },
        "4": {
            "file_name": "src/main/java/org/joda/time/DateTimeZone.java",
            "replaced_with": "          return earlierOrLater ? instant + diff : instant;\n        }\n",
            "patch_type": "insert",
            "next_line_no": 1180
        }
    },
    "method": {
        "failing_tests": [
            "org.joda.time.TestDateTimeZoneCutover::testBug3476684_adjustOffset"
        ],
        "org.joda.time.TestDateTimeZoneCutover::testBug3476684_adjustOffset": {
            "file_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
            "Instance": "Begin: Pos(1249, 12)\nEnd: Pos(1263, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Time_17/src/test/java//org/joda/time/TestDateTimeZoneCutover.java\nName: testBug3476684_adjustOffset\nChilds: [StatementAssertion<Begin: Pos(1255, 9), End: Pos(1255, 60)>,\nStatementAssertion<Begin: Pos(1256, 9), End: Pos(1256, 58)>,\nStatementAssertion<Begin: Pos(1258, 9), End: Pos(1258, 72)>,\nStatementAssertion<Begin: Pos(1259, 9), End: Pos(1259, 71)>,\nStatementAssertion<Begin: Pos(1261, 9), End: Pos(1261, 68)>,\nStatementAssertion<Begin: Pos(1262, 9), End: Pos(1262, 73)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Time_17/src/test/java//org/joda/time/TestDateTimeZoneCutover.java",
            "name": "testBug3476684_adjustOffset",
            "begin": "Pos(1249, 12)",
            "end": "Pos(1263, 5)",
            "begin_line_no": 1249,
            "end_line_no": 1263,
            "child": [
                "Begin: Pos(1255, 9)\nEnd: Pos(1255, 60)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1256, 9)\nEnd: Pos(1256, 58)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1258, 9)\nEnd: Pos(1258, 72)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1259, 9)\nEnd: Pos(1259, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1261, 9)\nEnd: Pos(1261, 68)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1262, 9)\nEnd: Pos(1262, 73)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testBug3476684_adjustOffset$catena_0() {\n        final DateTimeZone zone = DateTimeZone.forID(\"America/Sao_Paulo\");\n        DateTime base = new DateTime(2012, 2, 25, 22, 15, zone);\n        DateTime baseBefore = base.plusHours(1);  // 23:15 (first)\n        DateTime baseAfter = base.plusHours(2);  // 23:15 (second)\n        \n        assertSame(base, base.withEarlierOffsetAtOverlap());                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertSame(base, base.withLaterOffsetAtOverlap());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug3476684_adjustOffset$catena_1() {\n        final DateTimeZone zone = DateTimeZone.forID(\"America/Sao_Paulo\");\n        DateTime base = new DateTime(2012, 2, 25, 22, 15, zone);\n        DateTime baseBefore = base.plusHours(1);  // 23:15 (first)\n        DateTime baseAfter = base.plusHours(2);  // 23:15 (second)\n        \n        try{ assertSame(base, base.withEarlierOffsetAtOverlap());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertSame(base, base.withLaterOffsetAtOverlap());                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        try{ assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug3476684_adjustOffset$catena_2() {\n        final DateTimeZone zone = DateTimeZone.forID(\"America/Sao_Paulo\");\n        DateTime base = new DateTime(2012, 2, 25, 22, 15, zone);\n        DateTime baseBefore = base.plusHours(1);  // 23:15 (first)\n        DateTime baseAfter = base.plusHours(2);  // 23:15 (second)\n        \n        try{ assertSame(base, base.withEarlierOffsetAtOverlap());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(base, base.withLaterOffsetAtOverlap());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap());                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug3476684_adjustOffset$catena_3() {\n        final DateTimeZone zone = DateTimeZone.forID(\"America/Sao_Paulo\");\n        DateTime base = new DateTime(2012, 2, 25, 22, 15, zone);\n        DateTime baseBefore = base.plusHours(1);  // 23:15 (first)\n        DateTime baseAfter = base.plusHours(2);  // 23:15 (second)\n        \n        try{ assertSame(base, base.withEarlierOffsetAtOverlap());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(base, base.withLaterOffsetAtOverlap());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        try{ assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug3476684_adjustOffset$catena_4() {\n        final DateTimeZone zone = DateTimeZone.forID(\"America/Sao_Paulo\");\n        DateTime base = new DateTime(2012, 2, 25, 22, 15, zone);\n        DateTime baseBefore = base.plusHours(1);  // 23:15 (first)\n        DateTime baseAfter = base.plusHours(2);  // 23:15 (second)\n        \n        try{ assertSame(base, base.withEarlierOffsetAtOverlap());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(base, base.withLaterOffsetAtOverlap());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap());                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug3476684_adjustOffset$catena_5() {\n        final DateTimeZone zone = DateTimeZone.forID(\"America/Sao_Paulo\");\n        DateTime base = new DateTime(2012, 2, 25, 22, 15, zone);\n        DateTime baseBefore = base.plusHours(1);  // 23:15 (first)\n        DateTime baseAfter = base.plusHours(2);  // 23:15 (second)\n        \n        try{ assertSame(base, base.withEarlierOffsetAtOverlap());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(base, base.withLaterOffsetAtOverlap());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testBug3476684_adjustOffset$catena_0() {\n        final DateTimeZone zone = DateTimeZone.forID(\"America/Sao_Paulo\");\n        DateTime base = new DateTime(2012, 2, 25, 22, 15, zone);\n        DateTime baseBefore = base.plusHours(1);  // 23:15 (first)\n        DateTime baseAfter = base.plusHours(2);  // 23:15 (second)\n        \n        assertSame(base, base.withEarlierOffsetAtOverlap());                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertSame(base, base.withLaterOffsetAtOverlap());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testBug3476684_adjustOffset$catena_1() {\n        final DateTimeZone zone = DateTimeZone.forID(\"America/Sao_Paulo\");\n        DateTime base = new DateTime(2012, 2, 25, 22, 15, zone);\n        DateTime baseBefore = base.plusHours(1);  // 23:15 (first)\n        DateTime baseAfter = base.plusHours(2);  // 23:15 (second)\n        \n        try{ assertSame(base, base.withEarlierOffsetAtOverlap());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertSame(base, base.withLaterOffsetAtOverlap());                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        try{ assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testBug3476684_adjustOffset$catena_2() {\n        final DateTimeZone zone = DateTimeZone.forID(\"America/Sao_Paulo\");\n        DateTime base = new DateTime(2012, 2, 25, 22, 15, zone);\n        DateTime baseBefore = base.plusHours(1);  // 23:15 (first)\n        DateTime baseAfter = base.plusHours(2);  // 23:15 (second)\n        \n        try{ assertSame(base, base.withEarlierOffsetAtOverlap());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(base, base.withLaterOffsetAtOverlap());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap());                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void testBug3476684_adjustOffset$catena_3() {\n        final DateTimeZone zone = DateTimeZone.forID(\"America/Sao_Paulo\");\n        DateTime base = new DateTime(2012, 2, 25, 22, 15, zone);\n        DateTime baseBefore = base.plusHours(1);  // 23:15 (first)\n        DateTime baseAfter = base.plusHours(2);  // 23:15 (second)\n        \n        try{ assertSame(base, base.withEarlierOffsetAtOverlap());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(base, base.withLaterOffsetAtOverlap());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        try{ assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    public void testBug3476684_adjustOffset$catena_4() {\n        final DateTimeZone zone = DateTimeZone.forID(\"America/Sao_Paulo\");\n        DateTime base = new DateTime(2012, 2, 25, 22, 15, zone);\n        DateTime baseBefore = base.plusHours(1);  // 23:15 (first)\n        DateTime baseAfter = base.plusHours(2);  // 23:15 (second)\n        \n        try{ assertSame(base, base.withEarlierOffsetAtOverlap());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(base, base.withLaterOffsetAtOverlap());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap());                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    public void testBug3476684_adjustOffset$catena_5() {\n        final DateTimeZone zone = DateTimeZone.forID(\"America/Sao_Paulo\");\n        DateTime base = new DateTime(2012, 2, 25, 22, 15, zone);\n        DateTime baseBefore = base.plusHours(1);  // 23:15 (first)\n        DateTime baseAfter = base.plusHours(2);  // 23:15 (second)\n        \n        try{ assertSame(base, base.withEarlierOffsetAtOverlap());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(base, base.withLaterOffsetAtOverlap());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    }
}