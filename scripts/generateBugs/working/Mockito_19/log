---
Begin generate bug_id: Mockito_19
num_of_hunks: 11
timeout for running: 3600
use working dir: ./working/data/Mockito_19
Try to checkout Mockito_19
build dir: ['./working/data/Mockito_19/build/classes/main', './working/data/Mockito_19/build/classes/test']
init FileManager
trace file: src/org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java
trace file: src/org/mockito/internal/configuration/injection/filter/FinalMockCandidateFilter.java
trace file: src/org/mockito/internal/configuration/injection/filter/MockCandidateFilter.java
trace file: src/org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java
trace file: src/org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java
trying to replace old failing tests
edit: replace from 112 range 6 at test/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java
to
    @Test
	public void shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable$catena_0() {
		MockitoAnnotations.initMocks(this);
		assertNull(otherSuperUnderTesting.candidate1);                                                            /***** ORIGINAL ASSERTION IS HERE *****/
		try{ assertNotNull(otherSuperUnderTesting.candidate2);                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
	}     @Test
	public void shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable$catena_1() {
		MockitoAnnotations.initMocks(this);
		try{ assertNull(otherSuperUnderTesting.candidate1);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
		assertNotNull(otherSuperUnderTesting.candidate2);                                                         /***** ORIGINAL ASSERTION IS HERE *****/
	}
trace file: test/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java
new test num: 2
ori test num: 0
pattern: 00000000000
patches are written to file
running tests...
used time: Finished in 382.07 seconds
Failing tests: 2
	org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest::shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable$catena_0
	org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest::shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable$catena_1
processed: 00000000000
pattern: 00000000001
try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000000001
pattern: 00000000010
try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000000010
pattern: 00000000100
try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000000100
pattern: 00000001000
try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000001000
pattern: 00000010000
try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000010000
pattern: 00000100000
try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000100000
pattern: 00001000000
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001000000
pattern: 00010000000
try to fix hunk: 3
insert before 9 with import java.util.List;

patches are written to file
running tests...
used time: Finished in 247.13 seconds
Failing tests: 2
	org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest::shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable$catena_0
	org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest::shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable$catena_1
No new failing tests but only 1 hunk
processed: 00010000000
pattern: 00100000000
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100000000
pattern: 01000000000
try to fix hunk: 1
insert before 13 with import java.util.List;

patches are written to file
running tests...
used time: Finished in 190.82 seconds
Failing tests: 2
	org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest::shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable$catena_0
	org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest::shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable$catena_1
No new failing tests but only 1 hunk
processed: 01000000000
pattern: 10000000000
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000000000
pattern: 00000000011
try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000000011
pattern: 00000000101
try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000000101
pattern: 00000000110
try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000000110
pattern: 00000001001
try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000001001
pattern: 00000001010
try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000001010
pattern: 00000001100
try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000001100
pattern: 00000010001
try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000010001
pattern: 00000010010
try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000010010
pattern: 00000010100
try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000010100
pattern: 00000011000
try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000011000
pattern: 00000100001
try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000100001
pattern: 00000100010
try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000100010
pattern: 00000100100
try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000100100
pattern: 00000101000
try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000101000
pattern: 00000110000
try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000110000
pattern: 00001000001
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001000001
pattern: 00001000010
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001000010
pattern: 00001000100
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001000100
pattern: 00001001000
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001001000
pattern: 00001010000
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001010000
pattern: 00001100000
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001100000
pattern: 00010000001
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010000001
pattern: 00010000010
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010000010
pattern: 00010000100
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010000100
pattern: 00010001000
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010001000
pattern: 00010010000
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010010000
pattern: 00010100000
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010100000
pattern: 00011000000
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011000000
pattern: 00100000001
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100000001
pattern: 00100000010
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100000010
pattern: 00100000100
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100000100
pattern: 00100001000
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100001000
pattern: 00100010000
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100010000
pattern: 00100100000
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100100000
pattern: 00101000000
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101000000
pattern: 00110000000
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110000000
pattern: 01000000001
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000000001
pattern: 01000000010
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000000010
pattern: 01000000100
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000000100
pattern: 01000001000
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000001000
pattern: 01000010000
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000010000
pattern: 01000100000
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000100000
pattern: 01001000000
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01001000000
pattern: 01010000000
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 3
insert before 9 with import java.util.List;

patches are written to file
running tests...
used time: Finished in 141.17 seconds
Failing tests: 2
	org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest::shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable$catena_0
	org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest::shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable$catena_1
Can independently fix []
Could not fix independently
processed: 01010000000
pattern: 01100000000
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01100000000
pattern: 10000000001
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000000001
pattern: 10000000010
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000000010
pattern: 10000000100
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000000100
pattern: 10000001000
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000001000
pattern: 10000010000
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000010000
pattern: 10000100000
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000100000
pattern: 10001000000
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10001000000
pattern: 10010000000
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 3
insert before 9 with import java.util.List;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10010000000
pattern: 10100000000
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10100000000
pattern: 11000000000
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 1
insert before 13 with import java.util.List;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11000000000
pattern: 00000000111
try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000000111
pattern: 00000001011
try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000001011
pattern: 00000001101
try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000001101
pattern: 00000001110
try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000001110
pattern: 00000010011
try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000010011
pattern: 00000010101
try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000010101
pattern: 00000010110
try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000010110
pattern: 00000011001
try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000011001
pattern: 00000011010
try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000011010
pattern: 00000011100
try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000011100
pattern: 00000100011
try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000100011
pattern: 00000100101
try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000100101
pattern: 00000100110
try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000100110
pattern: 00000101001
try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000101001
pattern: 00000101010
try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000101010
pattern: 00000101100
try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000101100
pattern: 00000110001
try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000110001
pattern: 00000110010
try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000110010
pattern: 00000110100
try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000110100
pattern: 00000111000
try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000111000
pattern: 00001000011
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001000011
pattern: 00001000101
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001000101
pattern: 00001000110
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001000110
pattern: 00001001001
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001001001
pattern: 00001001010
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001001010
pattern: 00001001100
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001001100
pattern: 00001010001
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001010001
pattern: 00001010010
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001010010
pattern: 00001010100
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001010100
pattern: 00001011000
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001011000
pattern: 00001100001
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001100001
pattern: 00001100010
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001100010
pattern: 00001100100
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001100100
pattern: 00001101000
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001101000
pattern: 00001110000
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001110000
pattern: 00010000011
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010000011
pattern: 00010000101
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010000101
pattern: 00010000110
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010000110
pattern: 00010001001
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010001001
pattern: 00010001010
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010001010
pattern: 00010001100
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010001100
pattern: 00010010001
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010010001
pattern: 00010010010
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010010010
pattern: 00010010100
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010010100
pattern: 00010011000
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010011000
pattern: 00010100001
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010100001
pattern: 00010100010
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010100010
pattern: 00010100100
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010100100
pattern: 00010101000
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010101000
pattern: 00010110000
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010110000
pattern: 00011000001
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011000001
pattern: 00011000010
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011000010
pattern: 00011000100
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011000100
pattern: 00011001000
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011001000
pattern: 00011010000
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011010000
pattern: 00011100000
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011100000
pattern: 00100000011
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100000011
pattern: 00100000101
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100000101
pattern: 00100000110
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100000110
pattern: 00100001001
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100001001
pattern: 00100001010
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100001010
pattern: 00100001100
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100001100
pattern: 00100010001
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100010001
pattern: 00100010010
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100010010
pattern: 00100010100
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100010100
pattern: 00100011000
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100011000
pattern: 00100100001
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100100001
pattern: 00100100010
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100100010
pattern: 00100100100
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100100100
pattern: 00100101000
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100101000
pattern: 00100110000
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100110000
pattern: 00101000001
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101000001
pattern: 00101000010
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101000010
pattern: 00101000100
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101000100
pattern: 00101001000
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101001000
pattern: 00101010000
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101010000
pattern: 00101100000
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101100000
pattern: 00110000001
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110000001
pattern: 00110000010
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110000010
pattern: 00110000100
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110000100
pattern: 00110001000
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110001000
pattern: 00110010000
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110010000
pattern: 00110100000
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110100000
pattern: 00111000000
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00111000000
pattern: 01000000011
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000000011
pattern: 01000000101
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000000101
pattern: 01000000110
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000000110
pattern: 01000001001
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000001001
pattern: 01000001010
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000001010
pattern: 01000001100
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000001100
pattern: 01000010001
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000010001
pattern: 01000010010
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000010010
pattern: 01000010100
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000010100
pattern: 01000011000
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000011000
pattern: 01000100001
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000100001
pattern: 01000100010
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000100010
pattern: 01000100100
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000100100
pattern: 01000101000
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000101000
pattern: 01000110000
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000110000
pattern: 01001000001
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01001000001
pattern: 01001000010
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01001000010
pattern: 01001000100
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01001000100
pattern: 01001001000
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01001001000
pattern: 01001010000
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01001010000
pattern: 01001100000
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01001100000
pattern: 01010000001
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01010000001
pattern: 01010000010
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01010000010
pattern: 01010000100
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01010000100
pattern: 01010001000
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01010001000
pattern: 01010010000
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01010010000
pattern: 01010100000
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01010100000
pattern: 01011000000
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01011000000
pattern: 01100000001
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01100000001
pattern: 01100000010
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01100000010
pattern: 01100000100
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01100000100
pattern: 01100001000
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01100001000
pattern: 01100010000
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01100010000
pattern: 01100100000
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01100100000
pattern: 01101000000
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01101000000
pattern: 01110000000
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01110000000
pattern: 10000000011
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000000011
pattern: 10000000101
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000000101
pattern: 10000000110
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000000110
pattern: 10000001001
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000001001
pattern: 10000001010
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000001010
pattern: 10000001100
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000001100
pattern: 10000010001
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000010001
pattern: 10000010010
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000010010
pattern: 10000010100
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000010100
pattern: 10000011000
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000011000
pattern: 10000100001
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000100001
pattern: 10000100010
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000100010
pattern: 10000100100
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000100100
pattern: 10000101000
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000101000
pattern: 10000110000
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000110000
pattern: 10001000001
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10001000001
pattern: 10001000010
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10001000010
pattern: 10001000100
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10001000100
pattern: 10001001000
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10001001000
pattern: 10001010000
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10001010000
pattern: 10001100000
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10001100000
pattern: 10010000001
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10010000001
pattern: 10010000010
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10010000010
pattern: 10010000100
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10010000100
pattern: 10010001000
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10010001000
pattern: 10010010000
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10010010000
pattern: 10010100000
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10010100000
pattern: 10011000000
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10011000000
pattern: 10100000001
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10100000001
pattern: 10100000010
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10100000010
pattern: 10100000100
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10100000100
pattern: 10100001000
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10100001000
pattern: 10100010000
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10100010000
pattern: 10100100000
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10100100000
pattern: 10101000000
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10101000000
pattern: 10110000000
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10110000000
pattern: 11000000001
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11000000001
pattern: 11000000010
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11000000010
pattern: 11000000100
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11000000100
pattern: 11000001000
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11000001000
pattern: 11000010000
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11000010000
pattern: 11000100000
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11000100000
pattern: 11001000000
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11001000000
pattern: 11010000000
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 3
insert before 9 with import java.util.List;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11010000000
pattern: 11100000000
try to fix hunk: 0
replace from 114 with range 1 to
            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();

try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11100000000
pattern: 00000001111
try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000001111
pattern: 00000010111
try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000010111
pattern: 00000011011
try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000011011
pattern: 00000011101
try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000011101
pattern: 00000011110
try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000011110
pattern: 00000100111
try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000100111
pattern: 00000101011
try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000101011
pattern: 00000101101
try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000101101
pattern: 00000101110
try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000101110
pattern: 00000110011
try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000110011
pattern: 00000110101
try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000110101
pattern: 00000110110
try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000110110
pattern: 00000111001
try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000111001
pattern: 00000111010
try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000111010
pattern: 00000111100
try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000111100
pattern: 00001000111
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001000111
pattern: 00001001011
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001001011
pattern: 00001001101
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001001101
pattern: 00001001110
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001001110
pattern: 00001010011
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001010011
pattern: 00001010101
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001010101
pattern: 00001010110
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001010110
pattern: 00001011001
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001011001
pattern: 00001011010
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001011010
pattern: 00001011100
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001011100
pattern: 00001100011
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001100011
pattern: 00001100101
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001100101
pattern: 00001100110
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001100110
pattern: 00001101001
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001101001
pattern: 00001101010
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001101010
pattern: 00001101100
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001101100
pattern: 00001110001
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001110001
pattern: 00001110010
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001110010
pattern: 00001110100
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001110100
pattern: 00001111000
try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001111000
pattern: 00010000111
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010000111
pattern: 00010001011
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010001011
pattern: 00010001101
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010001101
pattern: 00010001110
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010001110
pattern: 00010010011
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010010011
pattern: 00010010101
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010010101
pattern: 00010010110
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010010110
pattern: 00010011001
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010011001
pattern: 00010011010
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010011010
pattern: 00010011100
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010011100
pattern: 00010100011
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010100011
pattern: 00010100101
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010100101
pattern: 00010100110
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010100110
pattern: 00010101001
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010101001
pattern: 00010101010
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010101010
pattern: 00010101100
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010101100
pattern: 00010110001
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010110001
pattern: 00010110010
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010110010
pattern: 00010110100
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010110100
pattern: 00010111000
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010111000
pattern: 00011000011
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011000011
pattern: 00011000101
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011000101
pattern: 00011000110
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011000110
pattern: 00011001001
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011001001
pattern: 00011001010
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011001010
pattern: 00011001100
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011001100
pattern: 00011010001
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011010001
pattern: 00011010010
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011010010
pattern: 00011010100
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011010100
pattern: 00011011000
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011011000
pattern: 00011100001
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011100001
pattern: 00011100010
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011100010
pattern: 00011100100
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011100100
pattern: 00011101000
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011101000
pattern: 00011110000
try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011110000
pattern: 00100000111
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100000111
pattern: 00100001011
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100001011
pattern: 00100001101
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100001101
pattern: 00100001110
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100001110
pattern: 00100010011
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100010011
pattern: 00100010101
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100010101
pattern: 00100010110
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100010110
pattern: 00100011001
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100011001
pattern: 00100011010
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100011010
pattern: 00100011100
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100011100
pattern: 00100100011
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100100011
pattern: 00100100101
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100100101
pattern: 00100100110
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100100110
pattern: 00100101001
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100101001
pattern: 00100101010
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100101010
pattern: 00100101100
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100101100
pattern: 00100110001
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100110001
pattern: 00100110010
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100110010
pattern: 00100110100
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100110100
pattern: 00100111000
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100111000
pattern: 00101000011
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101000011
pattern: 00101000101
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101000101
pattern: 00101000110
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101000110
pattern: 00101001001
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101001001
pattern: 00101001010
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101001010
pattern: 00101001100
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101001100
pattern: 00101010001
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101010001
pattern: 00101010010
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101010010
pattern: 00101010100
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101010100
pattern: 00101011000
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101011000
pattern: 00101100001
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101100001
pattern: 00101100010
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101100010
pattern: 00101100100
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101100100
pattern: 00101101000
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101101000
pattern: 00101110000
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101110000
pattern: 00110000011
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110000011
pattern: 00110000101
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110000101
pattern: 00110000110
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110000110
pattern: 00110001001
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110001001
pattern: 00110001010
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110001010
pattern: 00110001100
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110001100
pattern: 00110010001
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110010001
pattern: 00110010010
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110010010
pattern: 00110010100
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110010100
pattern: 00110011000
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110011000
pattern: 00110100001
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110100001
pattern: 00110100010
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110100010
pattern: 00110100100
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110100100
pattern: 00110101000
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110101000
pattern: 00110110000
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110110000
pattern: 00111000001
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00111000001
pattern: 00111000010
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00111000010
pattern: 00111000100
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00111000100
pattern: 00111001000
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00111001000
pattern: 00111010000
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00111010000
pattern: 00111100000
try to fix hunk: 2
replace from 23 with range 1 to
    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {

try to fix hunk: 3
insert before 9 with import java.util.List;

try to fix hunk: 4
replace from 15 with range 1 to
            List<Field> fields, Object instance

try to fix hunk: 5
replace from 23 with range 1 to
			Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00111100000
pattern: 01000000111
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000000111
pattern: 01000001011
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000001011
pattern: 01000001101
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000001101
pattern: 01000001110
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 7
insert before 42 with 		} else if (mocks.size() == 1) {
			String mockName = mockUtil.getMockName(mocks.iterator().next())
					.toString();

			for (Field otherField : fields) {
				if (!otherField.equals(field)
						&& otherField.getType().equals(field.getType())
						&& otherField.getName().equals(mockName)) {

					return new OngoingInjecter() {
						public Object thenInject() {
							return null;
						}
					};
				}
			}

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000001110
pattern: 01000010011
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000010011
pattern: 01000010101
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 10
replace from 28 with range 1 to
        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000010101
pattern: 01000010110
try to fix hunk: 1
insert before 13 with import java.util.List;

try to fix hunk: 6
replace from 31 with range 1 to
			return next.filterCandidate(mockNameMatches, field, fields,

try to fix hunk: 8
replace from 43 with range 1 to
		return next.filterCandidate(mocks, field, fields, fieldInstance);

try to fix hunk: 9
replace from 20 with range 1 to
    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {

patches are written to file
running tests...
EXCEPTION: Inside Exception generator.run() timeout
Traceback (most recent call last):
  File "run.py", line 30, in task
    generator.run()
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 82, in new_function
    return function(*args, **kwargs)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 83, in run
    self._run()
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 109, in _run
    self.taskSingleHunk(task)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 138, in taskSingleHunk
    failure = util.get_failing_tests(self.path, self.build_dir)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/util.py", line 46, in get_failing_tests
    result = runCommand(['defects4j', 'test', '-w', '{}'.format(path)], timeout=timeout)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/util.py", line 9, in runCommand
    finished = subprocess.run(cmd, capture_output=True, cwd=cwd, timeout=timeout)
  File "/usr/lib/python3.8/subprocess.py", line 495, in run
    stdout, stderr = process.communicate(input, timeout=timeout)
  File "/usr/lib/python3.8/subprocess.py", line 1028, in communicate
    stdout, stderr = self._communicate(input, endtime, timeout)
  File "/usr/lib/python3.8/subprocess.py", line 1868, in _communicate
    ready = selector.select(timeout)
  File "/usr/lib/python3.8/selectors.py", line 415, in select
    fd_event_list = self._selector.poll(timeout)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 69, in handler
    _raise_exception(timeout_exception, exception_message)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 47, in _raise_exception
    raise exception(exception_message)
TimeoutError: generator.run() timeout

