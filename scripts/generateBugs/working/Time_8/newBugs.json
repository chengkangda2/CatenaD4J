{
    "original": {
        "num_of_hunks": 3,
        "0": {
            "file_name": "src/main/java/org/joda/time/DateTimeZone.java",
            "from_line_no": 279,
            "to_line_no": 279,
            "replaced_with": "        if (minutesOffset < -59 || minutesOffset > 59) {\n",
            "replaced": "        if (minutesOffset < 0 || minutesOffset > 59) {\n",
            "patch_type": "replace",
            "next_line_no": 280
        },
        "1": {
            "file_name": "src/main/java/org/joda/time/DateTimeZone.java",
            "replaced_with": "        if (hoursOffset > 0 && minutesOffset < 0) {\n            throw new IllegalArgumentException(\"Positive hours must not have negative minutes: \" + minutesOffset);\n        }\n",
            "patch_type": "insert",
            "next_line_no": 282
        },
        "2": {
            "file_name": "src/main/java/org/joda/time/DateTimeZone.java",
            "from_line_no": 286,
            "to_line_no": 286,
            "replaced_with": "                minutesOffset = hoursInMinutes - Math.abs(minutesOffset);\n",
            "replaced": "                minutesOffset = hoursInMinutes - minutesOffset;\n",
            "patch_type": "replace",
            "next_line_no": 287
        }
    },
    "method": {
        "failing_tests": [
            "org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int"
        ],
        "org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int": {
            "file_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
            "Instance": "Begin: Pos(303, 12)\nEnd: Pos(339, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Time_8/src/test/java//org/joda/time/TestDateTimeZone.java\nName: testForOffsetHoursMinutes_int_int\nChilds: [StatementAssertion<Begin: Pos(304, 9), End: Pos(304, 81)>,\nStatementAssertion<Begin: Pos(305, 9), End: Pos(305, 95)>,\nStatementAssertion<Begin: Pos(307, 9), End: Pos(307, 94)>,\nStatementAssertion<Begin: Pos(308, 9), End: Pos(308, 93)>,\nStatementAssertion<Begin: Pos(311, 13), End: Pos(311, 19)>,\nStatementAssertion<Begin: Pos(314, 9), End: Pos(314, 94)>,\nStatementAssertion<Begin: Pos(315, 9), End: Pos(315, 93)>,\nStatementAssertion<Begin: Pos(316, 9), End: Pos(316, 95)>,\nStatementAssertion<Begin: Pos(318, 9), End: Pos(318, 94)>,\nStatementAssertion<Begin: Pos(319, 9), End: Pos(319, 96)>,\nStatementAssertion<Begin: Pos(320, 9), End: Pos(320, 95)>,\nStatementAssertion<Begin: Pos(322, 9), End: Pos(322, 96)>,\nStatementAssertion<Begin: Pos(325, 13), End: Pos(325, 19)>,\nStatementAssertion<Begin: Pos(329, 13), End: Pos(329, 19)>,\nStatementAssertion<Begin: Pos(333, 13), End: Pos(333, 19)>,\nStatementAssertion<Begin: Pos(337, 13), End: Pos(337, 19)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Time_8/src/test/java//org/joda/time/TestDateTimeZone.java",
            "name": "testForOffsetHoursMinutes_int_int",
            "begin": "Pos(303, 12)",
            "end": "Pos(339, 5)",
            "begin_line_no": 303,
            "end_line_no": 339,
            "child": [
                "Begin: Pos(304, 9)\nEnd: Pos(304, 81)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(305, 9)\nEnd: Pos(305, 95)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(307, 9)\nEnd: Pos(307, 94)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(308, 9)\nEnd: Pos(308, 93)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(311, 13)\nEnd: Pos(311, 19)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(314, 9)\nEnd: Pos(314, 94)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(315, 9)\nEnd: Pos(315, 93)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(316, 9)\nEnd: Pos(316, 95)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(318, 9)\nEnd: Pos(318, 94)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(319, 9)\nEnd: Pos(319, 96)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(320, 9)\nEnd: Pos(320, 95)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(322, 9)\nEnd: Pos(322, 96)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(325, 13)\nEnd: Pos(325, 19)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(329, 13)\nEnd: Pos(329, 19)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(333, 13)\nEnd: Pos(333, 19)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(337, 13)\nEnd: Pos(337, 19)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testForOffsetHoursMinutes_int_int$catena_0() {\n        assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "    public void testForOffsetHoursMinutes_int_int$catena_1() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));             /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "    public void testForOffsetHoursMinutes_int_int$catena_2() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "    public void testForOffsetHoursMinutes_int_int$catena_3() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));               /***** ORIGINAL ASSERTION IS HERE *****/\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "    public void testForOffsetHoursMinutes_int_int$catena_4() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "    public void testForOffsetHoursMinutes_int_int$catena_5() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "    public void testForOffsetHoursMinutes_int_int$catena_6() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "    public void testForOffsetHoursMinutes_int_int$catena_7() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));             /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "    public void testForOffsetHoursMinutes_int_int$catena_8() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "    public void testForOffsetHoursMinutes_int_int$catena_9() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "    public void testForOffsetHoursMinutes_int_int$catena_10() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));             /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "    public void testForOffsetHoursMinutes_int_int$catena_11() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));            /***** ORIGINAL ASSERTION IS HERE *****/\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "    public void testForOffsetHoursMinutes_int_int$catena_12() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "    public void testForOffsetHoursMinutes_int_int$catena_13() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "    public void testForOffsetHoursMinutes_int_int$catena_14() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "    public void testForOffsetHoursMinutes_int_int$catena_15() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {}\n    }        "
            ],
            "func": {
                "0": "    public void testForOffsetHoursMinutes_int_int$catena_0() {\n        assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "1": "    public void testForOffsetHoursMinutes_int_int$catena_1() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));             /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "2": "    public void testForOffsetHoursMinutes_int_int$catena_2() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "3": "    public void testForOffsetHoursMinutes_int_int$catena_3() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));               /***** ORIGINAL ASSERTION IS HERE *****/\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "4": "    public void testForOffsetHoursMinutes_int_int$catena_4() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "5": "    public void testForOffsetHoursMinutes_int_int$catena_5() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "6": "    public void testForOffsetHoursMinutes_int_int$catena_6() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "7": "    public void testForOffsetHoursMinutes_int_int$catena_7() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));             /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "8": "    public void testForOffsetHoursMinutes_int_int$catena_8() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "9": "    public void testForOffsetHoursMinutes_int_int$catena_9() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "10": "    public void testForOffsetHoursMinutes_int_int$catena_10() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));             /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "11": "    public void testForOffsetHoursMinutes_int_int$catena_11() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));            /***** ORIGINAL ASSERTION IS HERE *****/\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "12": "    public void testForOffsetHoursMinutes_int_int$catena_12() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "13": "    public void testForOffsetHoursMinutes_int_int$catena_13() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "14": "    public void testForOffsetHoursMinutes_int_int$catena_14() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "15": "    public void testForOffsetHoursMinutes_int_int$catena_15() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {}\n    }        "
            }
        }
    },
    "110": {
        "failing_tests": [
            "org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_7"
        ]
    },
    "111": {
        "failing_tests": [
            "org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_9"
        ]
    }
}