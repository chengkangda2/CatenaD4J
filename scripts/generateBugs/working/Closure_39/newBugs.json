{
    "original": {
        "num_of_hunks": 3,
        "0": {
            "file_name": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
            "from_line_no": 380,
            "to_line_no": 380,
            "replaced_with": "        sb.append(getPropertyType(property).toStringHelper(forAnnotations));\n",
            "replaced": "        sb.append(getPropertyType(property).toString());\n",
            "patch_type": "replace",
            "next_line_no": 381
        },
        "1": {
            "file_name": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
            "from_line_no": 383,
            "to_line_no": 383,
            "replaced_with": "        if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {\n",
            "replaced": "        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n",
            "patch_type": "replace",
            "next_line_no": 384
        },
        "2": {
            "file_name": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
            "from_line_no": 394,
            "to_line_no": 394,
            "replaced_with": "      return forAnnotations ? \"?\" : \"{...}\";\n",
            "replaced": "      return \"{...}\";\n",
            "patch_type": "replace",
            "next_line_no": 395
        }
    },
    "method": {
        "failing_tests": [
            "com.google.javascript.rhino.jstype.RecordTypeTest::testRecursiveRecord",
            "com.google.javascript.rhino.jstype.RecordTypeTest::testLongToString"
        ],
        "com.google.javascript.rhino.jstype.RecordTypeTest::testRecursiveRecord": {
            "file_path": "test/com/google/javascript/rhino/jstype/RecordTypeTest.java",
            "Instance": "Begin: Pos(46, 10)\nEnd: Pos(63, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_39/test//com/google/javascript/rhino/jstype/RecordTypeTest.java\nName: testRecursiveRecord\nChilds: [StatementAssertion<Begin: Pos(53, 5), End: Pos(54, 27)>,\nStatementAssertion<Begin: Pos(57, 5), End: Pos(58, 27)>,\nStatementAssertion<Begin: Pos(59, 5), End: Pos(60, 37)>,\nStatementAssertion<Begin: Pos(62, 5), End: Pos(62, 54)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_39/test//com/google/javascript/rhino/jstype/RecordTypeTest.java",
            "name": "testRecursiveRecord",
            "begin": "Pos(46, 10)",
            "end": "Pos(63, 3)",
            "begin_line_no": 46,
            "end_line_no": 63,
            "child": [
                "Begin: Pos(53, 5)\nEnd: Pos(54, 27)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(57, 5)\nEnd: Pos(58, 27)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(59, 5)\nEnd: Pos(60, 37)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(62, 5)\nEnd: Pos(62, 54)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testRecursiveRecord$catena_0() {\n    ProxyObjectType loop = new ProxyObjectType(registry, NUMBER_TYPE);\n    JSType record = new RecordTypeBuilder(registry)\n        .addProperty(\"loop\", loop, null)\n        .addProperty(\"number\", NUMBER_TYPE, null)\n        .addProperty(\"string\", STRING_TYPE, null)\n        .build();\n    assertEquals(\"{loop: number, number: number, string: string}\",\n        record.toString());                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n    loop.setReferencedType(record);\n    try{ assertEquals(\"{loop: {...}, number: number, string: string}\",\n        record.toString());                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"{loop: ?, number: number, string: string}\",\n        record.toAnnotationString());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ Asserts.assertEquivalenceOperations(record, loop);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testRecursiveRecord$catena_1() {\n    ProxyObjectType loop = new ProxyObjectType(registry, NUMBER_TYPE);\n    JSType record = new RecordTypeBuilder(registry)\n        .addProperty(\"loop\", loop, null)\n        .addProperty(\"number\", NUMBER_TYPE, null)\n        .addProperty(\"string\", STRING_TYPE, null)\n        .build();\n    try{ assertEquals(\"{loop: number, number: number, string: string}\",\n        record.toString());                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    loop.setReferencedType(record);\n    assertEquals(\"{loop: {...}, number: number, string: string}\",\n        record.toString());                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\"{loop: ?, number: number, string: string}\",\n        record.toAnnotationString());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ Asserts.assertEquivalenceOperations(record, loop);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testRecursiveRecord$catena_2() {\n    ProxyObjectType loop = new ProxyObjectType(registry, NUMBER_TYPE);\n    JSType record = new RecordTypeBuilder(registry)\n        .addProperty(\"loop\", loop, null)\n        .addProperty(\"number\", NUMBER_TYPE, null)\n        .addProperty(\"string\", STRING_TYPE, null)\n        .build();\n    try{ assertEquals(\"{loop: number, number: number, string: string}\",\n        record.toString());                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    loop.setReferencedType(record);\n    try{ assertEquals(\"{loop: {...}, number: number, string: string}\",\n        record.toString());                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\"{loop: ?, number: number, string: string}\",\n        record.toAnnotationString());                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ Asserts.assertEquivalenceOperations(record, loop);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testRecursiveRecord$catena_3() {\n    ProxyObjectType loop = new ProxyObjectType(registry, NUMBER_TYPE);\n    JSType record = new RecordTypeBuilder(registry)\n        .addProperty(\"loop\", loop, null)\n        .addProperty(\"number\", NUMBER_TYPE, null)\n        .addProperty(\"string\", STRING_TYPE, null)\n        .build();\n    try{ assertEquals(\"{loop: number, number: number, string: string}\",\n        record.toString());                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    loop.setReferencedType(record);\n    try{ assertEquals(\"{loop: {...}, number: number, string: string}\",\n        record.toString());                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"{loop: ?, number: number, string: string}\",\n        record.toAnnotationString());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    Asserts.assertEquivalenceOperations(record, loop);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testRecursiveRecord$catena_0() {\n    ProxyObjectType loop = new ProxyObjectType(registry, NUMBER_TYPE);\n    JSType record = new RecordTypeBuilder(registry)\n        .addProperty(\"loop\", loop, null)\n        .addProperty(\"number\", NUMBER_TYPE, null)\n        .addProperty(\"string\", STRING_TYPE, null)\n        .build();\n    assertEquals(\"{loop: number, number: number, string: string}\",\n        record.toString());                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n    loop.setReferencedType(record);\n    try{ assertEquals(\"{loop: {...}, number: number, string: string}\",\n        record.toString());                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"{loop: ?, number: number, string: string}\",\n        record.toAnnotationString());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ Asserts.assertEquivalenceOperations(record, loop);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testRecursiveRecord$catena_1() {\n    ProxyObjectType loop = new ProxyObjectType(registry, NUMBER_TYPE);\n    JSType record = new RecordTypeBuilder(registry)\n        .addProperty(\"loop\", loop, null)\n        .addProperty(\"number\", NUMBER_TYPE, null)\n        .addProperty(\"string\", STRING_TYPE, null)\n        .build();\n    try{ assertEquals(\"{loop: number, number: number, string: string}\",\n        record.toString());                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    loop.setReferencedType(record);\n    assertEquals(\"{loop: {...}, number: number, string: string}\",\n        record.toString());                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\"{loop: ?, number: number, string: string}\",\n        record.toAnnotationString());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ Asserts.assertEquivalenceOperations(record, loop);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testRecursiveRecord$catena_2() {\n    ProxyObjectType loop = new ProxyObjectType(registry, NUMBER_TYPE);\n    JSType record = new RecordTypeBuilder(registry)\n        .addProperty(\"loop\", loop, null)\n        .addProperty(\"number\", NUMBER_TYPE, null)\n        .addProperty(\"string\", STRING_TYPE, null)\n        .build();\n    try{ assertEquals(\"{loop: number, number: number, string: string}\",\n        record.toString());                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    loop.setReferencedType(record);\n    try{ assertEquals(\"{loop: {...}, number: number, string: string}\",\n        record.toString());                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\"{loop: ?, number: number, string: string}\",\n        record.toAnnotationString());                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ Asserts.assertEquivalenceOperations(record, loop);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "3": "  public void testRecursiveRecord$catena_3() {\n    ProxyObjectType loop = new ProxyObjectType(registry, NUMBER_TYPE);\n    JSType record = new RecordTypeBuilder(registry)\n        .addProperty(\"loop\", loop, null)\n        .addProperty(\"number\", NUMBER_TYPE, null)\n        .addProperty(\"string\", STRING_TYPE, null)\n        .build();\n    try{ assertEquals(\"{loop: number, number: number, string: string}\",\n        record.toString());                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    loop.setReferencedType(record);\n    try{ assertEquals(\"{loop: {...}, number: number, string: string}\",\n        record.toString());                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"{loop: ?, number: number, string: string}\",\n        record.toAnnotationString());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    Asserts.assertEquivalenceOperations(record, loop);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        },
        "com.google.javascript.rhino.jstype.RecordTypeTest::testLongToString": {
            "file_path": "test/com/google/javascript/rhino/jstype/RecordTypeTest.java",
            "Instance": "Begin: Pos(65, 10)\nEnd: Pos(80, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_39/test//com/google/javascript/rhino/jstype/RecordTypeTest.java\nName: testLongToString\nChilds: [StatementAssertion<Begin: Pos(74, 5), End: Pos(75, 27)>,\nStatementAssertion<Begin: Pos(76, 5), End: Pos(79, 37)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_39/test//com/google/javascript/rhino/jstype/RecordTypeTest.java",
            "name": "testLongToString",
            "begin": "Pos(65, 10)",
            "end": "Pos(80, 3)",
            "begin_line_no": 65,
            "end_line_no": 80,
            "child": [
                "Begin: Pos(74, 5)\nEnd: Pos(75, 27)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(76, 5)\nEnd: Pos(79, 37)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testLongToString$catena_0() {\n    JSType record = new RecordTypeBuilder(registry)\n        .addProperty(\"a1\", NUMBER_TYPE, null)\n        .addProperty(\"a2\", NUMBER_TYPE, null)\n        .addProperty(\"a3\", NUMBER_TYPE, null)\n        .addProperty(\"a4\", NUMBER_TYPE, null)\n        .addProperty(\"a5\", NUMBER_TYPE, null)\n        .addProperty(\"a6\", NUMBER_TYPE, null)\n        .build();\n    assertEquals(\"{a1: number, a2: number, a3: number, a4: number, ...}\",\n        record.toString());                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\n        \"{a1: number, a2: number, a3: number, a4: number,\" +\n        \" a5: number, a6: number}\",\n        record.toAnnotationString());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testLongToString$catena_1() {\n    JSType record = new RecordTypeBuilder(registry)\n        .addProperty(\"a1\", NUMBER_TYPE, null)\n        .addProperty(\"a2\", NUMBER_TYPE, null)\n        .addProperty(\"a3\", NUMBER_TYPE, null)\n        .addProperty(\"a4\", NUMBER_TYPE, null)\n        .addProperty(\"a5\", NUMBER_TYPE, null)\n        .addProperty(\"a6\", NUMBER_TYPE, null)\n        .build();\n    try{ assertEquals(\"{a1: number, a2: number, a3: number, a4: number, ...}\",\n        record.toString());                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\n        \"{a1: number, a2: number, a3: number, a4: number,\" +\n        \" a5: number, a6: number}\",\n        record.toAnnotationString());                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testLongToString$catena_0() {\n    JSType record = new RecordTypeBuilder(registry)\n        .addProperty(\"a1\", NUMBER_TYPE, null)\n        .addProperty(\"a2\", NUMBER_TYPE, null)\n        .addProperty(\"a3\", NUMBER_TYPE, null)\n        .addProperty(\"a4\", NUMBER_TYPE, null)\n        .addProperty(\"a5\", NUMBER_TYPE, null)\n        .addProperty(\"a6\", NUMBER_TYPE, null)\n        .build();\n    assertEquals(\"{a1: number, a2: number, a3: number, a4: number, ...}\",\n        record.toString());                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\n        \"{a1: number, a2: number, a3: number, a4: number,\" +\n        \" a5: number, a6: number}\",\n        record.toAnnotationString());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testLongToString$catena_1() {\n    JSType record = new RecordTypeBuilder(registry)\n        .addProperty(\"a1\", NUMBER_TYPE, null)\n        .addProperty(\"a2\", NUMBER_TYPE, null)\n        .addProperty(\"a3\", NUMBER_TYPE, null)\n        .addProperty(\"a4\", NUMBER_TYPE, null)\n        .addProperty(\"a5\", NUMBER_TYPE, null)\n        .addProperty(\"a6\", NUMBER_TYPE, null)\n        .build();\n    try{ assertEquals(\"{a1: number, a2: number, a3: number, a4: number, ...}\",\n        record.toString());                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\n        \"{a1: number, a2: number, a3: number, a4: number,\" +\n        \" a5: number, a6: number}\",\n        record.toAnnotationString());                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        }
    },
    "010": {
        "failing_tests": [
            "com.google.javascript.rhino.jstype.RecordTypeTest::testLongToString$catena_1"
        ]
    },
    "101": {
        "failing_tests": [
            "com.google.javascript.rhino.jstype.RecordTypeTest::testRecursiveRecord$catena_2"
        ]
    }
}