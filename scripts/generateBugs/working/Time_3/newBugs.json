{
    "original": {
        "num_of_hunks": 20,
        "0": {
            "file_name": "src/main/java/org/joda/time/MutableDateTime.java",
            "replaced_with": "        if (amount != 0) {\n",
            "patch_type": "insert",
            "next_line_no": 639
        },
        "1": {
            "file_name": "src/main/java/org/joda/time/MutableDateTime.java",
            "replaced_with": "        }\n",
            "patch_type": "insert",
            "next_line_no": 640
        },
        "2": {
            "file_name": "src/main/java/org/joda/time/MutableDateTime.java",
            "replaced_with": "        if (years != 0) {\n",
            "patch_type": "insert",
            "next_line_no": 660
        },
        "3": {
            "file_name": "src/main/java/org/joda/time/MutableDateTime.java",
            "replaced_with": "        }\n",
            "patch_type": "insert",
            "next_line_no": 661
        },
        "4": {
            "file_name": "src/main/java/org/joda/time/MutableDateTime.java",
            "replaced_with": "        if (weekyears != 0) {\n",
            "patch_type": "insert",
            "next_line_no": 681
        },
        "5": {
            "file_name": "src/main/java/org/joda/time/MutableDateTime.java",
            "replaced_with": "        }\n",
            "patch_type": "insert",
            "next_line_no": 682
        },
        "6": {
            "file_name": "src/main/java/org/joda/time/MutableDateTime.java",
            "replaced_with": "        if (months != 0) {\n",
            "patch_type": "insert",
            "next_line_no": 702
        },
        "7": {
            "file_name": "src/main/java/org/joda/time/MutableDateTime.java",
            "replaced_with": "        }\n",
            "patch_type": "insert",
            "next_line_no": 703
        },
        "8": {
            "file_name": "src/main/java/org/joda/time/MutableDateTime.java",
            "replaced_with": "        if (weeks != 0) {\n",
            "patch_type": "insert",
            "next_line_no": 723
        },
        "9": {
            "file_name": "src/main/java/org/joda/time/MutableDateTime.java",
            "replaced_with": "        }\n",
            "patch_type": "insert",
            "next_line_no": 724
        },
        "10": {
            "file_name": "src/main/java/org/joda/time/MutableDateTime.java",
            "replaced_with": "        if (days != 0) {\n",
            "patch_type": "insert",
            "next_line_no": 764
        },
        "11": {
            "file_name": "src/main/java/org/joda/time/MutableDateTime.java",
            "replaced_with": "        }\n",
            "patch_type": "insert",
            "next_line_no": 765
        },
        "12": {
            "file_name": "src/main/java/org/joda/time/MutableDateTime.java",
            "replaced_with": "        if (hours != 0) {\n",
            "patch_type": "insert",
            "next_line_no": 785
        },
        "13": {
            "file_name": "src/main/java/org/joda/time/MutableDateTime.java",
            "replaced_with": "        }\n",
            "patch_type": "insert",
            "next_line_no": 786
        },
        "14": {
            "file_name": "src/main/java/org/joda/time/MutableDateTime.java",
            "replaced_with": "        if (minutes != 0) {\n",
            "patch_type": "insert",
            "next_line_no": 816
        },
        "15": {
            "file_name": "src/main/java/org/joda/time/MutableDateTime.java",
            "replaced_with": "        }\n",
            "patch_type": "insert",
            "next_line_no": 817
        },
        "16": {
            "file_name": "src/main/java/org/joda/time/MutableDateTime.java",
            "replaced_with": "        if (seconds != 0) {\n",
            "patch_type": "insert",
            "next_line_no": 847
        },
        "17": {
            "file_name": "src/main/java/org/joda/time/MutableDateTime.java",
            "replaced_with": "        }\n",
            "patch_type": "insert",
            "next_line_no": 848
        },
        "18": {
            "file_name": "src/main/java/org/joda/time/MutableDateTime.java",
            "replaced_with": "        if (millis != 0) {\n",
            "patch_type": "insert",
            "next_line_no": 880
        },
        "19": {
            "file_name": "src/main/java/org/joda/time/MutableDateTime.java",
            "replaced_with": "        }\n",
            "patch_type": "insert",
            "next_line_no": 881
        }
    },
    "method": {
        "failing_tests": [
            "org.joda.time.TestMutableDateTime_Adds::testAddYears_int_dstOverlapWinter_addZero",
            "org.joda.time.TestMutableDateTime_Adds::testAddDays_int_dstOverlapWinter_addZero",
            "org.joda.time.TestMutableDateTime_Adds::testAddWeeks_int_dstOverlapWinter_addZero",
            "org.joda.time.TestMutableDateTime_Adds::testAdd_DurationFieldType_int_dstOverlapWinter_addZero",
            "org.joda.time.TestMutableDateTime_Adds::testAddMonths_int_dstOverlapWinter_addZero"
        ],
        "org.joda.time.TestMutableDateTime_Adds::testAddYears_int_dstOverlapWinter_addZero": {
            "file_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
            "Instance": "Begin: Pos(222, 12)\nEnd: Pos(228, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Time_3/src/test/java//org/joda/time/TestMutableDateTime_Adds.java\nName: testAddYears_int_dstOverlapWinter_addZero\nChilds: [StatementAssertion<Begin: Pos(225, 9), End: Pos(225, 71)>,\nStatementAssertion<Begin: Pos(227, 9), End: Pos(227, 71)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Time_3/src/test/java//org/joda/time/TestMutableDateTime_Adds.java",
            "name": "testAddYears_int_dstOverlapWinter_addZero",
            "begin": "Pos(222, 12)",
            "end": "Pos(228, 5)",
            "begin_line_no": 222,
            "end_line_no": 228,
            "child": [
                "Begin: Pos(225, 9)\nEnd: Pos(225, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(227, 9)\nEnd: Pos(227, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testAddYears_int_dstOverlapWinter_addZero$catena_0() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        test.addYears(0);\n        try{ assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testAddYears_int_dstOverlapWinter_addZero$catena_1() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        try{ assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        test.addYears(0);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testAddYears_int_dstOverlapWinter_addZero$catena_0() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        test.addYears(0);\n        try{ assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testAddYears_int_dstOverlapWinter_addZero$catena_1() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        try{ assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        test.addYears(0);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.joda.time.TestMutableDateTime_Adds::testAddDays_int_dstOverlapWinter_addZero": {
            "file_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
            "Instance": "Begin: Pos(266, 12)\nEnd: Pos(272, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Time_3/src/test/java//org/joda/time/TestMutableDateTime_Adds.java\nName: testAddDays_int_dstOverlapWinter_addZero\nChilds: [StatementAssertion<Begin: Pos(269, 9), End: Pos(269, 71)>,\nStatementAssertion<Begin: Pos(271, 9), End: Pos(271, 71)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Time_3/src/test/java//org/joda/time/TestMutableDateTime_Adds.java",
            "name": "testAddDays_int_dstOverlapWinter_addZero",
            "begin": "Pos(266, 12)",
            "end": "Pos(272, 5)",
            "begin_line_no": 266,
            "end_line_no": 272,
            "child": [
                "Begin: Pos(269, 9)\nEnd: Pos(269, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(271, 9)\nEnd: Pos(271, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testAddDays_int_dstOverlapWinter_addZero$catena_0() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        test.addDays(0);\n        try{ assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testAddDays_int_dstOverlapWinter_addZero$catena_1() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        try{ assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        test.addDays(0);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testAddDays_int_dstOverlapWinter_addZero$catena_0() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        test.addDays(0);\n        try{ assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testAddDays_int_dstOverlapWinter_addZero$catena_1() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        try{ assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        test.addDays(0);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.joda.time.TestMutableDateTime_Adds::testAddWeeks_int_dstOverlapWinter_addZero": {
            "file_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
            "Instance": "Begin: Pos(295, 12)\nEnd: Pos(301, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Time_3/src/test/java//org/joda/time/TestMutableDateTime_Adds.java\nName: testAddWeeks_int_dstOverlapWinter_addZero\nChilds: [StatementAssertion<Begin: Pos(298, 9), End: Pos(298, 71)>,\nStatementAssertion<Begin: Pos(300, 9), End: Pos(300, 71)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Time_3/src/test/java//org/joda/time/TestMutableDateTime_Adds.java",
            "name": "testAddWeeks_int_dstOverlapWinter_addZero",
            "begin": "Pos(295, 12)",
            "end": "Pos(301, 5)",
            "begin_line_no": 295,
            "end_line_no": 301,
            "child": [
                "Begin: Pos(298, 9)\nEnd: Pos(298, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(300, 9)\nEnd: Pos(300, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testAddWeeks_int_dstOverlapWinter_addZero$catena_0() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        test.addWeeks(0);\n        try{ assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testAddWeeks_int_dstOverlapWinter_addZero$catena_1() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        try{ assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        test.addWeeks(0);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testAddWeeks_int_dstOverlapWinter_addZero$catena_0() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        test.addWeeks(0);\n        try{ assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testAddWeeks_int_dstOverlapWinter_addZero$catena_1() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        try{ assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        test.addWeeks(0);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.joda.time.TestMutableDateTime_Adds::testAdd_DurationFieldType_int_dstOverlapWinter_addZero": {
            "file_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
            "Instance": "Begin: Pos(182, 12)\nEnd: Pos(188, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Time_3/src/test/java//org/joda/time/TestMutableDateTime_Adds.java\nName: testAdd_DurationFieldType_int_dstOverlapWinter_addZero\nChilds: [StatementAssertion<Begin: Pos(185, 9), End: Pos(185, 71)>,\nStatementAssertion<Begin: Pos(187, 9), End: Pos(187, 71)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Time_3/src/test/java//org/joda/time/TestMutableDateTime_Adds.java",
            "name": "testAdd_DurationFieldType_int_dstOverlapWinter_addZero",
            "begin": "Pos(182, 12)",
            "end": "Pos(188, 5)",
            "begin_line_no": 182,
            "end_line_no": 188,
            "child": [
                "Begin: Pos(185, 9)\nEnd: Pos(185, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(187, 9)\nEnd: Pos(187, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testAdd_DurationFieldType_int_dstOverlapWinter_addZero$catena_0() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        test.add(DurationFieldType.years(), 0);\n        try{ assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testAdd_DurationFieldType_int_dstOverlapWinter_addZero$catena_1() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        try{ assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        test.add(DurationFieldType.years(), 0);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testAdd_DurationFieldType_int_dstOverlapWinter_addZero$catena_0() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        test.add(DurationFieldType.years(), 0);\n        try{ assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testAdd_DurationFieldType_int_dstOverlapWinter_addZero$catena_1() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        try{ assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        test.add(DurationFieldType.years(), 0);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.joda.time.TestMutableDateTime_Adds::testAddMonths_int_dstOverlapWinter_addZero": {
            "file_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
            "Instance": "Begin: Pos(244, 12)\nEnd: Pos(250, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Time_3/src/test/java//org/joda/time/TestMutableDateTime_Adds.java\nName: testAddMonths_int_dstOverlapWinter_addZero\nChilds: [StatementAssertion<Begin: Pos(247, 9), End: Pos(247, 71)>,\nStatementAssertion<Begin: Pos(249, 9), End: Pos(249, 71)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Time_3/src/test/java//org/joda/time/TestMutableDateTime_Adds.java",
            "name": "testAddMonths_int_dstOverlapWinter_addZero",
            "begin": "Pos(244, 12)",
            "end": "Pos(250, 5)",
            "begin_line_no": 244,
            "end_line_no": 250,
            "child": [
                "Begin: Pos(247, 9)\nEnd: Pos(247, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(249, 9)\nEnd: Pos(249, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testAddMonths_int_dstOverlapWinter_addZero$catena_0() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        test.addMonths(0);\n        try{ assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testAddMonths_int_dstOverlapWinter_addZero$catena_1() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        try{ assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        test.addMonths(0);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testAddMonths_int_dstOverlapWinter_addZero$catena_0() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        test.addMonths(0);\n        try{ assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testAddMonths_int_dstOverlapWinter_addZero$catena_1() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        try{ assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        test.addMonths(0);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "11000000000000000000": {
        "failing_tests": [
            "org.joda.time.TestMutableDateTime_Adds::testAdd_DurationFieldType_int_dstOverlapWinter_addZero$catena_1"
        ]
    },
    "00110000000000000000": {
        "failing_tests": [
            "org.joda.time.TestMutableDateTime_Adds::testAddYears_int_dstOverlapWinter_addZero$catena_1"
        ]
    },
    "00000011000000000000": {
        "failing_tests": [
            "org.joda.time.TestMutableDateTime_Adds::testAddMonths_int_dstOverlapWinter_addZero$catena_1"
        ]
    },
    "00000000110000000000": {
        "failing_tests": [
            "org.joda.time.TestMutableDateTime_Adds::testAddWeeks_int_dstOverlapWinter_addZero$catena_1"
        ]
    },
    "00000000001100000000": {
        "failing_tests": [
            "org.joda.time.TestMutableDateTime_Adds::testAddDays_int_dstOverlapWinter_addZero$catena_1"
        ]
    }
}