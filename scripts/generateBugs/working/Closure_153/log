---
Begin generate bug_id: Closure_153
num_of_hunks: 19
NOTICE: may not contains full fix patterns for hunks are too much (19 hunks)
timeout for running: 3600
use working dir: ./working/data/Closure_153
Try to checkout Closure_153
build dir: ['./working/data/Closure_153/build/classes', './working/data/Closure_153/build/test']
init FileManager
trace file: src/com/google/javascript/jscomp/Normalize.java
trace file: src/com/google/javascript/jscomp/SyntacticScopeCreator.java
trying to replace old failing tests
edit: replace from 225 range 44 at test/com/google/javascript/jscomp/NormalizeTest.java
to
  public void testMakeLocalNamesUnique$catena_0() {
    if (!Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
      return;
    }

    // Verify global names are untouched.
    testSame("var a;");                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/

    // Verify global names are untouched.
    try{ testSame("a;");                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    // Local names are made unique.
    try{ test("var a;function foo(a){var b;a}",
         "var a;function foo(a$$1){var b;a$$1}");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a;function foo(){var b;a}function boo(){var b;a}",
         "var a;function foo(){var b;a}function boo(){var b$$1;a}");                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function foo(a){var b}" +
         "function boo(a){var b}",
         "function foo(a){var b}" +
         "function boo(a$$1){var b$$1}");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify function expressions are renamed.
    try{ test("var a = function foo(){foo()};var b = function foo(){foo()};",
         "var a = function foo(){foo()};var b = function foo$$1(){foo$$1()};");                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify catch exceptions names are made unique
    try{ test("try { } catch(e) {e;}",
         "try { } catch(e) {e;}");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("try { } catch(e) {e;}; try { } catch(e) {e;}",
         "try { } catch(e) {e;}; try { } catch(e$$1) {e$$1;}");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("try { } catch(e) {e; try { } catch(e) {e;}};",
         "try { } catch(e) {e; try { } catch(e$$1) {e$$1;} }; ");                                           }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify the 1st global redefinition of extern definition is not removed.
    try{ test("/** @suppress {duplicate} */\nvar window;", "var window;");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify the 2nd global redefinition of extern definition is removed.
    try{ test("/** @suppress {duplicate} */\nvar window;" +
         "/** @suppress {duplicate} */\nvar window;", "var window;");                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify local masking extern made unique.
    try{ test("function f() {var window}",
         "function f() {var window$$1}");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testMakeLocalNamesUnique$catena_1() {
    if (!Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
      return;
    }

    // Verify global names are untouched.
    try{ testSame("var a;");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify global names are untouched.
    testSame("a;");                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/

    // Local names are made unique.
    try{ test("var a;function foo(a){var b;a}",
         "var a;function foo(a$$1){var b;a$$1}");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a;function foo(){var b;a}function boo(){var b;a}",
         "var a;function foo(){var b;a}function boo(){var b$$1;a}");                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function foo(a){var b}" +
         "function boo(a){var b}",
         "function foo(a){var b}" +
         "function boo(a$$1){var b$$1}");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify function expressions are renamed.
    try{ test("var a = function foo(){foo()};var b = function foo(){foo()};",
         "var a = function foo(){foo()};var b = function foo$$1(){foo$$1()};");                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify catch exceptions names are made unique
    try{ test("try { } catch(e) {e;}",
         "try { } catch(e) {e;}");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("try { } catch(e) {e;}; try { } catch(e) {e;}",
         "try { } catch(e) {e;}; try { } catch(e$$1) {e$$1;}");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("try { } catch(e) {e; try { } catch(e) {e;}};",
         "try { } catch(e) {e; try { } catch(e$$1) {e$$1;} }; ");                                           }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify the 1st global redefinition of extern definition is not removed.
    try{ test("/** @suppress {duplicate} */\nvar window;", "var window;");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify the 2nd global redefinition of extern definition is removed.
    try{ test("/** @suppress {duplicate} */\nvar window;" +
         "/** @suppress {duplicate} */\nvar window;", "var window;");                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify local masking extern made unique.
    try{ test("function f() {var window}",
         "function f() {var window$$1}");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testMakeLocalNamesUnique$catena_2() {
    if (!Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
      return;
    }

    // Verify global names are untouched.
    try{ testSame("var a;");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify global names are untouched.
    try{ testSame("a;");                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    // Local names are made unique.
    test("var a;function foo(a){var b;a}",
         "var a;function foo(a$$1){var b;a$$1}");                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("var a;function foo(){var b;a}function boo(){var b;a}",
         "var a;function foo(){var b;a}function boo(){var b$$1;a}");                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function foo(a){var b}" +
         "function boo(a){var b}",
         "function foo(a){var b}" +
         "function boo(a$$1){var b$$1}");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify function expressions are renamed.
    try{ test("var a = function foo(){foo()};var b = function foo(){foo()};",
         "var a = function foo(){foo()};var b = function foo$$1(){foo$$1()};");                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify catch exceptions names are made unique
    try{ test("try { } catch(e) {e;}",
         "try { } catch(e) {e;}");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("try { } catch(e) {e;}; try { } catch(e) {e;}",
         "try { } catch(e) {e;}; try { } catch(e$$1) {e$$1;}");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("try { } catch(e) {e; try { } catch(e) {e;}};",
         "try { } catch(e) {e; try { } catch(e$$1) {e$$1;} }; ");                                           }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify the 1st global redefinition of extern definition is not removed.
    try{ test("/** @suppress {duplicate} */\nvar window;", "var window;");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify the 2nd global redefinition of extern definition is removed.
    try{ test("/** @suppress {duplicate} */\nvar window;" +
         "/** @suppress {duplicate} */\nvar window;", "var window;");                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify local masking extern made unique.
    try{ test("function f() {var window}",
         "function f() {var window$$1}");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testMakeLocalNamesUnique$catena_3() {
    if (!Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
      return;
    }

    // Verify global names are untouched.
    try{ testSame("var a;");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify global names are untouched.
    try{ testSame("a;");                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    // Local names are made unique.
    try{ test("var a;function foo(a){var b;a}",
         "var a;function foo(a$$1){var b;a$$1}");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    test("var a;function foo(){var b;a}function boo(){var b;a}",
         "var a;function foo(){var b;a}function boo(){var b$$1;a}");                                        /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("function foo(a){var b}" +
         "function boo(a){var b}",
         "function foo(a){var b}" +
         "function boo(a$$1){var b$$1}");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify function expressions are renamed.
    try{ test("var a = function foo(){foo()};var b = function foo(){foo()};",
         "var a = function foo(){foo()};var b = function foo$$1(){foo$$1()};");                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify catch exceptions names are made unique
    try{ test("try { } catch(e) {e;}",
         "try { } catch(e) {e;}");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("try { } catch(e) {e;}; try { } catch(e) {e;}",
         "try { } catch(e) {e;}; try { } catch(e$$1) {e$$1;}");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("try { } catch(e) {e; try { } catch(e) {e;}};",
         "try { } catch(e) {e; try { } catch(e$$1) {e$$1;} }; ");                                           }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify the 1st global redefinition of extern definition is not removed.
    try{ test("/** @suppress {duplicate} */\nvar window;", "var window;");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify the 2nd global redefinition of extern definition is removed.
    try{ test("/** @suppress {duplicate} */\nvar window;" +
         "/** @suppress {duplicate} */\nvar window;", "var window;");                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify local masking extern made unique.
    try{ test("function f() {var window}",
         "function f() {var window$$1}");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testMakeLocalNamesUnique$catena_4() {
    if (!Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
      return;
    }

    // Verify global names are untouched.
    try{ testSame("var a;");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify global names are untouched.
    try{ testSame("a;");                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    // Local names are made unique.
    try{ test("var a;function foo(a){var b;a}",
         "var a;function foo(a$$1){var b;a$$1}");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a;function foo(){var b;a}function boo(){var b;a}",
         "var a;function foo(){var b;a}function boo(){var b$$1;a}");                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    test("function foo(a){var b}" +
         "function boo(a){var b}",
         "function foo(a){var b}" +
         "function boo(a$$1){var b$$1}");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/

    // Verify function expressions are renamed.
    try{ test("var a = function foo(){foo()};var b = function foo(){foo()};",
         "var a = function foo(){foo()};var b = function foo$$1(){foo$$1()};");                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify catch exceptions names are made unique
    try{ test("try { } catch(e) {e;}",
         "try { } catch(e) {e;}");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("try { } catch(e) {e;}; try { } catch(e) {e;}",
         "try { } catch(e) {e;}; try { } catch(e$$1) {e$$1;}");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("try { } catch(e) {e; try { } catch(e) {e;}};",
         "try { } catch(e) {e; try { } catch(e$$1) {e$$1;} }; ");                                           }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify the 1st global redefinition of extern definition is not removed.
    try{ test("/** @suppress {duplicate} */\nvar window;", "var window;");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify the 2nd global redefinition of extern definition is removed.
    try{ test("/** @suppress {duplicate} */\nvar window;" +
         "/** @suppress {duplicate} */\nvar window;", "var window;");                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify local masking extern made unique.
    try{ test("function f() {var window}",
         "function f() {var window$$1}");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testMakeLocalNamesUnique$catena_5() {
    if (!Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
      return;
    }

    // Verify global names are untouched.
    try{ testSame("var a;");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify global names are untouched.
    try{ testSame("a;");                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    // Local names are made unique.
    try{ test("var a;function foo(a){var b;a}",
         "var a;function foo(a$$1){var b;a$$1}");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a;function foo(){var b;a}function boo(){var b;a}",
         "var a;function foo(){var b;a}function boo(){var b$$1;a}");                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function foo(a){var b}" +
         "function boo(a){var b}",
         "function foo(a){var b}" +
         "function boo(a$$1){var b$$1}");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify function expressions are renamed.
    test("var a = function foo(){foo()};var b = function foo(){foo()};",
         "var a = function foo(){foo()};var b = function foo$$1(){foo$$1()};");                             /***** ORIGINAL ASSERTION IS HERE *****/

    // Verify catch exceptions names are made unique
    try{ test("try { } catch(e) {e;}",
         "try { } catch(e) {e;}");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("try { } catch(e) {e;}; try { } catch(e) {e;}",
         "try { } catch(e) {e;}; try { } catch(e$$1) {e$$1;}");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("try { } catch(e) {e; try { } catch(e) {e;}};",
         "try { } catch(e) {e; try { } catch(e$$1) {e$$1;} }; ");                                           }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify the 1st global redefinition of extern definition is not removed.
    try{ test("/** @suppress {duplicate} */\nvar window;", "var window;");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify the 2nd global redefinition of extern definition is removed.
    try{ test("/** @suppress {duplicate} */\nvar window;" +
         "/** @suppress {duplicate} */\nvar window;", "var window;");                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify local masking extern made unique.
    try{ test("function f() {var window}",
         "function f() {var window$$1}");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testMakeLocalNamesUnique$catena_6() {
    if (!Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
      return;
    }

    // Verify global names are untouched.
    try{ testSame("var a;");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify global names are untouched.
    try{ testSame("a;");                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    // Local names are made unique.
    try{ test("var a;function foo(a){var b;a}",
         "var a;function foo(a$$1){var b;a$$1}");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a;function foo(){var b;a}function boo(){var b;a}",
         "var a;function foo(){var b;a}function boo(){var b$$1;a}");                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function foo(a){var b}" +
         "function boo(a){var b}",
         "function foo(a){var b}" +
         "function boo(a$$1){var b$$1}");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify function expressions are renamed.
    try{ test("var a = function foo(){foo()};var b = function foo(){foo()};",
         "var a = function foo(){foo()};var b = function foo$$1(){foo$$1()};");                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify catch exceptions names are made unique
    test("try { } catch(e) {e;}",
         "try { } catch(e) {e;}");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("try { } catch(e) {e;}; try { } catch(e) {e;}",
         "try { } catch(e) {e;}; try { } catch(e$$1) {e$$1;}");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("try { } catch(e) {e; try { } catch(e) {e;}};",
         "try { } catch(e) {e; try { } catch(e$$1) {e$$1;} }; ");                                           }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify the 1st global redefinition of extern definition is not removed.
    try{ test("/** @suppress {duplicate} */\nvar window;", "var window;");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify the 2nd global redefinition of extern definition is removed.
    try{ test("/** @suppress {duplicate} */\nvar window;" +
         "/** @suppress {duplicate} */\nvar window;", "var window;");                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify local masking extern made unique.
    try{ test("function f() {var window}",
         "function f() {var window$$1}");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testMakeLocalNamesUnique$catena_7() {
    if (!Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
      return;
    }

    // Verify global names are untouched.
    try{ testSame("var a;");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify global names are untouched.
    try{ testSame("a;");                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    // Local names are made unique.
    try{ test("var a;function foo(a){var b;a}",
         "var a;function foo(a$$1){var b;a$$1}");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a;function foo(){var b;a}function boo(){var b;a}",
         "var a;function foo(){var b;a}function boo(){var b$$1;a}");                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function foo(a){var b}" +
         "function boo(a){var b}",
         "function foo(a){var b}" +
         "function boo(a$$1){var b$$1}");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify function expressions are renamed.
    try{ test("var a = function foo(){foo()};var b = function foo(){foo()};",
         "var a = function foo(){foo()};var b = function foo$$1(){foo$$1()};");                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify catch exceptions names are made unique
    try{ test("try { } catch(e) {e;}",
         "try { } catch(e) {e;}");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    test("try { } catch(e) {e;}; try { } catch(e) {e;}",
         "try { } catch(e) {e;}; try { } catch(e$$1) {e$$1;}");                                             /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("try { } catch(e) {e; try { } catch(e) {e;}};",
         "try { } catch(e) {e; try { } catch(e$$1) {e$$1;} }; ");                                           }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify the 1st global redefinition of extern definition is not removed.
    try{ test("/** @suppress {duplicate} */\nvar window;", "var window;");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify the 2nd global redefinition of extern definition is removed.
    try{ test("/** @suppress {duplicate} */\nvar window;" +
         "/** @suppress {duplicate} */\nvar window;", "var window;");                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify local masking extern made unique.
    try{ test("function f() {var window}",
         "function f() {var window$$1}");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testMakeLocalNamesUnique$catena_8() {
    if (!Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
      return;
    }

    // Verify global names are untouched.
    try{ testSame("var a;");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify global names are untouched.
    try{ testSame("a;");                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    // Local names are made unique.
    try{ test("var a;function foo(a){var b;a}",
         "var a;function foo(a$$1){var b;a$$1}");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a;function foo(){var b;a}function boo(){var b;a}",
         "var a;function foo(){var b;a}function boo(){var b$$1;a}");                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function foo(a){var b}" +
         "function boo(a){var b}",
         "function foo(a){var b}" +
         "function boo(a$$1){var b$$1}");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify function expressions are renamed.
    try{ test("var a = function foo(){foo()};var b = function foo(){foo()};",
         "var a = function foo(){foo()};var b = function foo$$1(){foo$$1()};");                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify catch exceptions names are made unique
    try{ test("try { } catch(e) {e;}",
         "try { } catch(e) {e;}");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("try { } catch(e) {e;}; try { } catch(e) {e;}",
         "try { } catch(e) {e;}; try { } catch(e$$1) {e$$1;}");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    test("try { } catch(e) {e; try { } catch(e) {e;}};",
         "try { } catch(e) {e; try { } catch(e$$1) {e$$1;} }; ");                                           /***** ORIGINAL ASSERTION IS HERE *****/

    // Verify the 1st global redefinition of extern definition is not removed.
    try{ test("/** @suppress {duplicate} */\nvar window;", "var window;");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify the 2nd global redefinition of extern definition is removed.
    try{ test("/** @suppress {duplicate} */\nvar window;" +
         "/** @suppress {duplicate} */\nvar window;", "var window;");                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify local masking extern made unique.
    try{ test("function f() {var window}",
         "function f() {var window$$1}");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testMakeLocalNamesUnique$catena_9() {
    if (!Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
      return;
    }

    // Verify global names are untouched.
    try{ testSame("var a;");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify global names are untouched.
    try{ testSame("a;");                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    // Local names are made unique.
    try{ test("var a;function foo(a){var b;a}",
         "var a;function foo(a$$1){var b;a$$1}");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a;function foo(){var b;a}function boo(){var b;a}",
         "var a;function foo(){var b;a}function boo(){var b$$1;a}");                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function foo(a){var b}" +
         "function boo(a){var b}",
         "function foo(a){var b}" +
         "function boo(a$$1){var b$$1}");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify function expressions are renamed.
    try{ test("var a = function foo(){foo()};var b = function foo(){foo()};",
         "var a = function foo(){foo()};var b = function foo$$1(){foo$$1()};");                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify catch exceptions names are made unique
    try{ test("try { } catch(e) {e;}",
         "try { } catch(e) {e;}");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("try { } catch(e) {e;}; try { } catch(e) {e;}",
         "try { } catch(e) {e;}; try { } catch(e$$1) {e$$1;}");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("try { } catch(e) {e; try { } catch(e) {e;}};",
         "try { } catch(e) {e; try { } catch(e$$1) {e$$1;} }; ");                                           }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify the 1st global redefinition of extern definition is not removed.
    test("/** @suppress {duplicate} */\nvar window;", "var window;");                                       /***** ORIGINAL ASSERTION IS HERE *****/

    // Verify the 2nd global redefinition of extern definition is removed.
    try{ test("/** @suppress {duplicate} */\nvar window;" +
         "/** @suppress {duplicate} */\nvar window;", "var window;");                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify local masking extern made unique.
    try{ test("function f() {var window}",
         "function f() {var window$$1}");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testMakeLocalNamesUnique$catena_10() {
    if (!Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
      return;
    }

    // Verify global names are untouched.
    try{ testSame("var a;");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify global names are untouched.
    try{ testSame("a;");                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    // Local names are made unique.
    try{ test("var a;function foo(a){var b;a}",
         "var a;function foo(a$$1){var b;a$$1}");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a;function foo(){var b;a}function boo(){var b;a}",
         "var a;function foo(){var b;a}function boo(){var b$$1;a}");                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function foo(a){var b}" +
         "function boo(a){var b}",
         "function foo(a){var b}" +
         "function boo(a$$1){var b$$1}");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify function expressions are renamed.
    try{ test("var a = function foo(){foo()};var b = function foo(){foo()};",
         "var a = function foo(){foo()};var b = function foo$$1(){foo$$1()};");                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify catch exceptions names are made unique
    try{ test("try { } catch(e) {e;}",
         "try { } catch(e) {e;}");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("try { } catch(e) {e;}; try { } catch(e) {e;}",
         "try { } catch(e) {e;}; try { } catch(e$$1) {e$$1;}");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("try { } catch(e) {e; try { } catch(e) {e;}};",
         "try { } catch(e) {e; try { } catch(e$$1) {e$$1;} }; ");                                           }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify the 1st global redefinition of extern definition is not removed.
    try{ test("/** @suppress {duplicate} */\nvar window;", "var window;");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify the 2nd global redefinition of extern definition is removed.
    test("/** @suppress {duplicate} */\nvar window;" +
         "/** @suppress {duplicate} */\nvar window;", "var window;");                                       /***** ORIGINAL ASSERTION IS HERE *****/

    // Verify local masking extern made unique.
    try{ test("function f() {var window}",
         "function f() {var window$$1}");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testMakeLocalNamesUnique$catena_11() {
    if (!Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
      return;
    }

    // Verify global names are untouched.
    try{ testSame("var a;");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify global names are untouched.
    try{ testSame("a;");                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    // Local names are made unique.
    try{ test("var a;function foo(a){var b;a}",
         "var a;function foo(a$$1){var b;a$$1}");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("var a;function foo(){var b;a}function boo(){var b;a}",
         "var a;function foo(){var b;a}function boo(){var b$$1;a}");                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function foo(a){var b}" +
         "function boo(a){var b}",
         "function foo(a){var b}" +
         "function boo(a$$1){var b$$1}");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify function expressions are renamed.
    try{ test("var a = function foo(){foo()};var b = function foo(){foo()};",
         "var a = function foo(){foo()};var b = function foo$$1(){foo$$1()};");                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify catch exceptions names are made unique
    try{ test("try { } catch(e) {e;}",
         "try { } catch(e) {e;}");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("try { } catch(e) {e;}; try { } catch(e) {e;}",
         "try { } catch(e) {e;}; try { } catch(e$$1) {e$$1;}");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("try { } catch(e) {e; try { } catch(e) {e;}};",
         "try { } catch(e) {e; try { } catch(e$$1) {e$$1;} }; ");                                           }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify the 1st global redefinition of extern definition is not removed.
    try{ test("/** @suppress {duplicate} */\nvar window;", "var window;");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify the 2nd global redefinition of extern definition is removed.
    try{ test("/** @suppress {duplicate} */\nvar window;" +
         "/** @suppress {duplicate} */\nvar window;", "var window;");                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    // Verify local masking extern made unique.
    test("function f() {var window}",
         "function f() {var window$$1}");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/
  }
trace file: test/com/google/javascript/jscomp/NormalizeTest.java
new test num: 12
ori test num: 1
pattern: 0000000000000000000
patches are written to file
running tests...
used time: Finished in 155.68 seconds
Failing tests: 3
	com.google.javascript.jscomp.NormalizeTest::testMakeLocalNamesUnique$catena_10
	com.google.javascript.jscomp.NormalizeTest::testMakeLocalNamesUnique$catena_9
	com.google.javascript.jscomp.NormalizeTest::testDuplicateVarInExterns
processed: 0000000000000000000
pattern: 1000000000000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

patches are written to file
running tests...
used time: Finished in 142.54 seconds
Failing tests: 3
	com.google.javascript.jscomp.NormalizeTest::testMakeLocalNamesUnique$catena_10
	com.google.javascript.jscomp.NormalizeTest::testMakeLocalNamesUnique$catena_9
	com.google.javascript.jscomp.NormalizeTest::testDuplicateVarInExterns
No new failing tests but only 1 hunk
processed: 1000000000000000000
pattern: 0100000000000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000000000000
pattern: 0010000000000000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000000000000
pattern: 0001000000000000000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001000000000000000
pattern: 0000100000000000000
try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000100000000000000
pattern: 0000010000000000000
try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000010000000000000
pattern: 0000001000000000000
try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

patches are written to file
running tests...
used time: Finished in 145.09 seconds
Failing tests: 3
	com.google.javascript.jscomp.NormalizeTest::testMakeLocalNamesUnique$catena_10
	com.google.javascript.jscomp.NormalizeTest::testMakeLocalNamesUnique$catena_9
	com.google.javascript.jscomp.NormalizeTest::testDuplicateVarInExterns
No new failing tests but only 1 hunk
processed: 0000001000000000000
pattern: 0000000100000000000
try to fix hunk: 7
delete from 23 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000100000000000
pattern: 0000000010000000000
try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000010000000000
pattern: 0000000001000000000
try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000001000000000
pattern: 0000000000100000000
try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000100000000
pattern: 0000000000010000000
try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000010000000
pattern: 0000000000001000000
try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000001000000
pattern: 0000000000000100000
try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000000100000
pattern: 0000000000000010000
try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000000010000
pattern: 0000000000000001000
try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000000001000
pattern: 0000000000000000100
try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000000000100
pattern: 0000000000000000010
try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000000000010
pattern: 0000000000000000001
try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000000000001
pattern: 1100000000000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

patches are written to file
running tests...
used time: Finished in 144.41 seconds
Failing tests: 3
	com.google.javascript.jscomp.NormalizeTest::testMakeLocalNamesUnique$catena_10
	com.google.javascript.jscomp.NormalizeTest::testMakeLocalNamesUnique$catena_9
	com.google.javascript.jscomp.NormalizeTest::testDuplicateVarInExterns
Can independently fix []
Could not fix independently
processed: 1100000000000000000
pattern: 1010000000000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010000000000000000
pattern: 1001000000000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001000000000000000
pattern: 1000100000000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000100000000000000
pattern: 1000010000000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000010000000000000
pattern: 1000001000000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

patches are written to file
running tests...
used time: Finished in 139.56 seconds
Failing tests: 3
	com.google.javascript.jscomp.NormalizeTest::testMakeLocalNamesUnique$catena_10
	com.google.javascript.jscomp.NormalizeTest::testMakeLocalNamesUnique$catena_9
	com.google.javascript.jscomp.NormalizeTest::testDuplicateVarInExterns
Can independently fix []
Could not fix independently
processed: 1000001000000000000
pattern: 1000000100000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 7
delete from 23 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000100000000000
pattern: 1000000010000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000010000000000
pattern: 1000000001000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000001000000000
pattern: 1000000000100000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000100000000
pattern: 1000000000010000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000010000000
pattern: 1000000000001000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000001000000
pattern: 1000000000000100000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000000100000
pattern: 1000000000000010000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000000010000
pattern: 1000000000000001000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000000001000
pattern: 1000000000000000100
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000000000100
pattern: 1000000000000000010
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000000000010
pattern: 1000000000000000001
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000000000001
pattern: 0110000000000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

patches are written to file
running tests...
used time: Finished in 142.74 seconds
Failing tests: 3
	com.google.javascript.jscomp.NormalizeTest::testMakeLocalNamesUnique$catena_10
	com.google.javascript.jscomp.NormalizeTest::testMakeLocalNamesUnique$catena_9
	com.google.javascript.jscomp.NormalizeTest::testDuplicateVarInExterns
Can independently fix []
Could not fix independently
processed: 0110000000000000000
pattern: 0101000000000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101000000000000000
pattern: 0100100000000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100100000000000000
pattern: 0100010000000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100010000000000000
pattern: 0100001000000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100001000000000000
pattern: 0100000100000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 7
delete from 23 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000100000000000
pattern: 0100000010000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000010000000000
pattern: 0100000001000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000001000000000
pattern: 0100000000100000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000100000000
pattern: 0100000000010000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000010000000
pattern: 0100000000001000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000001000000
pattern: 0100000000000100000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000000100000
pattern: 0100000000000010000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000000010000
pattern: 0100000000000001000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000000001000
pattern: 0100000000000000100
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000000000100
pattern: 0100000000000000010
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000000000010
pattern: 0100000000000000001
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000000000001
pattern: 0011000000000000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0011000000000000000
pattern: 0010100000000000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010100000000000000
pattern: 0010010000000000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010010000000000000
pattern: 0010001000000000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010001000000000000
pattern: 0010000100000000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 7
delete from 23 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000100000000000
pattern: 0010000010000000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000010000000000
pattern: 0010000001000000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000001000000000
pattern: 0010000000100000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000100000000
pattern: 0010000000010000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000010000000
pattern: 0010000000001000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000001000000
pattern: 0010000000000100000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000000100000
pattern: 0010000000000010000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000000010000
pattern: 0010000000000001000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000000001000
pattern: 0010000000000000100
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000000000100
pattern: 0010000000000000010
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000000000010
pattern: 0010000000000000001
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000000000001
pattern: 0001100000000000000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001100000000000000
pattern: 0001010000000000000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001010000000000000
pattern: 0001001000000000000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001001000000000000
pattern: 0001000100000000000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 7
delete from 23 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001000100000000000
pattern: 0001000010000000000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001000010000000000
pattern: 0001000001000000000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001000001000000000
pattern: 0001000000100000000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001000000100000000
pattern: 0001000000010000000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001000000010000000
pattern: 0001000000001000000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001000000001000000
pattern: 0001000000000100000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001000000000100000
pattern: 0001000000000010000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001000000000010000
pattern: 0001000000000001000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001000000000001000
pattern: 0001000000000000100
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001000000000000100
pattern: 0001000000000000010
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001000000000000010
pattern: 0001000000000000001
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001000000000000001
pattern: 0000110000000000000
try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000110000000000000
pattern: 0000101000000000000
try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000101000000000000
pattern: 0000100100000000000
try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 7
delete from 23 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000100100000000000
pattern: 0000100010000000000
try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000100010000000000
pattern: 0000100001000000000
try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000100001000000000
pattern: 0000100000100000000
try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000100000100000000
pattern: 0000100000010000000
try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000100000010000000
pattern: 0000100000001000000
try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000100000001000000
pattern: 0000100000000100000
try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000100000000100000
pattern: 0000100000000010000
try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000100000000010000
pattern: 0000100000000001000
try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000100000000001000
pattern: 0000100000000000100
try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000100000000000100
pattern: 0000100000000000010
try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000100000000000010
pattern: 0000100000000000001
try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000100000000000001
pattern: 0000011000000000000
try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000011000000000000
pattern: 0000010100000000000
try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 7
delete from 23 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000010100000000000
pattern: 0000010010000000000
try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000010010000000000
pattern: 0000010001000000000
try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000010001000000000
pattern: 0000010000100000000
try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000010000100000000
pattern: 0000010000010000000
try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000010000010000000
pattern: 0000010000001000000
try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000010000001000000
pattern: 0000010000000100000
try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000010000000100000
pattern: 0000010000000010000
try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000010000000010000
pattern: 0000010000000001000
try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000010000000001000
pattern: 0000010000000000100
try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000010000000000100
pattern: 0000010000000000010
try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000010000000000010
pattern: 0000010000000000001
try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000010000000000001
pattern: 0000001100000000000
try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 7
delete from 23 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000001100000000000
pattern: 0000001010000000000
try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000001010000000000
pattern: 0000001001000000000
try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000001001000000000
pattern: 0000001000100000000
try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000001000100000000
pattern: 0000001000010000000
try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000001000010000000
pattern: 0000001000001000000
try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000001000001000000
pattern: 0000001000000100000
try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000001000000100000
pattern: 0000001000000010000
try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000001000000010000
pattern: 0000001000000001000
try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000001000000001000
pattern: 0000001000000000100
try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000001000000000100
pattern: 0000001000000000010
try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000001000000000010
pattern: 0000001000000000001
try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000001000000000001
pattern: 0000000110000000000
try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000110000000000
pattern: 0000000101000000000
try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000101000000000
pattern: 0000000100100000000
try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000100100000000
pattern: 0000000100010000000
try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000100010000000
pattern: 0000000100001000000
try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000100001000000
pattern: 0000000100000100000
try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000100000100000
pattern: 0000000100000010000
try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000100000010000
pattern: 0000000100000001000
try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000100000001000
pattern: 0000000100000000100
try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000100000000100
pattern: 0000000100000000010
try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000100000000010
pattern: 0000000100000000001
try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000100000000001
pattern: 0000000011000000000
try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000011000000000
pattern: 0000000010100000000
try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000010100000000
pattern: 0000000010010000000
try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000010010000000
pattern: 0000000010001000000
try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000010001000000
pattern: 0000000010000100000
try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000010000100000
pattern: 0000000010000010000
try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000010000010000
pattern: 0000000010000001000
try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000010000001000
pattern: 0000000010000000100
try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000010000000100
pattern: 0000000010000000010
try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000010000000010
pattern: 0000000010000000001
try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000010000000001
pattern: 0000000001100000000
try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000001100000000
pattern: 0000000001010000000
try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000001010000000
pattern: 0000000001001000000
try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000001001000000
pattern: 0000000001000100000
try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000001000100000
pattern: 0000000001000010000
try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000001000010000
pattern: 0000000001000001000
try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000001000001000
pattern: 0000000001000000100
try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000001000000100
pattern: 0000000001000000010
try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000001000000010
pattern: 0000000001000000001
try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000001000000001
pattern: 0000000000110000000
try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000110000000
pattern: 0000000000101000000
try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000101000000
pattern: 0000000000100100000
try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000100100000
pattern: 0000000000100010000
try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000100010000
pattern: 0000000000100001000
try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000100001000
pattern: 0000000000100000100
try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000100000100
pattern: 0000000000100000010
try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000100000010
pattern: 0000000000100000001
try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000100000001
pattern: 0000000000011000000
try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000011000000
pattern: 0000000000010100000
try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000010100000
pattern: 0000000000010010000
try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000010010000
pattern: 0000000000010001000
try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000010001000
pattern: 0000000000010000100
try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000010000100
pattern: 0000000000010000010
try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000010000010
pattern: 0000000000010000001
try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000010000001
pattern: 0000000000001100000
try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000001100000
pattern: 0000000000001010000
try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000001010000
pattern: 0000000000001001000
try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000001001000
pattern: 0000000000001000100
try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000001000100
pattern: 0000000000001000010
try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000001000010
pattern: 0000000000001000001
try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000001000001
pattern: 0000000000000110000
try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000000110000
pattern: 0000000000000101000
try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000000101000
pattern: 0000000000000100100
try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000000100100
pattern: 0000000000000100010
try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000000100010
pattern: 0000000000000100001
try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000000100001
pattern: 0000000000000011000
try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000000011000
pattern: 0000000000000010100
try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000000010100
pattern: 0000000000000010010
try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000000010010
pattern: 0000000000000010001
try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000000010001
pattern: 0000000000000001100
try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000000001100
pattern: 0000000000000001010
try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000000001010
pattern: 0000000000000001001
try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000000001001
pattern: 0000000000000000110
try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000000000110
pattern: 0000000000000000101
try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000000000101
pattern: 0000000000000000011
try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000000000000000011
pattern: 1110000000000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1110000000000000000
pattern: 1101000000000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1101000000000000000
pattern: 1100100000000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1100100000000000000
pattern: 1100010000000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1100010000000000000
pattern: 1100001000000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1100001000000000000
pattern: 1100000100000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 7
delete from 23 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1100000100000000000
pattern: 1100000010000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1100000010000000000
pattern: 1100000001000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1100000001000000000
pattern: 1100000000100000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1100000000100000000
pattern: 1100000000010000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1100000000010000000
pattern: 1100000000001000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1100000000001000000
pattern: 1100000000000100000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1100000000000100000
pattern: 1100000000000010000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1100000000000010000
pattern: 1100000000000001000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1100000000000001000
pattern: 1100000000000000100
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1100000000000000100
pattern: 1100000000000000010
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1100000000000000010
pattern: 1100000000000000001
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1100000000000000001
pattern: 1011000000000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1011000000000000000
pattern: 1010100000000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010100000000000000
pattern: 1010010000000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010010000000000000
pattern: 1010001000000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010001000000000000
pattern: 1010000100000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 7
delete from 23 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010000100000000000
pattern: 1010000010000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010000010000000000
pattern: 1010000001000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010000001000000000
pattern: 1010000000100000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010000000100000000
pattern: 1010000000010000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010000000010000000
pattern: 1010000000001000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010000000001000000
pattern: 1010000000000100000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010000000000100000
pattern: 1010000000000010000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010000000000010000
pattern: 1010000000000001000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010000000000001000
pattern: 1010000000000000100
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010000000000000100
pattern: 1010000000000000010
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010000000000000010
pattern: 1010000000000000001
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010000000000000001
pattern: 1001100000000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001100000000000000
pattern: 1001010000000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001010000000000000
pattern: 1001001000000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001001000000000000
pattern: 1001000100000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 7
delete from 23 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001000100000000000
pattern: 1001000010000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001000010000000000
pattern: 1001000001000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001000001000000000
pattern: 1001000000100000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001000000100000000
pattern: 1001000000010000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001000000010000000
pattern: 1001000000001000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001000000001000000
pattern: 1001000000000100000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001000000000100000
pattern: 1001000000000010000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001000000000010000
pattern: 1001000000000001000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001000000000001000
pattern: 1001000000000000100
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001000000000000100
pattern: 1001000000000000010
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001000000000000010
pattern: 1001000000000000001
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001000000000000001
pattern: 1000110000000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000110000000000000
pattern: 1000101000000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000101000000000000
pattern: 1000100100000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 7
delete from 23 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000100100000000000
pattern: 1000100010000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000100010000000000
pattern: 1000100001000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000100001000000000
pattern: 1000100000100000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000100000100000000
pattern: 1000100000010000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000100000010000000
pattern: 1000100000001000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000100000001000000
pattern: 1000100000000100000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000100000000100000
pattern: 1000100000000010000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000100000000010000
pattern: 1000100000000001000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000100000000001000
pattern: 1000100000000000100
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000100000000000100
pattern: 1000100000000000010
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000100000000000010
pattern: 1000100000000000001
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000100000000000001
pattern: 1000011000000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000011000000000000
pattern: 1000010100000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 7
delete from 23 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000010100000000000
pattern: 1000010010000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000010010000000000
pattern: 1000010001000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000010001000000000
pattern: 1000010000100000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000010000100000000
pattern: 1000010000010000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000010000010000000
pattern: 1000010000001000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000010000001000000
pattern: 1000010000000100000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000010000000100000
pattern: 1000010000000010000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000010000000010000
pattern: 1000010000000001000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000010000000001000
pattern: 1000010000000000100
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000010000000000100
pattern: 1000010000000000010
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000010000000000010
pattern: 1000010000000000001
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000010000000000001
pattern: 1000001100000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 7
delete from 23 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000001100000000000
pattern: 1000001010000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000001010000000000
pattern: 1000001001000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000001001000000000
pattern: 1000001000100000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000001000100000000
pattern: 1000001000010000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000001000010000000
pattern: 1000001000001000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000001000001000000
pattern: 1000001000000100000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000001000000100000
pattern: 1000001000000010000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000001000000010000
pattern: 1000001000000001000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000001000000001000
pattern: 1000001000000000100
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000001000000000100
pattern: 1000001000000000010
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000001000000000010
pattern: 1000001000000000001
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000001000000000001
pattern: 1000000110000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000110000000000
pattern: 1000000101000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000101000000000
pattern: 1000000100100000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000100100000000
pattern: 1000000100010000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000100010000000
pattern: 1000000100001000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000100001000000
pattern: 1000000100000100000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000100000100000
pattern: 1000000100000010000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000100000010000
pattern: 1000000100000001000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000100000001000
pattern: 1000000100000000100
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000100000000100
pattern: 1000000100000000010
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000100000000010
pattern: 1000000100000000001
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000100000000001
pattern: 1000000011000000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000011000000000
pattern: 1000000010100000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000010100000000
pattern: 1000000010010000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000010010000000
pattern: 1000000010001000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000010001000000
pattern: 1000000010000100000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000010000100000
pattern: 1000000010000010000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000010000010000
pattern: 1000000010000001000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000010000001000
pattern: 1000000010000000100
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000010000000100
pattern: 1000000010000000010
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000010000000010
pattern: 1000000010000000001
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000010000000001
pattern: 1000000001100000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000001100000000
pattern: 1000000001010000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000001010000000
pattern: 1000000001001000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000001001000000
pattern: 1000000001000100000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000001000100000
pattern: 1000000001000010000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000001000010000
pattern: 1000000001000001000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000001000001000
pattern: 1000000001000000100
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000001000000100
pattern: 1000000001000000010
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000001000000010
pattern: 1000000001000000001
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000001000000001
pattern: 1000000000110000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000110000000
pattern: 1000000000101000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000101000000
pattern: 1000000000100100000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000100100000
pattern: 1000000000100010000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000100010000
pattern: 1000000000100001000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000100001000
pattern: 1000000000100000100
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000100000100
pattern: 1000000000100000010
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000100000010
pattern: 1000000000100000001
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000100000001
pattern: 1000000000011000000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000011000000
pattern: 1000000000010100000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000010100000
pattern: 1000000000010010000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000010010000
pattern: 1000000000010001000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000010001000
pattern: 1000000000010000100
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000010000100
pattern: 1000000000010000010
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000010000010
pattern: 1000000000010000001
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000010000001
pattern: 1000000000001100000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000001100000
pattern: 1000000000001010000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000001010000
pattern: 1000000000001001000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000001001000
pattern: 1000000000001000100
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000001000100
pattern: 1000000000001000010
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000001000010
pattern: 1000000000001000001
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000001000001
pattern: 1000000000000110000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000000110000
pattern: 1000000000000101000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000000101000
pattern: 1000000000000100100
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000000100100
pattern: 1000000000000100010
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000000100010
pattern: 1000000000000100001
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000000100001
pattern: 1000000000000011000
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000000011000
pattern: 1000000000000010100
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000000010100
pattern: 1000000000000010010
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000000010010
pattern: 1000000000000010001
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000000010001
pattern: 1000000000000001100
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000000001100
pattern: 1000000000000001010
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000000001010
pattern: 1000000000000001001
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000000001001
pattern: 1000000000000000110
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000000000110
pattern: 1000000000000000101
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000000000101
pattern: 1000000000000000011
try to fix hunk: 0
insert before 631 with     private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000000000000011
pattern: 0111000000000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0111000000000000000
pattern: 0110100000000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110100000000000000
pattern: 0110010000000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110010000000000000
pattern: 0110001000000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110001000000000000
pattern: 0110000100000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 7
delete from 23 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110000100000000000
pattern: 0110000010000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110000010000000000
pattern: 0110000001000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110000001000000000
pattern: 0110000000100000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110000000100000000
pattern: 0110000000010000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110000000010000000
pattern: 0110000000001000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110000000001000000
pattern: 0110000000000100000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110000000000100000
pattern: 0110000000000010000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110000000000010000
pattern: 0110000000000001000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110000000000001000
pattern: 0110000000000000100
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110000000000000100
pattern: 0110000000000000010
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110000000000000010
pattern: 0110000000000000001
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110000000000000001
pattern: 0101100000000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101100000000000000
pattern: 0101010000000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101010000000000000
pattern: 0101001000000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101001000000000000
pattern: 0101000100000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 7
delete from 23 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101000100000000000
pattern: 0101000010000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101000010000000000
pattern: 0101000001000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101000001000000000
pattern: 0101000000100000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101000000100000000
pattern: 0101000000010000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101000000010000000
pattern: 0101000000001000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101000000001000000
pattern: 0101000000000100000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101000000000100000
pattern: 0101000000000010000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101000000000010000
pattern: 0101000000000001000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101000000000001000
pattern: 0101000000000000100
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101000000000000100
pattern: 0101000000000000010
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101000000000000010
pattern: 0101000000000000001
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101000000000000001
pattern: 0100110000000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100110000000000000
pattern: 0100101000000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100101000000000000
pattern: 0100100100000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 7
delete from 23 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100100100000000000
pattern: 0100100010000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100100010000000000
pattern: 0100100001000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100100001000000000
pattern: 0100100000100000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100100000100000000
pattern: 0100100000010000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100100000010000000
pattern: 0100100000001000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100100000001000000
pattern: 0100100000000100000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100100000000100000
pattern: 0100100000000010000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100100000000010000
pattern: 0100100000000001000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100100000000001000
pattern: 0100100000000000100
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100100000000000100
pattern: 0100100000000000010
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100100000000000010
pattern: 0100100000000000001
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100100000000000001
pattern: 0100011000000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100011000000000000
pattern: 0100010100000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 7
delete from 23 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100010100000000000
pattern: 0100010010000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100010010000000000
pattern: 0100010001000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100010001000000000
pattern: 0100010000100000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100010000100000000
pattern: 0100010000010000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100010000010000000
pattern: 0100010000001000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100010000001000000
pattern: 0100010000000100000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100010000000100000
pattern: 0100010000000010000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100010000000010000
pattern: 0100010000000001000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100010000000001000
pattern: 0100010000000000100
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100010000000000100
pattern: 0100010000000000010
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100010000000000010
pattern: 0100010000000000001
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100010000000000001
pattern: 0100001100000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 7
delete from 23 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100001100000000000
pattern: 0100001010000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100001010000000000
pattern: 0100001001000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100001001000000000
pattern: 0100001000100000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100001000100000000
pattern: 0100001000010000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100001000010000000
pattern: 0100001000001000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100001000001000000
pattern: 0100001000000100000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100001000000100000
pattern: 0100001000000010000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100001000000010000
pattern: 0100001000000001000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100001000000001000
pattern: 0100001000000000100
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100001000000000100
pattern: 0100001000000000010
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100001000000000010
pattern: 0100001000000000001
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100001000000000001
pattern: 0100000110000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000110000000000
pattern: 0100000101000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000101000000000
pattern: 0100000100100000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000100100000000
pattern: 0100000100010000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000100010000000
pattern: 0100000100001000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000100001000000
pattern: 0100000100000100000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000100000100000
pattern: 0100000100000010000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000100000010000
pattern: 0100000100000001000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000100000001000
pattern: 0100000100000000100
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000100000000100
pattern: 0100000100000000010
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000100000000010
pattern: 0100000100000000001
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000100000000001
pattern: 0100000011000000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000011000000000
pattern: 0100000010100000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000010100000000
pattern: 0100000010010000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000010010000000
pattern: 0100000010001000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000010001000000
pattern: 0100000010000100000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000010000100000
pattern: 0100000010000010000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000010000010000
pattern: 0100000010000001000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000010000001000
pattern: 0100000010000000100
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000010000000100
pattern: 0100000010000000010
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000010000000010
pattern: 0100000010000000001
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000010000000001
pattern: 0100000001100000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000001100000000
pattern: 0100000001010000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000001010000000
pattern: 0100000001001000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000001001000000
pattern: 0100000001000100000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000001000100000
pattern: 0100000001000010000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000001000010000
pattern: 0100000001000001000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000001000001000
pattern: 0100000001000000100
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000001000000100
pattern: 0100000001000000010
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000001000000010
pattern: 0100000001000000001
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000001000000001
pattern: 0100000000110000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000110000000
pattern: 0100000000101000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000101000000
pattern: 0100000000100100000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000100100000
pattern: 0100000000100010000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000100010000
pattern: 0100000000100001000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000100001000
pattern: 0100000000100000100
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000100000100
pattern: 0100000000100000010
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000100000010
pattern: 0100000000100000001
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000100000001
pattern: 0100000000011000000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000011000000
pattern: 0100000000010100000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000010100000
pattern: 0100000000010010000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000010010000
pattern: 0100000000010001000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000010001000
pattern: 0100000000010000100
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000010000100
pattern: 0100000000010000010
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000010000010
pattern: 0100000000010000001
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000010000001
pattern: 0100000000001100000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000001100000
pattern: 0100000000001010000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000001010000
pattern: 0100000000001001000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000001001000
pattern: 0100000000001000100
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000001000100
pattern: 0100000000001000010
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000001000010
pattern: 0100000000001000001
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000001000001
pattern: 0100000000000110000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000000110000
pattern: 0100000000000101000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000000101000
pattern: 0100000000000100100
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000000100100
pattern: 0100000000000100010
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000000100010
pattern: 0100000000000100001
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000000100001
pattern: 0100000000000011000
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000000011000
pattern: 0100000000000010100
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000000010100
pattern: 0100000000000010010
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000000010010
pattern: 0100000000000010001
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000000010001
pattern: 0100000000000001100
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000000001100
pattern: 0100000000000001010
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000000001010
pattern: 0100000000000001001
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000000001001
pattern: 0100000000000000110
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000000000110
pattern: 0100000000000000101
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000000000101
pattern: 0100000000000000011
try to fix hunk: 1
replace from 638 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000000000000011
pattern: 0011100000000000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0011100000000000000
pattern: 0011010000000000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0011010000000000000
pattern: 0011001000000000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0011001000000000000
pattern: 0011000100000000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 7
delete from 23 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0011000100000000000
pattern: 0011000010000000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0011000010000000000
pattern: 0011000001000000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0011000001000000000
pattern: 0011000000100000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0011000000100000000
pattern: 0011000000010000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0011000000010000000
pattern: 0011000000001000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0011000000001000000
pattern: 0011000000000100000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0011000000000100000
pattern: 0011000000000010000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0011000000000010000
pattern: 0011000000000001000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0011000000000001000
pattern: 0011000000000000100
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0011000000000000100
pattern: 0011000000000000010
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0011000000000000010
pattern: 0011000000000000001
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0011000000000000001
pattern: 0010110000000000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010110000000000000
pattern: 0010101000000000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010101000000000000
pattern: 0010100100000000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 7
delete from 23 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010100100000000000
pattern: 0010100010000000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010100010000000000
pattern: 0010100001000000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010100001000000000
pattern: 0010100000100000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010100000100000000
pattern: 0010100000010000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010100000010000000
pattern: 0010100000001000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010100000001000000
pattern: 0010100000000100000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010100000000100000
pattern: 0010100000000010000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010100000000010000
pattern: 0010100000000001000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010100000000001000
pattern: 0010100000000000100
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010100000000000100
pattern: 0010100000000000010
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010100000000000010
pattern: 0010100000000000001
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010100000000000001
pattern: 0010011000000000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010011000000000000
pattern: 0010010100000000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 7
delete from 23 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010010100000000000
pattern: 0010010010000000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010010010000000000
pattern: 0010010001000000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010010001000000000
pattern: 0010010000100000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010010000100000000
pattern: 0010010000010000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010010000010000000
pattern: 0010010000001000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010010000001000000
pattern: 0010010000000100000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010010000000100000
pattern: 0010010000000010000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010010000000010000
pattern: 0010010000000001000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010010000000001000
pattern: 0010010000000000100
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010010000000000100
pattern: 0010010000000000010
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010010000000000010
pattern: 0010010000000000001
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010010000000000001
pattern: 0010001100000000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 7
delete from 23 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010001100000000000
pattern: 0010001010000000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010001010000000000
pattern: 0010001001000000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010001001000000000
pattern: 0010001000100000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010001000100000000
pattern: 0010001000010000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010001000010000000
pattern: 0010001000001000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010001000001000000
pattern: 0010001000000100000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010001000000100000
pattern: 0010001000000010000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010001000000010000
pattern: 0010001000000001000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010001000000001000
pattern: 0010001000000000100
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010001000000000100
pattern: 0010001000000000010
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010001000000000010
pattern: 0010001000000000001
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010001000000000001
pattern: 0010000110000000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000110000000000
pattern: 0010000101000000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000101000000000
pattern: 0010000100100000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000100100000000
pattern: 0010000100010000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000100010000000
pattern: 0010000100001000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000100001000000
pattern: 0010000100000100000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000100000100000
pattern: 0010000100000010000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000100000010000
pattern: 0010000100000001000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000100000001000
pattern: 0010000100000000100
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000100000000100
pattern: 0010000100000000010
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000100000000010
pattern: 0010000100000000001
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 7
delete from 23 with range 1
try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000100000000001
pattern: 0010000011000000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000011000000000
pattern: 0010000010100000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000010100000000
pattern: 0010000010010000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000010010000000
pattern: 0010000010001000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000010001000000
pattern: 0010000010000100000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000010000100000
pattern: 0010000010000010000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000010000010000
pattern: 0010000010000001000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000010000001000
pattern: 0010000010000000100
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000010000000100
pattern: 0010000010000000010
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000010000000010
pattern: 0010000010000000001
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000010000000001
pattern: 0010000001100000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000001100000000
pattern: 0010000001010000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000001010000000
pattern: 0010000001001000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000001001000000
pattern: 0010000001000100000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000001000100000
pattern: 0010000001000010000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000001000010000
pattern: 0010000001000001000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000001000001000
pattern: 0010000001000000100
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000001000000100
pattern: 0010000001000000010
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000001000000010
pattern: 0010000001000000001
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000001000000001
pattern: 0010000000110000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000110000000
pattern: 0010000000101000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000101000000
pattern: 0010000000100100000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000100100000
pattern: 0010000000100010000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000100010000
pattern: 0010000000100001000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000100001000
pattern: 0010000000100000100
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000100000100
pattern: 0010000000100000010
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000100000010
pattern: 0010000000100000001
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000100000001
pattern: 0010000000011000000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000011000000
pattern: 0010000000010100000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000010100000
pattern: 0010000000010010000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000010010000
pattern: 0010000000010001000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000010001000
pattern: 0010000000010000100
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000010000100
pattern: 0010000000010000010
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000010000010
pattern: 0010000000010000001
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000010000001
pattern: 0010000000001100000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000001100000
pattern: 0010000000001010000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000001010000
pattern: 0010000000001001000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000001001000
pattern: 0010000000001000100
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000001000100
pattern: 0010000000001000010
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000001000010
pattern: 0010000000001000001
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000001000001
pattern: 0010000000000110000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000000110000
pattern: 0010000000000101000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000000101000
pattern: 0010000000000100100
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000000100100
pattern: 0010000000000100010
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000000100010
pattern: 0010000000000100001
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000000100001
pattern: 0010000000000011000
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000000011000
pattern: 0010000000000010100
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000000010100
pattern: 0010000000000010010
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000000010010
pattern: 0010000000000010001
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000000010001
pattern: 0010000000000001100
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000000001100
pattern: 0010000000000001010
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000000001010
pattern: 0010000000000001001
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000000001001
pattern: 0010000000000000110
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000000000110
pattern: 0010000000000000101
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000000000101
pattern: 0010000000000000011
try to fix hunk: 2
insert before 641 with       Node parent = n.getParent();

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000000000000011
pattern: 0001110000000000000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001110000000000000
pattern: 0001101000000000000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001101000000000000
pattern: 0001100100000000000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 7
delete from 23 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001100100000000000
pattern: 0001100010000000000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001100010000000000
pattern: 0001100001000000000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001100001000000000
pattern: 0001100000100000000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001100000100000000
pattern: 0001100000010000000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001100000010000000
pattern: 0001100000001000000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001100000001000000
pattern: 0001100000000100000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001100000000100000
pattern: 0001100000000010000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001100000000010000
pattern: 0001100000000001000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001100000000001000
pattern: 0001100000000000100
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001100000000000100
pattern: 0001100000000000010
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001100000000000010
pattern: 0001100000000000001
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 4
insert before 647 with         if (v.isExtern() && !input.isExtern()) {
          if (hasOkDuplicateDeclaration.add(v)) {
            return;
          }
        }
      }

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001100000000000001
pattern: 0001011000000000000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001011000000000000
pattern: 0001010100000000000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 7
delete from 23 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001010100000000000
pattern: 0001010010000000000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 8
replace from 95 with range 1 to
        declareVar(fnNameNode);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001010010000000000
pattern: 0001010001000000000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 9
replace from 103 with range 1 to
        declareVar(a);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001010001000000000
pattern: 0001010000100000000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 10
replace from 125 with range 3 to
          declareVar(child);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001010000100000000
pattern: 0001010000010000000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 11
replace from 142 with range 1 to
        declareVar(n.getFirstChild());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001010000010000000
pattern: 0001010000001000000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 12
replace from 154 with range 1 to
        declareVar(var);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001010000001000000
pattern: 0001010000000100000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 13
replace from 180 with range 2 to
        Scope s, String name, Node n, CompilerInput input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001010000000100000
pattern: 0001010000000010000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 14
replace from 189 with range 2 to
        Scope s, String name, Node n, CompilerInput input) {
      Node parent = n.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001010000000010000
pattern: 0001010000000001000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 15
replace from 235 with range 3 to
  private void declareVar(Node n) {
    Preconditions.checkState(n.getType() == Token.NAME);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001010000000001000
pattern: 0001010000000000100
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 16
insert before 239 with     CompilerInput input = compiler.getInput(sourceName);
    String name = n.getString();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001010000000000100
pattern: 0001010000000000010
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 17
replace from 242 with range 1 to
          scope, name, n, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001010000000000010
pattern: 0001010000000000001
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 5
replace from 669 with range 1 to
                input.getName(), n,

try to fix hunk: 18
replace from 244 with range 1 to
      scope.declare(name, n, null, input);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001010000000000001
pattern: 0001001100000000000
try to fix hunk: 3
insert before 643 with       if (v != null && s.isGlobal()) {

try to fix hunk: 6
replace from 681 with range 1 to
        replaceVarWithAssignment(n, parent, parent.getParent());

try to fix hunk: 7
delete from 23 with range 1
patches are written to file
running tests...
EXCEPTION: Inside Exception generator.run() timeout
Traceback (most recent call last):
  File "run.py", line 30, in task
    generator.run()
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 82, in new_function
    return function(*args, **kwargs)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 83, in run
    self._run()
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 109, in _run
    self.taskSingleHunk(task)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 138, in taskSingleHunk
    failure = util.get_failing_tests(self.path, self.build_dir)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/util.py", line 46, in get_failing_tests
    result = runCommand(['defects4j', 'test', '-w', '{}'.format(path)], timeout=timeout)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/util.py", line 9, in runCommand
    finished = subprocess.run(cmd, capture_output=True, cwd=cwd, timeout=timeout)
  File "/usr/lib/python3.8/subprocess.py", line 495, in run
    stdout, stderr = process.communicate(input, timeout=timeout)
  File "/usr/lib/python3.8/subprocess.py", line 1028, in communicate
    stdout, stderr = self._communicate(input, endtime, timeout)
  File "/usr/lib/python3.8/subprocess.py", line 1868, in _communicate
    ready = selector.select(timeout)
  File "/usr/lib/python3.8/selectors.py", line 415, in select
    fd_event_list = self._selector.poll(timeout)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 69, in handler
    _raise_exception(timeout_exception, exception_message)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 47, in _raise_exception
    raise exception(exception_message)
TimeoutError: generator.run() timeout

