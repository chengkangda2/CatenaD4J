{
    "original": {
        "num_of_hunks": 5,
        "0": {
            "file_name": "src/com/google/javascript/jscomp/NodeUtil.java",
            "replaced_with": "      case Token.FUNCTION:\n",
            "patch_type": "insert",
            "next_line_no": 602
        },
        "1": {
            "file_name": "src/com/google/javascript/jscomp/NodeUtil.java",
            "replaced_with": "        Preconditions.checkState(NodeUtil.isAnonymousFunction(n));\n        return false;\n",
            "patch_type": "insert",
            "next_line_no": 604
        },
        "2": {
            "file_name": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
            "replaced_with": "    if (NodeUtil.isGetProp(name) || NodeUtil.isName(name)) {\n",
            "patch_type": "insert",
            "next_line_no": 177
        },
        "3": {
            "file_name": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
            "from_line_no": 179,
            "to_line_no": 181,
            "replaced": "      if (!NodeUtil.isGetProp(name) && !NodeUtil.isName(name)) {\n        return null;\n      }\n",
            "patch_type": "delete",
            "next_line_no": 182
        },
        "4": {
            "file_name": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
            "replaced_with": "    } else if (name.getType() == Token.OR || name.getType() == Token.HOOK) {\n      Node firstVal;\n      if (name.getType() == Token.HOOK) {\n        firstVal = name.getFirstChild().getNext();\n      } else {\n        firstVal = name.getFirstChild();\n      }\n\n      Collection<Definition> defs1 = getCallableDefinitions(definitionProvider,\n                                                            firstVal);\n      Collection<Definition> defs2 = getCallableDefinitions(definitionProvider,\n                                                            firstVal.getNext());\n      if (defs1 != null && defs2 != null) {\n        defs1.addAll(defs2);\n        return defs1;\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n",
            "patch_type": "insert",
            "next_line_no": 198
        }
    },
    "method": {
        "failing_tests": [
            "com.google.javascript.jscomp.ExpresssionDecomposerTest::testCanExposeExpression2",
            "com.google.javascript.jscomp.ExpresssionDecomposerTest::testCanExposeExpression7",
            "com.google.javascript.jscomp.InlineFunctionsTest::testDecomposeAnonymousInCall",
            "com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionFOrGViaHookWithSideEffects",
            "com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionForGorH",
            "com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionFOrG",
            "com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionFOrGViaHook",
            "com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionFOrGWithSideEffects"
        ],
        "com.google.javascript.jscomp.ExpresssionDecomposerTest::testCanExposeExpression2": {
            "file_path": "test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java",
            "check": [
                "Use list matching: .helperCanExposeExpression",
                "Use list matching: .helperCanExposeExpression",
                "Use list matching: .helperCanExposeExpression",
                "Use list matching: .helperCanExposeExpression",
                "Use list matching: .helperCanExposeExpression",
                "Use list matching: .helperCanExposeExpression",
                "Use list matching: .helperCanExposeExpression",
                "Use list matching: .helperCanExposeExpression",
                "Use list matching: .helperCanExposeExpression",
                "Use list matching: .helperCanExposeExpression",
                "Use list matching: .helperCanExposeExpression"
            ],
            "Instance": "Begin: Pos(63, 10)\nEnd: Pos(87, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/ExpresssionDecomposerTest.java\nName: testCanExposeExpression2\nChilds: [StatementAssertion<Begin: Pos(64, 5), End: Pos(65, 51)>,\nStatementAssertion<Begin: Pos(66, 5), End: Pos(67, 55)>,\nStatementAssertion<Begin: Pos(68, 5), End: Pos(69, 59)>,\nStatementAssertion<Begin: Pos(70, 5), End: Pos(71, 57)>,\nStatementAssertion<Begin: Pos(72, 5), End: Pos(73, 61)>,\nStatementAssertion<Begin: Pos(74, 5), End: Pos(75, 61)>,\nStatementAssertion<Begin: Pos(76, 5), End: Pos(77, 73)>,\nStatementAssertion<Begin: Pos(79, 5), End: Pos(80, 60)>,\nStatementAssertion<Begin: Pos(81, 5), End: Pos(82, 60)>,\nStatementAssertion<Begin: Pos(83, 5), End: Pos(84, 63)>,\nStatementAssertion<Begin: Pos(85, 5), End: Pos(86, 73)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/ExpresssionDecomposerTest.java",
            "name": "testCanExposeExpression2",
            "begin": "Pos(63, 10)",
            "end": "Pos(87, 3)",
            "begin_line_no": 63,
            "end_line_no": 87,
            "child": [
                "Begin: Pos(64, 5)\nEnd: Pos(65, 51)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(66, 5)\nEnd: Pos(67, 55)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(68, 5)\nEnd: Pos(69, 59)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(70, 5)\nEnd: Pos(71, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(72, 5)\nEnd: Pos(73, 61)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(74, 5)\nEnd: Pos(75, 61)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(76, 5)\nEnd: Pos(77, 73)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(79, 5)\nEnd: Pos(80, 60)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(81, 5)\nEnd: Pos(82, 60)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(83, 5)\nEnd: Pos(84, 63)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(85, 5)\nEnd: Pos(86, 73)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testCanExposeExpression2$catena_0() {\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"foo()\", \"foo\");                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo()\", \"foo\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"var x = foo()\", \"foo\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"if(foo()){}\", \"foo\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"function (){ return foo();}\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() && 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() || 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() ? 0 : 1\", \"foo\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"(function(a){b = a})(foo())\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testCanExposeExpression2$catena_1() {\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"foo()\", \"foo\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo()\", \"foo\");                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"var x = foo()\", \"foo\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"if(foo()){}\", \"foo\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"function (){ return foo();}\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() && 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() || 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() ? 0 : 1\", \"foo\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"(function(a){b = a})(foo())\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testCanExposeExpression2$catena_2() {\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"foo()\", \"foo\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo()\", \"foo\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"var x = foo()\", \"foo\");                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"if(foo()){}\", \"foo\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"function (){ return foo();}\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() && 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() || 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() ? 0 : 1\", \"foo\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"(function(a){b = a})(foo())\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testCanExposeExpression2$catena_3() {\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"foo()\", \"foo\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo()\", \"foo\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"var x = foo()\", \"foo\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"if(foo()){}\", \"foo\");                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"function (){ return foo();}\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() && 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() || 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() ? 0 : 1\", \"foo\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"(function(a){b = a})(foo())\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testCanExposeExpression2$catena_4() {\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"foo()\", \"foo\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo()\", \"foo\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"var x = foo()\", \"foo\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"if(foo()){}\", \"foo\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"function (){ return foo();}\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() && 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() || 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() ? 0 : 1\", \"foo\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"(function(a){b = a})(foo())\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testCanExposeExpression2$catena_5() {\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"foo()\", \"foo\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo()\", \"foo\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"var x = foo()\", \"foo\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"if(foo()){}\", \"foo\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"function (){ return foo();}\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() && 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() || 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() ? 0 : 1\", \"foo\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"(function(a){b = a})(foo())\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testCanExposeExpression2$catena_6() {\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"foo()\", \"foo\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo()\", \"foo\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"var x = foo()\", \"foo\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"if(foo()){}\", \"foo\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"function (){ return foo();}\", \"foo\");                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() && 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() || 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() ? 0 : 1\", \"foo\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"(function(a){b = a})(foo())\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testCanExposeExpression2$catena_7() {\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"foo()\", \"foo\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo()\", \"foo\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"var x = foo()\", \"foo\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"if(foo()){}\", \"foo\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"function (){ return foo();}\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() && 1\", \"foo\");                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() || 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() ? 0 : 1\", \"foo\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"(function(a){b = a})(foo())\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testCanExposeExpression2$catena_8() {\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"foo()\", \"foo\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo()\", \"foo\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"var x = foo()\", \"foo\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"if(foo()){}\", \"foo\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"function (){ return foo();}\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() && 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() || 1\", \"foo\");                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() ? 0 : 1\", \"foo\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"(function(a){b = a})(foo())\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testCanExposeExpression2$catena_9() {\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"foo()\", \"foo\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo()\", \"foo\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"var x = foo()\", \"foo\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"if(foo()){}\", \"foo\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"function (){ return foo();}\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() && 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() || 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() ? 0 : 1\", \"foo\");                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"(function(a){b = a})(foo())\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testCanExposeExpression2$catena_10() {\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"foo()\", \"foo\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo()\", \"foo\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"var x = foo()\", \"foo\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"if(foo()){}\", \"foo\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"function (){ return foo();}\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() && 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() || 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() ? 0 : 1\", \"foo\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"(function(a){b = a})(foo())\", \"foo\");                                   /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testCanExposeExpression2$catena_0() {\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"foo()\", \"foo\");                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo()\", \"foo\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"var x = foo()\", \"foo\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"if(foo()){}\", \"foo\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"function (){ return foo();}\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() && 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() || 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() ? 0 : 1\", \"foo\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"(function(a){b = a})(foo())\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testCanExposeExpression2$catena_1() {\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"foo()\", \"foo\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo()\", \"foo\");                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"var x = foo()\", \"foo\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"if(foo()){}\", \"foo\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"function (){ return foo();}\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() && 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() || 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() ? 0 : 1\", \"foo\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"(function(a){b = a})(foo())\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testCanExposeExpression2$catena_2() {\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"foo()\", \"foo\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo()\", \"foo\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"var x = foo()\", \"foo\");                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"if(foo()){}\", \"foo\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"function (){ return foo();}\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() && 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() || 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() ? 0 : 1\", \"foo\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"(function(a){b = a})(foo())\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "3": "  public void testCanExposeExpression2$catena_3() {\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"foo()\", \"foo\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo()\", \"foo\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"var x = foo()\", \"foo\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"if(foo()){}\", \"foo\");                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"function (){ return foo();}\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() && 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() || 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() ? 0 : 1\", \"foo\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"(function(a){b = a})(foo())\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "4": "  public void testCanExposeExpression2$catena_4() {\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"foo()\", \"foo\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo()\", \"foo\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"var x = foo()\", \"foo\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"if(foo()){}\", \"foo\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"function (){ return foo();}\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() && 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() || 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() ? 0 : 1\", \"foo\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"(function(a){b = a})(foo())\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "5": "  public void testCanExposeExpression2$catena_5() {\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"foo()\", \"foo\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo()\", \"foo\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"var x = foo()\", \"foo\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"if(foo()){}\", \"foo\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"function (){ return foo();}\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() && 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() || 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() ? 0 : 1\", \"foo\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"(function(a){b = a})(foo())\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "6": "  public void testCanExposeExpression2$catena_6() {\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"foo()\", \"foo\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo()\", \"foo\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"var x = foo()\", \"foo\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"if(foo()){}\", \"foo\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"function (){ return foo();}\", \"foo\");                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() && 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() || 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() ? 0 : 1\", \"foo\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"(function(a){b = a})(foo())\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "7": "  public void testCanExposeExpression2$catena_7() {\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"foo()\", \"foo\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo()\", \"foo\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"var x = foo()\", \"foo\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"if(foo()){}\", \"foo\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"function (){ return foo();}\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() && 1\", \"foo\");                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() || 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() ? 0 : 1\", \"foo\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"(function(a){b = a})(foo())\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "8": "  public void testCanExposeExpression2$catena_8() {\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"foo()\", \"foo\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo()\", \"foo\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"var x = foo()\", \"foo\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"if(foo()){}\", \"foo\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"function (){ return foo();}\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() && 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() || 1\", \"foo\");                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() ? 0 : 1\", \"foo\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"(function(a){b = a})(foo())\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "9": "  public void testCanExposeExpression2$catena_9() {\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"foo()\", \"foo\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo()\", \"foo\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"var x = foo()\", \"foo\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"if(foo()){}\", \"foo\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"function (){ return foo();}\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() && 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() || 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() ? 0 : 1\", \"foo\");                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"(function(a){b = a})(foo())\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "10": "  public void testCanExposeExpression2$catena_10() {\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"foo()\", \"foo\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo()\", \"foo\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"var x = foo()\", \"foo\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"if(foo()){}\", \"foo\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"function (){ return foo();}\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() && 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() || 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() ? 0 : 1\", \"foo\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"(function(a){b = a})(foo())\", \"foo\");                                   /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        },
        "com.google.javascript.jscomp.ExpresssionDecomposerTest::testCanExposeExpression7": {
            "file_path": "test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java",
            "check": [
                "Use list matching: .helperCanExposeAnonymousFunctionExpression"
            ],
            "Instance": "Begin: Pos(136, 10)\nEnd: Pos(148, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/ExpresssionDecomposerTest.java\nName: testCanExposeExpression7\nChilds: [StatementAssertion<Begin: Pos(138, 5), End: Pos(147, 17)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/ExpresssionDecomposerTest.java",
            "name": "testCanExposeExpression7",
            "begin": "Pos(136, 10)",
            "end": "Pos(148, 3)",
            "begin_line_no": 136,
            "end_line_no": 148,
            "child": [
                "Begin: Pos(138, 5)\nEnd: Pos(147, 17)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "com.google.javascript.jscomp.InlineFunctionsTest::testDecomposeAnonymousInCall": {
            "file_path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
            "Instance": "Begin: Pos(1336, 10)\nEnd: Pos(1357, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/InlineFunctionsTest.java\nName: testDecomposeAnonymousInCall\nChilds: [StatementAssertion<Begin: Pos(1337, 5), End: Pos(1356, 10)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/InlineFunctionsTest.java",
            "name": "testDecomposeAnonymousInCall",
            "begin": "Pos(1336, 10)",
            "end": "Pos(1357, 3)",
            "begin_line_no": 1336,
            "end_line_no": 1357,
            "child": [
                "Begin: Pos(1337, 5)\nEnd: Pos(1356, 10)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionFOrGViaHookWithSideEffects": {
            "file_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
            "check": [
                "Use pattern matching: .checkMarkedCalls"
            ],
            "Instance": "Begin: Pos(644, 10)\nEnd: Pos(655, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/PureFunctionIdentifierTest.java\nName: testCallFunctionFOrGViaHookWithSideEffects\nChilds: [StatementAssertion<Begin: Pos(654, 5), End: Pos(654, 71)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
            "name": "testCallFunctionFOrGViaHookWithSideEffects",
            "begin": "Pos(644, 10)",
            "end": "Pos(655, 3)",
            "begin_line_no": 644,
            "end_line_no": 655,
            "child": [
                "Begin: Pos(654, 5)\nEnd: Pos(654, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionForGorH": {
            "file_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
            "check": [
                "Use pattern matching: .checkMarkedCalls"
            ],
            "Instance": "Begin: Pos(621, 10)\nEnd: Pos(629, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/PureFunctionIdentifierTest.java\nName: testCallFunctionForGorH\nChilds: [StatementAssertion<Begin: Pos(628, 5), End: Pos(628, 78)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
            "name": "testCallFunctionForGorH",
            "begin": "Pos(621, 10)",
            "end": "Pos(629, 3)",
            "begin_line_no": 621,
            "end_line_no": 629,
            "child": [
                "Begin: Pos(628, 5)\nEnd: Pos(628, 78)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionFOrG": {
            "file_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
            "check": [
                "Use pattern matching: .checkMarkedCalls"
            ],
            "Instance": "Begin: Pos(603, 10)\nEnd: Pos(610, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/PureFunctionIdentifierTest.java\nName: testCallFunctionFOrG\nChilds: [StatementAssertion<Begin: Pos(609, 5), End: Pos(609, 72)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
            "name": "testCallFunctionFOrG",
            "begin": "Pos(603, 10)",
            "end": "Pos(610, 3)",
            "begin_line_no": 603,
            "end_line_no": 610,
            "child": [
                "Begin: Pos(609, 5)\nEnd: Pos(609, 72)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionFOrGViaHook": {
            "file_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
            "check": [
                "Use pattern matching: .checkMarkedCalls"
            ],
            "Instance": "Begin: Pos(612, 10)\nEnd: Pos(619, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/PureFunctionIdentifierTest.java\nName: testCallFunctionFOrGViaHook\nChilds: [StatementAssertion<Begin: Pos(618, 5), End: Pos(618, 71)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
            "name": "testCallFunctionFOrGViaHook",
            "begin": "Pos(612, 10)",
            "end": "Pos(619, 3)",
            "begin_line_no": 612,
            "end_line_no": 619,
            "child": [
                "Begin: Pos(618, 5)\nEnd: Pos(618, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionFOrGWithSideEffects": {
            "file_path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
            "check": [
                "Use pattern matching: .checkMarkedCalls"
            ],
            "Instance": "Begin: Pos(631, 10)\nEnd: Pos(642, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/PureFunctionIdentifierTest.java\nName: testCallFunctionFOrGWithSideEffects\nChilds: [StatementAssertion<Begin: Pos(641, 5), End: Pos(641, 72)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
            "name": "testCallFunctionFOrGWithSideEffects",
            "begin": "Pos(631, 10)",
            "end": "Pos(642, 3)",
            "begin_line_no": 631,
            "end_line_no": 642,
            "child": [
                "Begin: Pos(641, 5)\nEnd: Pos(641, 72)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        }
    },
    "00101": {
        "failing_tests": [
            "com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionFOrGViaHookWithSideEffects",
            "com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionFOrGWithSideEffects",
            "com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionFOrG",
            "com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionFOrGViaHook",
            "com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionForGorH"
        ]
    },
    "11000": {
        "failing_tests": [
            "com.google.javascript.jscomp.ExpresssionDecomposerTest::testCanExposeExpression7",
            "com.google.javascript.jscomp.ExpresssionDecomposerTest::testCanExposeExpression2$catena_10",
            "com.google.javascript.jscomp.InlineFunctionsTest::testDecomposeAnonymousInCall"
        ]
    }
}