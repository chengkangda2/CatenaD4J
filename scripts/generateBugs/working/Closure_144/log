---
Begin generate bug_id: Closure_144
num_of_hunks: 11
timeout for running: 3600
use working dir: ./working/data/Closure_144
Try to checkout Closure_144
build dir: ['./working/data/Closure_144/build/classes', './working/data/Closure_144/build/test']
init FileManager
trace file: src/com/google/javascript/jscomp/FunctionTypeBuilder.java
trace file: src/com/google/javascript/jscomp/TypedScopeCreator.java
trace file: src/com/google/javascript/rhino/jstype/FunctionBuilder.java
trace file: src/com/google/javascript/rhino/jstype/FunctionType.java
trying to replace old failing tests
edit: replace from 142 range 7 at test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java
to
  public void testRewritePrototypeMethods2$catena_0() throws Exception {
    // type checking on
    enableTypeCheck(CheckLevel.ERROR);                                                                      /***** ORIGINAL ASSERTION IS HERE *****/
    try{ checkTypes(RewritePrototypeMethodTestInput.INPUT,
               RewritePrototypeMethodTestInput.EXPECTED,
               RewritePrototypeMethodTestInput.EXPECTED_TYPE_CHECKING_ON);                                  }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testRewritePrototypeMethods2$catena_1() throws Exception {
    // type checking on
    try{ enableTypeCheck(CheckLevel.ERROR);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    checkTypes(RewritePrototypeMethodTestInput.INPUT,
               RewritePrototypeMethodTestInput.EXPECTED,
               RewritePrototypeMethodTestInput.EXPECTED_TYPE_CHECKING_ON);                                  /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 1244 range 11 at test/com/google/javascript/jscomp/LooseTypeCheckTest.java
to
  public void testScoping10$catena_0() throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope("var a = function b(){};");

    // a declared, b is not
    assertTrue(p.scope.isDeclared("a", false));                                                             /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertFalse(p.scope.isDeclared("b", false));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    // checking that a has the correct assigned type
    try{ assertEquals("function (): undefined",
        p.scope.getVar("a").getType().toString());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testScoping10$catena_1() throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope("var a = function b(){};");

    // a declared, b is not
    try{ assertTrue(p.scope.isDeclared("a", false));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    assertFalse(p.scope.isDeclared("b", false));                                                            /***** ORIGINAL ASSERTION IS HERE *****/

    // checking that a has the correct assigned type
    try{ assertEquals("function (): undefined",
        p.scope.getVar("a").getType().toString());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testScoping10$catena_2() throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope("var a = function b(){};");

    // a declared, b is not
    try{ assertTrue(p.scope.isDeclared("a", false));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(p.scope.isDeclared("b", false));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    // checking that a has the correct assigned type
    assertEquals("function (): undefined",
        p.scope.getVar("a").getType().toString());                                                          /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 5309 range 13 at test/com/google/javascript/jscomp/LooseTypeCheckTest.java
to
  public void testDontAddMethodsIfNoConstructor$catena_0()
      throws Exception {
    Node js1Node = parseAndTypeCheck(
        "function A() {}" +
        "A.prototype = {m1: 5, m2: true}");

    JSType functionAType = js1Node.getFirstChild().getJSType();
    assertEquals("function (): undefined", functionAType.toString());                                       /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertEquals(UNKNOWN_TYPE,
        U2U_FUNCTION_TYPE.getPropertyType("m1"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals(UNKNOWN_TYPE,
        U2U_FUNCTION_TYPE.getPropertyType("m2"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDontAddMethodsIfNoConstructor$catena_1()
      throws Exception {
    Node js1Node = parseAndTypeCheck(
        "function A() {}" +
        "A.prototype = {m1: 5, m2: true}");

    JSType functionAType = js1Node.getFirstChild().getJSType();
    try{ assertEquals("function (): undefined", functionAType.toString());                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    assertEquals(UNKNOWN_TYPE,
        U2U_FUNCTION_TYPE.getPropertyType("m1"));                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertEquals(UNKNOWN_TYPE,
        U2U_FUNCTION_TYPE.getPropertyType("m2"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDontAddMethodsIfNoConstructor$catena_2()
      throws Exception {
    Node js1Node = parseAndTypeCheck(
        "function A() {}" +
        "A.prototype = {m1: 5, m2: true}");

    JSType functionAType = js1Node.getFirstChild().getJSType();
    try{ assertEquals("function (): undefined", functionAType.toString());                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals(UNKNOWN_TYPE,
        U2U_FUNCTION_TYPE.getPropertyType("m1"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    assertEquals(UNKNOWN_TYPE,
        U2U_FUNCTION_TYPE.getPropertyType("m2"));                                                           /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 4266 range 12 at test/com/google/javascript/jscomp/LooseTypeCheckTest.java
to
  public void testBug911118$catena_0() throws Exception {
    // verifying the type assigned to anonymous functions assigned variables
    Scope s = parseAndTypeCheckWithScope("var a = function(){};").scope;
    JSType type = s.getVar("a").getType();
    assertEquals("function (): undefined", type.toString());                                                /***** ORIGINAL ASSERTION IS HERE *****/

    // verifying the bug example
    try{ testTypes("function nullFunction() {};" +
        "var foo = nullFunction;" +
        "foo = function() {};" +
        "foo();");                                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testBug911118$catena_1() throws Exception {
    // verifying the type assigned to anonymous functions assigned variables
    Scope s = parseAndTypeCheckWithScope("var a = function(){};").scope;
    JSType type = s.getVar("a").getType();
    try{ assertEquals("function (): undefined", type.toString());                                           }catch(Throwable __SHOULD_BE_IGNORED){}

    // verifying the bug example
    testTypes("function nullFunction() {};" +
        "var foo = nullFunction;" +
        "foo = function() {};" +
        "foo();");                                                                                          /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 6489 range 18 at test/com/google/javascript/jscomp/LooseTypeCheckTest.java
to
  public void testPrototypePropertyReference$catena_0() throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope(""
        + "/** @constructor */\n"
        + "function Foo() {}\n"
        + "/** @param {number} a */\n"
        + "Foo.prototype.bar = function(a){};\n"
        + "/** @param {Foo} f */\n"
        + "function baz(f) {\n"
        + "  Foo.prototype.bar.call(f, 3);\n"
        + "}");
    assertEquals(0, compiler.getErrorCount());                                                              /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertEquals(0, compiler.getWarningCount());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertTrue(p.scope.getVar("Foo").getType() instanceof FunctionType);                               }catch(Throwable __SHOULD_BE_IGNORED){}
    FunctionType fooType = (FunctionType) p.scope.getVar("Foo").getType();
    try{ assertEquals("function (this:Foo, number): undefined",
                 fooType.getPrototype().getPropertyType("bar").toString());                                 }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testPrototypePropertyReference$catena_1() throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope(""
        + "/** @constructor */\n"
        + "function Foo() {}\n"
        + "/** @param {number} a */\n"
        + "Foo.prototype.bar = function(a){};\n"
        + "/** @param {Foo} f */\n"
        + "function baz(f) {\n"
        + "  Foo.prototype.bar.call(f, 3);\n"
        + "}");
    try{ assertEquals(0, compiler.getErrorCount());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    assertEquals(0, compiler.getWarningCount());                                                            /***** ORIGINAL ASSERTION IS HERE *****/

    try{ assertTrue(p.scope.getVar("Foo").getType() instanceof FunctionType);                               }catch(Throwable __SHOULD_BE_IGNORED){}
    FunctionType fooType = (FunctionType) p.scope.getVar("Foo").getType();
    try{ assertEquals("function (this:Foo, number): undefined",
                 fooType.getPrototype().getPropertyType("bar").toString());                                 }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testPrototypePropertyReference$catena_2() throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope(""
        + "/** @constructor */\n"
        + "function Foo() {}\n"
        + "/** @param {number} a */\n"
        + "Foo.prototype.bar = function(a){};\n"
        + "/** @param {Foo} f */\n"
        + "function baz(f) {\n"
        + "  Foo.prototype.bar.call(f, 3);\n"
        + "}");
    try{ assertEquals(0, compiler.getErrorCount());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals(0, compiler.getWarningCount());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    assertTrue(p.scope.getVar("Foo").getType() instanceof FunctionType);                                    /***** ORIGINAL ASSERTION IS HERE *****/
    FunctionType fooType = (FunctionType) p.scope.getVar("Foo").getType();
    try{ assertEquals("function (this:Foo, number): undefined",
                 fooType.getPrototype().getPropertyType("bar").toString());                                 }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testPrototypePropertyReference$catena_3() throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope(""
        + "/** @constructor */\n"
        + "function Foo() {}\n"
        + "/** @param {number} a */\n"
        + "Foo.prototype.bar = function(a){};\n"
        + "/** @param {Foo} f */\n"
        + "function baz(f) {\n"
        + "  Foo.prototype.bar.call(f, 3);\n"
        + "}");
    try{ assertEquals(0, compiler.getErrorCount());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals(0, compiler.getWarningCount());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertTrue(p.scope.getVar("Foo").getType() instanceof FunctionType);                               }catch(Throwable __SHOULD_BE_IGNORED){}
    FunctionType fooType = (FunctionType) p.scope.getVar("Foo").getType();
    assertEquals("function (this:Foo, number): undefined",
                 fooType.getPrototype().getPropertyType("bar").toString());                                 /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 1224 range 11 at test/com/google/javascript/jscomp/TypeCheckTest.java
to
  public void testScoping10$catena_0() throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope("var a = function b(){};");

    // a declared, b is not
    assertTrue(p.scope.isDeclared("a", false));                                                             /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertFalse(p.scope.isDeclared("b", false));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    // checking that a has the correct assigned type
    try{ assertEquals("function (): undefined",
        p.scope.getVar("a").getType().toString());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testScoping10$catena_1() throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope("var a = function b(){};");

    // a declared, b is not
    try{ assertTrue(p.scope.isDeclared("a", false));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    assertFalse(p.scope.isDeclared("b", false));                                                            /***** ORIGINAL ASSERTION IS HERE *****/

    // checking that a has the correct assigned type
    try{ assertEquals("function (): undefined",
        p.scope.getVar("a").getType().toString());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testScoping10$catena_2() throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope("var a = function b(){};");

    // a declared, b is not
    try{ assertTrue(p.scope.isDeclared("a", false));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(p.scope.isDeclared("b", false));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    // checking that a has the correct assigned type
    assertEquals("function (): undefined",
        p.scope.getVar("a").getType().toString());                                                          /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 5379 range 13 at test/com/google/javascript/jscomp/TypeCheckTest.java
to
  public void testDontAddMethodsIfNoConstructor$catena_0()
      throws Exception {
    Node js1Node = parseAndTypeCheck(
        "function A() {}" +
        "A.prototype = {m1: 5, m2: true}");

    JSType functionAType = js1Node.getFirstChild().getJSType();
    assertEquals("function (): undefined", functionAType.toString());                                       /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertEquals(UNKNOWN_TYPE,
        U2U_FUNCTION_TYPE.getPropertyType("m1"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals(UNKNOWN_TYPE,
        U2U_FUNCTION_TYPE.getPropertyType("m2"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDontAddMethodsIfNoConstructor$catena_1()
      throws Exception {
    Node js1Node = parseAndTypeCheck(
        "function A() {}" +
        "A.prototype = {m1: 5, m2: true}");

    JSType functionAType = js1Node.getFirstChild().getJSType();
    try{ assertEquals("function (): undefined", functionAType.toString());                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    assertEquals(UNKNOWN_TYPE,
        U2U_FUNCTION_TYPE.getPropertyType("m1"));                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertEquals(UNKNOWN_TYPE,
        U2U_FUNCTION_TYPE.getPropertyType("m2"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDontAddMethodsIfNoConstructor$catena_2()
      throws Exception {
    Node js1Node = parseAndTypeCheck(
        "function A() {}" +
        "A.prototype = {m1: 5, m2: true}");

    JSType functionAType = js1Node.getFirstChild().getJSType();
    try{ assertEquals("function (): undefined", functionAType.toString());                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals(UNKNOWN_TYPE,
        U2U_FUNCTION_TYPE.getPropertyType("m1"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    assertEquals(UNKNOWN_TYPE,
        U2U_FUNCTION_TYPE.getPropertyType("m2"));                                                           /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 4336 range 12 at test/com/google/javascript/jscomp/TypeCheckTest.java
to
  public void testBug911118$catena_0() throws Exception {
    // verifying the type assigned to function expressions assigned variables
    Scope s = parseAndTypeCheckWithScope("var a = function(){};").scope;
    JSType type = s.getVar("a").getType();
    assertEquals("function (): undefined", type.toString());                                                /***** ORIGINAL ASSERTION IS HERE *****/

    // verifying the bug example
    try{ testTypes("function nullFunction() {};" +
        "var foo = nullFunction;" +
        "foo = function() {};" +
        "foo();");                                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testBug911118$catena_1() throws Exception {
    // verifying the type assigned to function expressions assigned variables
    Scope s = parseAndTypeCheckWithScope("var a = function(){};").scope;
    JSType type = s.getVar("a").getType();
    try{ assertEquals("function (): undefined", type.toString());                                           }catch(Throwable __SHOULD_BE_IGNORED){}

    // verifying the bug example
    testTypes("function nullFunction() {};" +
        "var foo = nullFunction;" +
        "foo = function() {};" +
        "foo();");                                                                                          /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 6559 range 18 at test/com/google/javascript/jscomp/TypeCheckTest.java
to
  public void testPrototypePropertyReference$catena_0() throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope(""
        + "/** @constructor */\n"
        + "function Foo() {}\n"
        + "/** @param {number} a */\n"
        + "Foo.prototype.bar = function(a){};\n"
        + "/** @param {Foo} f */\n"
        + "function baz(f) {\n"
        + "  Foo.prototype.bar.call(f, 3);\n"
        + "}");
    assertEquals(0, compiler.getErrorCount());                                                              /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertEquals(0, compiler.getWarningCount());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertTrue(p.scope.getVar("Foo").getType() instanceof FunctionType);                               }catch(Throwable __SHOULD_BE_IGNORED){}
    FunctionType fooType = (FunctionType) p.scope.getVar("Foo").getType();
    try{ assertEquals("function (this:Foo, number): undefined",
                 fooType.getPrototype().getPropertyType("bar").toString());                                 }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testPrototypePropertyReference$catena_1() throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope(""
        + "/** @constructor */\n"
        + "function Foo() {}\n"
        + "/** @param {number} a */\n"
        + "Foo.prototype.bar = function(a){};\n"
        + "/** @param {Foo} f */\n"
        + "function baz(f) {\n"
        + "  Foo.prototype.bar.call(f, 3);\n"
        + "}");
    try{ assertEquals(0, compiler.getErrorCount());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    assertEquals(0, compiler.getWarningCount());                                                            /***** ORIGINAL ASSERTION IS HERE *****/

    try{ assertTrue(p.scope.getVar("Foo").getType() instanceof FunctionType);                               }catch(Throwable __SHOULD_BE_IGNORED){}
    FunctionType fooType = (FunctionType) p.scope.getVar("Foo").getType();
    try{ assertEquals("function (this:Foo, number): undefined",
                 fooType.getPrototype().getPropertyType("bar").toString());                                 }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testPrototypePropertyReference$catena_2() throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope(""
        + "/** @constructor */\n"
        + "function Foo() {}\n"
        + "/** @param {number} a */\n"
        + "Foo.prototype.bar = function(a){};\n"
        + "/** @param {Foo} f */\n"
        + "function baz(f) {\n"
        + "  Foo.prototype.bar.call(f, 3);\n"
        + "}");
    try{ assertEquals(0, compiler.getErrorCount());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals(0, compiler.getWarningCount());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    assertTrue(p.scope.getVar("Foo").getType() instanceof FunctionType);                                    /***** ORIGINAL ASSERTION IS HERE *****/
    FunctionType fooType = (FunctionType) p.scope.getVar("Foo").getType();
    try{ assertEquals("function (this:Foo, number): undefined",
                 fooType.getPrototype().getPropertyType("bar").toString());                                 }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testPrototypePropertyReference$catena_3() throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope(""
        + "/** @constructor */\n"
        + "function Foo() {}\n"
        + "/** @param {number} a */\n"
        + "Foo.prototype.bar = function(a){};\n"
        + "/** @param {Foo} f */\n"
        + "function baz(f) {\n"
        + "  Foo.prototype.bar.call(f, 3);\n"
        + "}");
    try{ assertEquals(0, compiler.getErrorCount());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals(0, compiler.getWarningCount());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertTrue(p.scope.getVar("Foo").getType() instanceof FunctionType);                               }catch(Throwable __SHOULD_BE_IGNORED){}
    FunctionType fooType = (FunctionType) p.scope.getVar("Foo").getType();
    assertEquals("function (this:Foo, number): undefined",
                 fooType.getPrototype().getPropertyType("bar").toString());                                 /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 549 range 8 at test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
to
  public void testConstructorNode$catena_0() {
    testSame("var goog = {}; /** @constructor */ goog.Foo = function() {};");                               /***** ORIGINAL ASSERTION IS HERE *****/

    ObjectType ctor = (ObjectType) (findNameType("goog.Foo", globalScope));
    try{ assertNotNull(ctor);                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(ctor.isConstructor());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("function (this:goog.Foo): undefined", ctor.toString());                              }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testConstructorNode$catena_1() {
    try{ testSame("var goog = {}; /** @constructor */ goog.Foo = function() {};");                          }catch(Throwable __SHOULD_BE_IGNORED){}

    ObjectType ctor = (ObjectType) (findNameType("goog.Foo", globalScope));
    assertNotNull(ctor);                                                                                    /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertTrue(ctor.isConstructor());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("function (this:goog.Foo): undefined", ctor.toString());                              }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testConstructorNode$catena_2() {
    try{ testSame("var goog = {}; /** @constructor */ goog.Foo = function() {};");                          }catch(Throwable __SHOULD_BE_IGNORED){}

    ObjectType ctor = (ObjectType) (findNameType("goog.Foo", globalScope));
    try{ assertNotNull(ctor);                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    assertTrue(ctor.isConstructor());                                                                       /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertEquals("function (this:goog.Foo): undefined", ctor.toString());                              }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testConstructorNode$catena_3() {
    try{ testSame("var goog = {}; /** @constructor */ goog.Foo = function() {};");                          }catch(Throwable __SHOULD_BE_IGNORED){}

    ObjectType ctor = (ObjectType) (findNameType("goog.Foo", globalScope));
    try{ assertNotNull(ctor);                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(ctor.isConstructor());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    assertEquals("function (this:goog.Foo): undefined", ctor.toString());                                   /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 330 range 20 at test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
to
  public void testPropertiesOnInterface$catena_0() throws Exception {
    testSame("/** @interface */ var I = function() {};" +
        "/** @type {number} */ I.prototype.bar;" +
        "I.prototype.baz = function(){};");                                                                 /***** ORIGINAL ASSERTION IS HERE *****/

    Var i = globalScope.getVar("I");
    try{ assertEquals("function (this:I): ?", i.getType().toString());                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(i.getType().isInterface());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    ObjectType iPrototype = (ObjectType)
        ((ObjectType) i.getType()).getPropertyType("prototype");
    try{ assertEquals("I.prototype", iPrototype.toString());                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(iPrototype.isFunctionPrototypeType());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertEquals("number", iPrototype.getPropertyType("bar").toString());                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("function (this:I): undefined",
        iPrototype.getPropertyType("baz").toString());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertEquals(iPrototype, globalScope.getVar("I.prototype").getType());                             }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testPropertiesOnInterface$catena_1() throws Exception {
    try{ testSame("/** @interface */ var I = function() {};" +
        "/** @type {number} */ I.prototype.bar;" +
        "I.prototype.baz = function(){};");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    Var i = globalScope.getVar("I");
    assertEquals("function (this:I): ?", i.getType().toString());                                           /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertTrue(i.getType().isInterface());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    ObjectType iPrototype = (ObjectType)
        ((ObjectType) i.getType()).getPropertyType("prototype");
    try{ assertEquals("I.prototype", iPrototype.toString());                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(iPrototype.isFunctionPrototypeType());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertEquals("number", iPrototype.getPropertyType("bar").toString());                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("function (this:I): undefined",
        iPrototype.getPropertyType("baz").toString());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertEquals(iPrototype, globalScope.getVar("I.prototype").getType());                             }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testPropertiesOnInterface$catena_2() throws Exception {
    try{ testSame("/** @interface */ var I = function() {};" +
        "/** @type {number} */ I.prototype.bar;" +
        "I.prototype.baz = function(){};");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    Var i = globalScope.getVar("I");
    try{ assertEquals("function (this:I): ?", i.getType().toString());                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    assertTrue(i.getType().isInterface());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/

    ObjectType iPrototype = (ObjectType)
        ((ObjectType) i.getType()).getPropertyType("prototype");
    try{ assertEquals("I.prototype", iPrototype.toString());                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(iPrototype.isFunctionPrototypeType());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertEquals("number", iPrototype.getPropertyType("bar").toString());                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("function (this:I): undefined",
        iPrototype.getPropertyType("baz").toString());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertEquals(iPrototype, globalScope.getVar("I.prototype").getType());                             }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testPropertiesOnInterface$catena_3() throws Exception {
    try{ testSame("/** @interface */ var I = function() {};" +
        "/** @type {number} */ I.prototype.bar;" +
        "I.prototype.baz = function(){};");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    Var i = globalScope.getVar("I");
    try{ assertEquals("function (this:I): ?", i.getType().toString());                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(i.getType().isInterface());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    ObjectType iPrototype = (ObjectType)
        ((ObjectType) i.getType()).getPropertyType("prototype");
    assertEquals("I.prototype", iPrototype.toString());                                                     /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertTrue(iPrototype.isFunctionPrototypeType());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertEquals("number", iPrototype.getPropertyType("bar").toString());                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("function (this:I): undefined",
        iPrototype.getPropertyType("baz").toString());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertEquals(iPrototype, globalScope.getVar("I.prototype").getType());                             }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testPropertiesOnInterface$catena_4() throws Exception {
    try{ testSame("/** @interface */ var I = function() {};" +
        "/** @type {number} */ I.prototype.bar;" +
        "I.prototype.baz = function(){};");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    Var i = globalScope.getVar("I");
    try{ assertEquals("function (this:I): ?", i.getType().toString());                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(i.getType().isInterface());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    ObjectType iPrototype = (ObjectType)
        ((ObjectType) i.getType()).getPropertyType("prototype");
    try{ assertEquals("I.prototype", iPrototype.toString());                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    assertTrue(iPrototype.isFunctionPrototypeType());                                                       /***** ORIGINAL ASSERTION IS HERE *****/

    try{ assertEquals("number", iPrototype.getPropertyType("bar").toString());                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("function (this:I): undefined",
        iPrototype.getPropertyType("baz").toString());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertEquals(iPrototype, globalScope.getVar("I.prototype").getType());                             }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testPropertiesOnInterface$catena_5() throws Exception {
    try{ testSame("/** @interface */ var I = function() {};" +
        "/** @type {number} */ I.prototype.bar;" +
        "I.prototype.baz = function(){};");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    Var i = globalScope.getVar("I");
    try{ assertEquals("function (this:I): ?", i.getType().toString());                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(i.getType().isInterface());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    ObjectType iPrototype = (ObjectType)
        ((ObjectType) i.getType()).getPropertyType("prototype");
    try{ assertEquals("I.prototype", iPrototype.toString());                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(iPrototype.isFunctionPrototypeType());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    assertEquals("number", iPrototype.getPropertyType("bar").toString());                                   /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertEquals("function (this:I): undefined",
        iPrototype.getPropertyType("baz").toString());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertEquals(iPrototype, globalScope.getVar("I.prototype").getType());                             }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testPropertiesOnInterface$catena_6() throws Exception {
    try{ testSame("/** @interface */ var I = function() {};" +
        "/** @type {number} */ I.prototype.bar;" +
        "I.prototype.baz = function(){};");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    Var i = globalScope.getVar("I");
    try{ assertEquals("function (this:I): ?", i.getType().toString());                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(i.getType().isInterface());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    ObjectType iPrototype = (ObjectType)
        ((ObjectType) i.getType()).getPropertyType("prototype");
    try{ assertEquals("I.prototype", iPrototype.toString());                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(iPrototype.isFunctionPrototypeType());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertEquals("number", iPrototype.getPropertyType("bar").toString());                              }catch(Throwable __SHOULD_BE_IGNORED){}
    assertEquals("function (this:I): undefined",
        iPrototype.getPropertyType("baz").toString());                                                      /***** ORIGINAL ASSERTION IS HERE *****/

    try{ assertEquals(iPrototype, globalScope.getVar("I.prototype").getType());                             }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testPropertiesOnInterface$catena_7() throws Exception {
    try{ testSame("/** @interface */ var I = function() {};" +
        "/** @type {number} */ I.prototype.bar;" +
        "I.prototype.baz = function(){};");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    Var i = globalScope.getVar("I");
    try{ assertEquals("function (this:I): ?", i.getType().toString());                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(i.getType().isInterface());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    ObjectType iPrototype = (ObjectType)
        ((ObjectType) i.getType()).getPropertyType("prototype");
    try{ assertEquals("I.prototype", iPrototype.toString());                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(iPrototype.isFunctionPrototypeType());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertEquals("number", iPrototype.getPropertyType("bar").toString());                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("function (this:I): undefined",
        iPrototype.getPropertyType("baz").toString());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    assertEquals(iPrototype, globalScope.getVar("I.prototype").getType());                                  /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 254 range 18 at test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
to
  public void testMethodBeforeFunction$catena_0() throws Exception {
    testSame(
        "var y = Window.prototype;" +
        "Window.prototype.alert = function(message) {};" +
        "/** @constructor */ function Window() {}\n" +
        "var window = new Window(); \n" +
        "var x = window;");                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/
    ObjectType x = (ObjectType) findNameType("x", globalScope);
    try{ assertEquals("Window", x.toString());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(x.getImplicitPrototype().hasOwnProperty("alert"));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("function (this:Window, ?): undefined",
        x.getPropertyType("alert").toString());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(x.isPropertyTypeDeclared("alert"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    ObjectType y = (ObjectType) findNameType("y", globalScope);
    try{ assertEquals("function (this:Window, ?): undefined",
        y.getPropertyType("alert").toString());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testMethodBeforeFunction$catena_1() throws Exception {
    try{ testSame(
        "var y = Window.prototype;" +
        "Window.prototype.alert = function(message) {};" +
        "/** @constructor */ function Window() {}\n" +
        "var window = new Window(); \n" +
        "var x = window;");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    ObjectType x = (ObjectType) findNameType("x", globalScope);
    assertEquals("Window", x.toString());                                                                   /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertTrue(x.getImplicitPrototype().hasOwnProperty("alert"));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("function (this:Window, ?): undefined",
        x.getPropertyType("alert").toString());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(x.isPropertyTypeDeclared("alert"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    ObjectType y = (ObjectType) findNameType("y", globalScope);
    try{ assertEquals("function (this:Window, ?): undefined",
        y.getPropertyType("alert").toString());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testMethodBeforeFunction$catena_2() throws Exception {
    try{ testSame(
        "var y = Window.prototype;" +
        "Window.prototype.alert = function(message) {};" +
        "/** @constructor */ function Window() {}\n" +
        "var window = new Window(); \n" +
        "var x = window;");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    ObjectType x = (ObjectType) findNameType("x", globalScope);
    try{ assertEquals("Window", x.toString());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    assertTrue(x.getImplicitPrototype().hasOwnProperty("alert"));                                           /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertEquals("function (this:Window, ?): undefined",
        x.getPropertyType("alert").toString());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(x.isPropertyTypeDeclared("alert"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    ObjectType y = (ObjectType) findNameType("y", globalScope);
    try{ assertEquals("function (this:Window, ?): undefined",
        y.getPropertyType("alert").toString());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testMethodBeforeFunction$catena_3() throws Exception {
    try{ testSame(
        "var y = Window.prototype;" +
        "Window.prototype.alert = function(message) {};" +
        "/** @constructor */ function Window() {}\n" +
        "var window = new Window(); \n" +
        "var x = window;");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    ObjectType x = (ObjectType) findNameType("x", globalScope);
    try{ assertEquals("Window", x.toString());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(x.getImplicitPrototype().hasOwnProperty("alert"));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    assertEquals("function (this:Window, ?): undefined",
        x.getPropertyType("alert").toString());                                                             /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertTrue(x.isPropertyTypeDeclared("alert"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    ObjectType y = (ObjectType) findNameType("y", globalScope);
    try{ assertEquals("function (this:Window, ?): undefined",
        y.getPropertyType("alert").toString());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testMethodBeforeFunction$catena_4() throws Exception {
    try{ testSame(
        "var y = Window.prototype;" +
        "Window.prototype.alert = function(message) {};" +
        "/** @constructor */ function Window() {}\n" +
        "var window = new Window(); \n" +
        "var x = window;");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    ObjectType x = (ObjectType) findNameType("x", globalScope);
    try{ assertEquals("Window", x.toString());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(x.getImplicitPrototype().hasOwnProperty("alert"));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("function (this:Window, ?): undefined",
        x.getPropertyType("alert").toString());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    assertTrue(x.isPropertyTypeDeclared("alert"));                                                          /***** ORIGINAL ASSERTION IS HERE *****/

    ObjectType y = (ObjectType) findNameType("y", globalScope);
    try{ assertEquals("function (this:Window, ?): undefined",
        y.getPropertyType("alert").toString());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testMethodBeforeFunction$catena_5() throws Exception {
    try{ testSame(
        "var y = Window.prototype;" +
        "Window.prototype.alert = function(message) {};" +
        "/** @constructor */ function Window() {}\n" +
        "var window = new Window(); \n" +
        "var x = window;");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    ObjectType x = (ObjectType) findNameType("x", globalScope);
    try{ assertEquals("Window", x.toString());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(x.getImplicitPrototype().hasOwnProperty("alert"));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("function (this:Window, ?): undefined",
        x.getPropertyType("alert").toString());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(x.isPropertyTypeDeclared("alert"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    ObjectType y = (ObjectType) findNameType("y", globalScope);
    assertEquals("function (this:Window, ?): undefined",
        y.getPropertyType("alert").toString());                                                             /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 96 range 10 at test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
to
  public void testConstructorProperty$catena_0() {
    testSame("var foo = {}; /** @constructor */ foo.Bar = function() {};");                                 /***** ORIGINAL ASSERTION IS HERE *****/
    ObjectType foo = (ObjectType) findNameType("foo", globalScope);
    try{ assertTrue(foo.hasProperty("Bar"));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(foo.isPropertyTypeInferred("Bar"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    JSType fooBar = foo.getPropertyType("Bar");
    try{ assertEquals("function (this:foo.Bar): undefined", fooBar.toString());                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals(Sets.newHashSet(foo), registry.getTypesWithProperty("Bar"));                          }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testConstructorProperty$catena_1() {
    try{ testSame("var foo = {}; /** @constructor */ foo.Bar = function() {};");                            }catch(Throwable __SHOULD_BE_IGNORED){}
    ObjectType foo = (ObjectType) findNameType("foo", globalScope);
    assertTrue(foo.hasProperty("Bar"));                                                                     /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertFalse(foo.isPropertyTypeInferred("Bar"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    JSType fooBar = foo.getPropertyType("Bar");
    try{ assertEquals("function (this:foo.Bar): undefined", fooBar.toString());                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals(Sets.newHashSet(foo), registry.getTypesWithProperty("Bar"));                          }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testConstructorProperty$catena_2() {
    try{ testSame("var foo = {}; /** @constructor */ foo.Bar = function() {};");                            }catch(Throwable __SHOULD_BE_IGNORED){}
    ObjectType foo = (ObjectType) findNameType("foo", globalScope);
    try{ assertTrue(foo.hasProperty("Bar"));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    assertFalse(foo.isPropertyTypeInferred("Bar"));                                                         /***** ORIGINAL ASSERTION IS HERE *****/

    JSType fooBar = foo.getPropertyType("Bar");
    try{ assertEquals("function (this:foo.Bar): undefined", fooBar.toString());                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals(Sets.newHashSet(foo), registry.getTypesWithProperty("Bar"));                          }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testConstructorProperty$catena_3() {
    try{ testSame("var foo = {}; /** @constructor */ foo.Bar = function() {};");                            }catch(Throwable __SHOULD_BE_IGNORED){}
    ObjectType foo = (ObjectType) findNameType("foo", globalScope);
    try{ assertTrue(foo.hasProperty("Bar"));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(foo.isPropertyTypeInferred("Bar"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    JSType fooBar = foo.getPropertyType("Bar");
    assertEquals("function (this:foo.Bar): undefined", fooBar.toString());                                  /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertEquals(Sets.newHashSet(foo), registry.getTypesWithProperty("Bar"));                          }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testConstructorProperty$catena_4() {
    try{ testSame("var foo = {}; /** @constructor */ foo.Bar = function() {};");                            }catch(Throwable __SHOULD_BE_IGNORED){}
    ObjectType foo = (ObjectType) findNameType("foo", globalScope);
    try{ assertTrue(foo.hasProperty("Bar"));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(foo.isPropertyTypeInferred("Bar"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    JSType fooBar = foo.getPropertyType("Bar");
    try{ assertEquals("function (this:foo.Bar): undefined", fooBar.toString());                             }catch(Throwable __SHOULD_BE_IGNORED){}
    assertEquals(Sets.newHashSet(foo), registry.getTypesWithProperty("Bar"));                               /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 688 range 6 at test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
to
  public void testReturnTypeInference1$catena_0() {
    testSame("function f() {}");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertEquals(
        "function (): undefined",
        findNameType("f", globalScope).toString());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testReturnTypeInference1$catena_1() {
    try{ testSame("function f() {}");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    assertEquals(
        "function (): undefined",
        findNameType("f", globalScope).toString());                                                         /***** ORIGINAL ASSERTION IS HERE *****/
  }
trace file: test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java
trace file: test/com/google/javascript/jscomp/LooseTypeCheckTest.java
trace file: test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
trace file: test/com/google/javascript/jscomp/TypeCheckTest.java
new test num: 51
ori test num: 70
pattern: 00000000000
patches are written to file
running tests...
used time: Finished in 140.74 seconds
Failing tests: 85
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsAssign
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMember
	com.google.javascript.jscomp.CodePrinterTest::testOptionalTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testTempConstructor
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher1
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher2
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsImplements
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsNamespace
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotations
	com.google.javascript.jscomp.CodePrinterTest::testVariableArgumentsTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testEmitUnknownParamTypesAsAllType
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMemberSubclass
	com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2$catena_1
	com.google.javascript.jscomp.DisambiguatePropertiesTest::testStaticProperty
	com.google.javascript.jscomp.ExternExportsPassTest::testExportDontEmitPrototypePathPrefix
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolWithConstructor
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolDefinedInVar
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbol
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple2
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple3
	com.google.javascript.jscomp.ExternExportsPassTest::testExportProperty
	com.google.javascript.jscomp.LooseTypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.LooseTypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.LooseTypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.LooseTypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.TypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn1
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn2
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn3
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn4
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn6
	com.google.javascript.jscomp.TypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.TypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.TypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.TypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface$catena_6
	com.google.javascript.jscomp.TypedScopeCreatorTest::testReturnTypeInference1$catena_1
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorNode$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorProperty$catena_3
processed: 00000000000
pattern: 00000000001
try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
used time: Finished in 119.18 seconds
Failing tests: 85
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsAssign
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMember
	com.google.javascript.jscomp.CodePrinterTest::testOptionalTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testTempConstructor
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher1
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher2
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsImplements
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsNamespace
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotations
	com.google.javascript.jscomp.CodePrinterTest::testVariableArgumentsTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testEmitUnknownParamTypesAsAllType
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMemberSubclass
	com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2$catena_1
	com.google.javascript.jscomp.DisambiguatePropertiesTest::testStaticProperty
	com.google.javascript.jscomp.ExternExportsPassTest::testExportDontEmitPrototypePathPrefix
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolWithConstructor
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolDefinedInVar
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbol
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple2
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple3
	com.google.javascript.jscomp.ExternExportsPassTest::testExportProperty
	com.google.javascript.jscomp.LooseTypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.LooseTypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.LooseTypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.LooseTypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.TypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn1
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn2
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn3
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn4
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn6
	com.google.javascript.jscomp.TypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.TypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.TypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.TypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface$catena_6
	com.google.javascript.jscomp.TypedScopeCreatorTest::testReturnTypeInference1$catena_1
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorNode$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorProperty$catena_3
No new failing tests but only 1 hunk
processed: 00000000001
pattern: 00000000010
try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
used time: Finished in 124.62 seconds
Failing tests: 85
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsAssign
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMember
	com.google.javascript.jscomp.CodePrinterTest::testOptionalTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testTempConstructor
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher1
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher2
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsImplements
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsNamespace
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotations
	com.google.javascript.jscomp.CodePrinterTest::testVariableArgumentsTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testEmitUnknownParamTypesAsAllType
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMemberSubclass
	com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2$catena_1
	com.google.javascript.jscomp.DisambiguatePropertiesTest::testStaticProperty
	com.google.javascript.jscomp.ExternExportsPassTest::testExportDontEmitPrototypePathPrefix
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolWithConstructor
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolDefinedInVar
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbol
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple2
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple3
	com.google.javascript.jscomp.ExternExportsPassTest::testExportProperty
	com.google.javascript.jscomp.LooseTypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.LooseTypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.LooseTypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.LooseTypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.TypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn1
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn2
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn3
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn4
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn6
	com.google.javascript.jscomp.TypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.TypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.TypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.TypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface$catena_6
	com.google.javascript.jscomp.TypedScopeCreatorTest::testReturnTypeInference1$catena_1
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorNode$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorProperty$catena_3
No new failing tests but only 1 hunk
processed: 00000000010
pattern: 00000000100
try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000000100
pattern: 00000001000
try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000001000
pattern: 00000010000
try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

patches are written to file
running tests...
used time: Finished in 125.80 seconds
Failing tests: 85
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsAssign
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMember
	com.google.javascript.jscomp.CodePrinterTest::testOptionalTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testTempConstructor
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher1
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher2
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsImplements
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsNamespace
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotations
	com.google.javascript.jscomp.CodePrinterTest::testVariableArgumentsTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testEmitUnknownParamTypesAsAllType
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMemberSubclass
	com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2$catena_1
	com.google.javascript.jscomp.DisambiguatePropertiesTest::testStaticProperty
	com.google.javascript.jscomp.ExternExportsPassTest::testExportDontEmitPrototypePathPrefix
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolWithConstructor
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolDefinedInVar
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbol
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple2
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple3
	com.google.javascript.jscomp.ExternExportsPassTest::testExportProperty
	com.google.javascript.jscomp.LooseTypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.LooseTypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.LooseTypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.LooseTypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.TypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn1
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn2
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn3
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn4
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn6
	com.google.javascript.jscomp.TypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.TypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.TypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.TypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface$catena_6
	com.google.javascript.jscomp.TypedScopeCreatorTest::testReturnTypeInference1$catena_1
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorNode$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorProperty$catena_3
No new failing tests but only 1 hunk
processed: 00000010000
pattern: 00000100000
try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000100000
pattern: 00001000000
try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001000000
pattern: 00010000000
try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010000000
pattern: 00100000000
try to fix hunk: 2
insert before 203 with         returnType != null &&

patches are written to file
running tests...
used time: Finished in 131.81 seconds
Failing tests: 85
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsAssign
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMember
	com.google.javascript.jscomp.CodePrinterTest::testOptionalTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testTempConstructor
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher1
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher2
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsImplements
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsNamespace
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotations
	com.google.javascript.jscomp.CodePrinterTest::testVariableArgumentsTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testEmitUnknownParamTypesAsAllType
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMemberSubclass
	com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2$catena_1
	com.google.javascript.jscomp.DisambiguatePropertiesTest::testStaticProperty
	com.google.javascript.jscomp.ExternExportsPassTest::testExportDontEmitPrototypePathPrefix
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolWithConstructor
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolDefinedInVar
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbol
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple2
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple3
	com.google.javascript.jscomp.ExternExportsPassTest::testExportProperty
	com.google.javascript.jscomp.LooseTypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.LooseTypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.LooseTypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.LooseTypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.TypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn1
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn2
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn3
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn4
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn6
	com.google.javascript.jscomp.TypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.TypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.TypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.TypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface$catena_6
	com.google.javascript.jscomp.TypedScopeCreatorTest::testReturnTypeInference1$catena_1
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorNode$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorProperty$catena_3
No new failing tests but only 1 hunk
processed: 00100000000
pattern: 01000000000
try to fix hunk: 1
replace from 200 with range 2 to
        info.getReturnType().evaluate(scope, typeRegistry) : null;

patches are written to file
running tests...
used time: Finished in 135.34 seconds
Failing tests: 94
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsAssign
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMember
	com.google.javascript.jscomp.CodePrinterTest::testOptionalTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testTempConstructor
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher1
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher2
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsImplements
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsNamespace
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotations
	com.google.javascript.jscomp.CodePrinterTest::testVariableArgumentsTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testEmitUnknownParamTypesAsAllType
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMemberSubclass
	com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2$catena_1
	com.google.javascript.jscomp.DisambiguatePropertiesTest::testStaticProperty
	com.google.javascript.jscomp.ExternExportsPassTest::testExportDontEmitPrototypePathPrefix
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolWithConstructor
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolDefinedInVar
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbol
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple2
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple3
	com.google.javascript.jscomp.ExternExportsPassTest::testExportProperty
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadTemplateType1
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadTemplateType2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadTemplateType3
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadTemplateType4
	com.google.javascript.jscomp.LooseTypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.LooseTypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.LooseTypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.LooseTypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypeCheckTest::testBadTemplateType1
	com.google.javascript.jscomp.TypeCheckTest::testBadTemplateType2
	com.google.javascript.jscomp.TypeCheckTest::testBadTemplateType3
	com.google.javascript.jscomp.TypeCheckTest::testBadTemplateType4
	com.google.javascript.jscomp.TypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.TypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn1
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn2
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn3
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn4
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn6
	com.google.javascript.jscomp.TypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.TypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.TypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.TypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface$catena_6
	com.google.javascript.jscomp.TypedScopeCreatorTest::testReturnTypeInference1$catena_1
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorNode$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testTemplateType
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorProperty$catena_3
Includes new failing tests, set to unusable
processed: 01000000000
pattern: 10000000000
try to fix hunk: 0
insert before 74 with   private boolean returnTypeInferred = false;

patches are written to file
running tests...
used time: Finished in 135.11 seconds
Failing tests: 85
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsAssign
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMember
	com.google.javascript.jscomp.CodePrinterTest::testOptionalTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testTempConstructor
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher1
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher2
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsImplements
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsNamespace
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotations
	com.google.javascript.jscomp.CodePrinterTest::testVariableArgumentsTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testEmitUnknownParamTypesAsAllType
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMemberSubclass
	com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2$catena_1
	com.google.javascript.jscomp.DisambiguatePropertiesTest::testStaticProperty
	com.google.javascript.jscomp.ExternExportsPassTest::testExportDontEmitPrototypePathPrefix
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolWithConstructor
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolDefinedInVar
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbol
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple2
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple3
	com.google.javascript.jscomp.ExternExportsPassTest::testExportProperty
	com.google.javascript.jscomp.LooseTypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.LooseTypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.LooseTypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.LooseTypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.TypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn1
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn2
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn3
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn4
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn6
	com.google.javascript.jscomp.TypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.TypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.TypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.TypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface$catena_6
	com.google.javascript.jscomp.TypedScopeCreatorTest::testReturnTypeInference1$catena_1
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorNode$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorProperty$catena_3
No new failing tests but only 1 hunk
processed: 10000000000
pattern: 00000000011
try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
used time: Finished in 126.30 seconds
Failing tests: 85
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsAssign
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMember
	com.google.javascript.jscomp.CodePrinterTest::testOptionalTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testTempConstructor
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher1
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher2
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsImplements
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsNamespace
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotations
	com.google.javascript.jscomp.CodePrinterTest::testVariableArgumentsTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testEmitUnknownParamTypesAsAllType
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMemberSubclass
	com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2$catena_1
	com.google.javascript.jscomp.DisambiguatePropertiesTest::testStaticProperty
	com.google.javascript.jscomp.ExternExportsPassTest::testExportDontEmitPrototypePathPrefix
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolWithConstructor
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolDefinedInVar
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbol
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple2
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple3
	com.google.javascript.jscomp.ExternExportsPassTest::testExportProperty
	com.google.javascript.jscomp.LooseTypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.LooseTypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.LooseTypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.LooseTypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.TypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn1
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn2
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn3
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn4
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn6
	com.google.javascript.jscomp.TypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.TypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.TypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.TypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface$catena_6
	com.google.javascript.jscomp.TypedScopeCreatorTest::testReturnTypeInference1$catena_1
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorNode$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorProperty$catena_3
Can independently fix []
Could not fix independently
processed: 00000000011
pattern: 00000000101
try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000000101
pattern: 00000000110
try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000000110
pattern: 00000001001
try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000001001
pattern: 00000001010
try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000001010
pattern: 00000001100
try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000001100
pattern: 00000010001
try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
used time: Finished in 118.74 seconds
Failing tests: 85
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsAssign
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMember
	com.google.javascript.jscomp.CodePrinterTest::testOptionalTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testTempConstructor
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher1
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher2
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsImplements
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsNamespace
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotations
	com.google.javascript.jscomp.CodePrinterTest::testVariableArgumentsTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testEmitUnknownParamTypesAsAllType
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMemberSubclass
	com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2$catena_1
	com.google.javascript.jscomp.DisambiguatePropertiesTest::testStaticProperty
	com.google.javascript.jscomp.ExternExportsPassTest::testExportDontEmitPrototypePathPrefix
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolWithConstructor
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolDefinedInVar
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbol
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple2
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple3
	com.google.javascript.jscomp.ExternExportsPassTest::testExportProperty
	com.google.javascript.jscomp.LooseTypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.LooseTypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.LooseTypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.LooseTypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.TypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn1
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn2
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn3
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn4
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn6
	com.google.javascript.jscomp.TypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.TypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.TypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.TypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface$catena_6
	com.google.javascript.jscomp.TypedScopeCreatorTest::testReturnTypeInference1$catena_1
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorNode$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorProperty$catena_3
Can independently fix []
Could not fix independently
processed: 00000010001
pattern: 00000010010
try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
used time: Finished in 114.19 seconds
Failing tests: 85
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsAssign
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMember
	com.google.javascript.jscomp.CodePrinterTest::testOptionalTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testTempConstructor
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher1
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher2
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsImplements
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsNamespace
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotations
	com.google.javascript.jscomp.CodePrinterTest::testVariableArgumentsTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testEmitUnknownParamTypesAsAllType
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMemberSubclass
	com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2$catena_1
	com.google.javascript.jscomp.DisambiguatePropertiesTest::testStaticProperty
	com.google.javascript.jscomp.ExternExportsPassTest::testExportDontEmitPrototypePathPrefix
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolWithConstructor
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolDefinedInVar
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbol
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple2
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple3
	com.google.javascript.jscomp.ExternExportsPassTest::testExportProperty
	com.google.javascript.jscomp.LooseTypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.LooseTypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.LooseTypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.LooseTypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.TypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn1
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn2
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn3
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn4
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn6
	com.google.javascript.jscomp.TypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.TypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.TypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.TypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface$catena_6
	com.google.javascript.jscomp.TypedScopeCreatorTest::testReturnTypeInference1$catena_1
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorNode$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorProperty$catena_3
Can independently fix []
Could not fix independently
processed: 00000010010
pattern: 00000010100
try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000010100
pattern: 00000011000
try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000011000
pattern: 00000100001
try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000100001
pattern: 00000100010
try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000100010
pattern: 00000100100
try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000100100
pattern: 00000101000
try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000101000
pattern: 00000110000
try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000110000
pattern: 00001000001
try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001000001
pattern: 00001000010
try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001000010
pattern: 00001000100
try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001000100
pattern: 00001001000
try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001001000
pattern: 00001010000
try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001010000
pattern: 00001100000
try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001100000
pattern: 00010000001
try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010000001
pattern: 00010000010
try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010000010
pattern: 00010000100
try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010000100
pattern: 00010001000
try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010001000
pattern: 00010010000
try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010010000
pattern: 00010100000
try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010100000
pattern: 00011000000
try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011000000
pattern: 00100000001
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
used time: Finished in 109.10 seconds
Failing tests: 85
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsAssign
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMember
	com.google.javascript.jscomp.CodePrinterTest::testOptionalTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testTempConstructor
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher1
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher2
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsImplements
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsNamespace
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotations
	com.google.javascript.jscomp.CodePrinterTest::testVariableArgumentsTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testEmitUnknownParamTypesAsAllType
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMemberSubclass
	com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2$catena_1
	com.google.javascript.jscomp.DisambiguatePropertiesTest::testStaticProperty
	com.google.javascript.jscomp.ExternExportsPassTest::testExportDontEmitPrototypePathPrefix
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolWithConstructor
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolDefinedInVar
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbol
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple2
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple3
	com.google.javascript.jscomp.ExternExportsPassTest::testExportProperty
	com.google.javascript.jscomp.LooseTypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.LooseTypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.LooseTypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.LooseTypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.TypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn1
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn2
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn3
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn4
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn6
	com.google.javascript.jscomp.TypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.TypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.TypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.TypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface$catena_6
	com.google.javascript.jscomp.TypedScopeCreatorTest::testReturnTypeInference1$catena_1
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorNode$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorProperty$catena_3
Can independently fix []
Could not fix independently
processed: 00100000001
pattern: 00100000010
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
used time: Finished in 116.45 seconds
Failing tests: 85
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsAssign
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMember
	com.google.javascript.jscomp.CodePrinterTest::testOptionalTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testTempConstructor
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher1
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher2
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsImplements
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsNamespace
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotations
	com.google.javascript.jscomp.CodePrinterTest::testVariableArgumentsTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testEmitUnknownParamTypesAsAllType
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMemberSubclass
	com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2$catena_1
	com.google.javascript.jscomp.DisambiguatePropertiesTest::testStaticProperty
	com.google.javascript.jscomp.ExternExportsPassTest::testExportDontEmitPrototypePathPrefix
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolWithConstructor
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolDefinedInVar
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbol
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple2
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple3
	com.google.javascript.jscomp.ExternExportsPassTest::testExportProperty
	com.google.javascript.jscomp.LooseTypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.LooseTypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.LooseTypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.LooseTypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.TypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn1
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn2
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn3
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn4
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn6
	com.google.javascript.jscomp.TypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.TypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.TypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.TypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface$catena_6
	com.google.javascript.jscomp.TypedScopeCreatorTest::testReturnTypeInference1$catena_1
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorNode$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorProperty$catena_3
Can independently fix []
Could not fix independently
processed: 00100000010
pattern: 00100000100
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100000100
pattern: 00100001000
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100001000
pattern: 00100010000
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

patches are written to file
running tests...
used time: Finished in 97.98 seconds
Failing tests: 85
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsAssign
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMember
	com.google.javascript.jscomp.CodePrinterTest::testOptionalTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testTempConstructor
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher1
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher2
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsImplements
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsNamespace
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotations
	com.google.javascript.jscomp.CodePrinterTest::testVariableArgumentsTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testEmitUnknownParamTypesAsAllType
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMemberSubclass
	com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2$catena_1
	com.google.javascript.jscomp.DisambiguatePropertiesTest::testStaticProperty
	com.google.javascript.jscomp.ExternExportsPassTest::testExportDontEmitPrototypePathPrefix
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolWithConstructor
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolDefinedInVar
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbol
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple2
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple3
	com.google.javascript.jscomp.ExternExportsPassTest::testExportProperty
	com.google.javascript.jscomp.LooseTypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.LooseTypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.LooseTypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.LooseTypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.TypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn1
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn2
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn3
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn4
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn6
	com.google.javascript.jscomp.TypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.TypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.TypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.TypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface$catena_6
	com.google.javascript.jscomp.TypedScopeCreatorTest::testReturnTypeInference1$catena_1
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorNode$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorProperty$catena_3
Can independently fix []
Could not fix independently
processed: 00100010000
pattern: 00100100000
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100100000
pattern: 00101000000
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101000000
pattern: 00110000000
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110000000
pattern: 01000000001
try to fix hunk: 1
replace from 200 with range 2 to
        info.getReturnType().evaluate(scope, typeRegistry) : null;

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
used time: Finished in 115.47 seconds
Failing tests: 94
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsAssign
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMember
	com.google.javascript.jscomp.CodePrinterTest::testOptionalTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testTempConstructor
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher1
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher2
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsImplements
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsNamespace
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotations
	com.google.javascript.jscomp.CodePrinterTest::testVariableArgumentsTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testEmitUnknownParamTypesAsAllType
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMemberSubclass
	com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2$catena_1
	com.google.javascript.jscomp.DisambiguatePropertiesTest::testStaticProperty
	com.google.javascript.jscomp.ExternExportsPassTest::testExportDontEmitPrototypePathPrefix
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolWithConstructor
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolDefinedInVar
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbol
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple2
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple3
	com.google.javascript.jscomp.ExternExportsPassTest::testExportProperty
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadTemplateType1
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadTemplateType2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadTemplateType3
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadTemplateType4
	com.google.javascript.jscomp.LooseTypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.LooseTypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.LooseTypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.LooseTypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypeCheckTest::testBadTemplateType1
	com.google.javascript.jscomp.TypeCheckTest::testBadTemplateType2
	com.google.javascript.jscomp.TypeCheckTest::testBadTemplateType3
	com.google.javascript.jscomp.TypeCheckTest::testBadTemplateType4
	com.google.javascript.jscomp.TypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.TypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn1
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn2
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn3
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn4
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn6
	com.google.javascript.jscomp.TypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.TypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.TypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.TypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface$catena_6
	com.google.javascript.jscomp.TypedScopeCreatorTest::testReturnTypeInference1$catena_1
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorNode$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testTemplateType
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorProperty$catena_3
Includes new failing tests, set to unusable
processed: 01000000001
pattern: 01000000010
try to fix hunk: 1
replace from 200 with range 2 to
        info.getReturnType().evaluate(scope, typeRegistry) : null;

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
used time: Finished in 108.54 seconds
Failing tests: 94
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsAssign
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMember
	com.google.javascript.jscomp.CodePrinterTest::testOptionalTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testTempConstructor
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher1
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher2
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsImplements
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsNamespace
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotations
	com.google.javascript.jscomp.CodePrinterTest::testVariableArgumentsTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testEmitUnknownParamTypesAsAllType
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMemberSubclass
	com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2$catena_1
	com.google.javascript.jscomp.DisambiguatePropertiesTest::testStaticProperty
	com.google.javascript.jscomp.ExternExportsPassTest::testExportDontEmitPrototypePathPrefix
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolWithConstructor
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolDefinedInVar
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbol
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple2
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple3
	com.google.javascript.jscomp.ExternExportsPassTest::testExportProperty
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadTemplateType1
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadTemplateType2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadTemplateType3
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadTemplateType4
	com.google.javascript.jscomp.LooseTypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.LooseTypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.LooseTypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.LooseTypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypeCheckTest::testBadTemplateType1
	com.google.javascript.jscomp.TypeCheckTest::testBadTemplateType2
	com.google.javascript.jscomp.TypeCheckTest::testBadTemplateType3
	com.google.javascript.jscomp.TypeCheckTest::testBadTemplateType4
	com.google.javascript.jscomp.TypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.TypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn1
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn2
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn3
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn4
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn6
	com.google.javascript.jscomp.TypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.TypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.TypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.TypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface$catena_6
	com.google.javascript.jscomp.TypedScopeCreatorTest::testReturnTypeInference1$catena_1
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorNode$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testTemplateType
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorProperty$catena_3
Includes new failing tests, set to unusable
processed: 01000000010
pattern: 01000000100
try to fix hunk: 1
replace from 200 with range 2 to
        info.getReturnType().evaluate(scope, typeRegistry) : null;

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000000100
pattern: 01000001000
try to fix hunk: 1
replace from 200 with range 2 to
        info.getReturnType().evaluate(scope, typeRegistry) : null;

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000001000
pattern: 01000010000
try to fix hunk: 1
replace from 200 with range 2 to
        info.getReturnType().evaluate(scope, typeRegistry) : null;

try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

patches are written to file
running tests...
used time: Finished in 108.19 seconds
Failing tests: 94
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsAssign
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMember
	com.google.javascript.jscomp.CodePrinterTest::testOptionalTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testTempConstructor
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher1
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher2
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsImplements
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsNamespace
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotations
	com.google.javascript.jscomp.CodePrinterTest::testVariableArgumentsTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testEmitUnknownParamTypesAsAllType
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMemberSubclass
	com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2$catena_1
	com.google.javascript.jscomp.DisambiguatePropertiesTest::testStaticProperty
	com.google.javascript.jscomp.ExternExportsPassTest::testExportDontEmitPrototypePathPrefix
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolWithConstructor
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolDefinedInVar
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbol
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple2
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple3
	com.google.javascript.jscomp.ExternExportsPassTest::testExportProperty
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadTemplateType1
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadTemplateType2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadTemplateType3
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadTemplateType4
	com.google.javascript.jscomp.LooseTypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.LooseTypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.LooseTypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.LooseTypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypeCheckTest::testBadTemplateType1
	com.google.javascript.jscomp.TypeCheckTest::testBadTemplateType2
	com.google.javascript.jscomp.TypeCheckTest::testBadTemplateType3
	com.google.javascript.jscomp.TypeCheckTest::testBadTemplateType4
	com.google.javascript.jscomp.TypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.TypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn1
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn2
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn3
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn4
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn6
	com.google.javascript.jscomp.TypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.TypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.TypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.TypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface$catena_6
	com.google.javascript.jscomp.TypedScopeCreatorTest::testReturnTypeInference1$catena_1
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorNode$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testTemplateType
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorProperty$catena_3
Includes new failing tests, set to unusable
processed: 01000010000
pattern: 01000100000
try to fix hunk: 1
replace from 200 with range 2 to
        info.getReturnType().evaluate(scope, typeRegistry) : null;

try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000100000
pattern: 01001000000
try to fix hunk: 1
replace from 200 with range 2 to
        info.getReturnType().evaluate(scope, typeRegistry) : null;

try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01001000000
pattern: 01010000000
try to fix hunk: 1
replace from 200 with range 2 to
        info.getReturnType().evaluate(scope, typeRegistry) : null;

try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01010000000
pattern: 01100000000
try to fix hunk: 1
replace from 200 with range 2 to
        info.getReturnType().evaluate(scope, typeRegistry) : null;

try to fix hunk: 2
insert before 203 with         returnType != null &&

patches are written to file
running tests...
used time: Finished in 107.58 seconds
Failing tests: 85
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsAssign
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMember
	com.google.javascript.jscomp.CodePrinterTest::testOptionalTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testTempConstructor
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher1
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher2
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsImplements
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsNamespace
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotations
	com.google.javascript.jscomp.CodePrinterTest::testVariableArgumentsTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testEmitUnknownParamTypesAsAllType
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMemberSubclass
	com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2$catena_1
	com.google.javascript.jscomp.DisambiguatePropertiesTest::testStaticProperty
	com.google.javascript.jscomp.ExternExportsPassTest::testExportDontEmitPrototypePathPrefix
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolWithConstructor
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolDefinedInVar
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbol
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple2
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple3
	com.google.javascript.jscomp.ExternExportsPassTest::testExportProperty
	com.google.javascript.jscomp.LooseTypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.LooseTypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.LooseTypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.LooseTypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.TypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn1
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn2
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn3
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn4
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn6
	com.google.javascript.jscomp.TypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.TypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.TypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.TypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface$catena_6
	com.google.javascript.jscomp.TypedScopeCreatorTest::testReturnTypeInference1$catena_1
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorNode$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorProperty$catena_3
Can independently fix []
Could not fix independently
processed: 01100000000
pattern: 10000000001
try to fix hunk: 0
insert before 74 with   private boolean returnTypeInferred = false;

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
used time: Finished in 107.80 seconds
Failing tests: 85
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsAssign
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMember
	com.google.javascript.jscomp.CodePrinterTest::testOptionalTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testTempConstructor
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher1
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher2
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsImplements
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsNamespace
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotations
	com.google.javascript.jscomp.CodePrinterTest::testVariableArgumentsTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testEmitUnknownParamTypesAsAllType
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMemberSubclass
	com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2$catena_1
	com.google.javascript.jscomp.DisambiguatePropertiesTest::testStaticProperty
	com.google.javascript.jscomp.ExternExportsPassTest::testExportDontEmitPrototypePathPrefix
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolWithConstructor
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolDefinedInVar
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbol
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple2
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple3
	com.google.javascript.jscomp.ExternExportsPassTest::testExportProperty
	com.google.javascript.jscomp.LooseTypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.LooseTypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.LooseTypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.LooseTypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.TypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn1
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn2
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn3
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn4
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn6
	com.google.javascript.jscomp.TypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.TypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.TypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.TypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface$catena_6
	com.google.javascript.jscomp.TypedScopeCreatorTest::testReturnTypeInference1$catena_1
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorNode$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorProperty$catena_3
Can independently fix []
Could not fix independently
processed: 10000000001
pattern: 10000000010
try to fix hunk: 0
insert before 74 with   private boolean returnTypeInferred = false;

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
used time: Finished in 119.51 seconds
Failing tests: 85
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsAssign
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMember
	com.google.javascript.jscomp.CodePrinterTest::testOptionalTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testTempConstructor
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher1
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher2
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsImplements
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsNamespace
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotations
	com.google.javascript.jscomp.CodePrinterTest::testVariableArgumentsTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testEmitUnknownParamTypesAsAllType
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMemberSubclass
	com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2$catena_1
	com.google.javascript.jscomp.DisambiguatePropertiesTest::testStaticProperty
	com.google.javascript.jscomp.ExternExportsPassTest::testExportDontEmitPrototypePathPrefix
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolWithConstructor
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolDefinedInVar
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbol
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple2
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple3
	com.google.javascript.jscomp.ExternExportsPassTest::testExportProperty
	com.google.javascript.jscomp.LooseTypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.LooseTypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.LooseTypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.LooseTypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.TypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn1
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn2
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn3
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn4
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn6
	com.google.javascript.jscomp.TypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.TypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.TypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.TypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface$catena_6
	com.google.javascript.jscomp.TypedScopeCreatorTest::testReturnTypeInference1$catena_1
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorNode$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorProperty$catena_3
Can independently fix []
Could not fix independently
processed: 10000000010
pattern: 10000000100
try to fix hunk: 0
insert before 74 with   private boolean returnTypeInferred = false;

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000000100
pattern: 10000001000
try to fix hunk: 0
insert before 74 with   private boolean returnTypeInferred = false;

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000001000
pattern: 10000010000
try to fix hunk: 0
insert before 74 with   private boolean returnTypeInferred = false;

try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

patches are written to file
running tests...
used time: Finished in 124.19 seconds
Failing tests: 85
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsAssign
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMember
	com.google.javascript.jscomp.CodePrinterTest::testOptionalTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testTempConstructor
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher1
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher2
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsImplements
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsNamespace
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotations
	com.google.javascript.jscomp.CodePrinterTest::testVariableArgumentsTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testEmitUnknownParamTypesAsAllType
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMemberSubclass
	com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2$catena_1
	com.google.javascript.jscomp.DisambiguatePropertiesTest::testStaticProperty
	com.google.javascript.jscomp.ExternExportsPassTest::testExportDontEmitPrototypePathPrefix
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolWithConstructor
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolDefinedInVar
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbol
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple2
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple3
	com.google.javascript.jscomp.ExternExportsPassTest::testExportProperty
	com.google.javascript.jscomp.LooseTypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.LooseTypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.LooseTypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.LooseTypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.TypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn1
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn2
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn3
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn4
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn6
	com.google.javascript.jscomp.TypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.TypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.TypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.TypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface$catena_6
	com.google.javascript.jscomp.TypedScopeCreatorTest::testReturnTypeInference1$catena_1
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorNode$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorProperty$catena_3
Can independently fix []
Could not fix independently
processed: 10000010000
pattern: 10000100000
try to fix hunk: 0
insert before 74 with   private boolean returnTypeInferred = false;

try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000100000
pattern: 10001000000
try to fix hunk: 0
insert before 74 with   private boolean returnTypeInferred = false;

try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10001000000
pattern: 10010000000
try to fix hunk: 0
insert before 74 with   private boolean returnTypeInferred = false;

try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10010000000
pattern: 10100000000
try to fix hunk: 0
insert before 74 with   private boolean returnTypeInferred = false;

try to fix hunk: 2
insert before 203 with         returnType != null &&

patches are written to file
running tests...
used time: Finished in 113.59 seconds
Failing tests: 85
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsAssign
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMember
	com.google.javascript.jscomp.CodePrinterTest::testOptionalTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testTempConstructor
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher1
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher2
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsImplements
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsNamespace
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotations
	com.google.javascript.jscomp.CodePrinterTest::testVariableArgumentsTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testEmitUnknownParamTypesAsAllType
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMemberSubclass
	com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2$catena_1
	com.google.javascript.jscomp.DisambiguatePropertiesTest::testStaticProperty
	com.google.javascript.jscomp.ExternExportsPassTest::testExportDontEmitPrototypePathPrefix
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolWithConstructor
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolDefinedInVar
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbol
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple2
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple3
	com.google.javascript.jscomp.ExternExportsPassTest::testExportProperty
	com.google.javascript.jscomp.LooseTypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.LooseTypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.LooseTypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.LooseTypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.TypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn1
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn2
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn3
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn4
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn6
	com.google.javascript.jscomp.TypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.TypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.TypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.TypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface$catena_6
	com.google.javascript.jscomp.TypedScopeCreatorTest::testReturnTypeInference1$catena_1
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorNode$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorProperty$catena_3
Can independently fix []
Could not fix independently
processed: 10100000000
pattern: 11000000000
try to fix hunk: 0
insert before 74 with   private boolean returnTypeInferred = false;

try to fix hunk: 1
replace from 200 with range 2 to
        info.getReturnType().evaluate(scope, typeRegistry) : null;

patches are written to file
running tests...
used time: Finished in 97.85 seconds
Failing tests: 94
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsAssign
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMember
	com.google.javascript.jscomp.CodePrinterTest::testOptionalTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testTempConstructor
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher1
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher2
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsImplements
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsNamespace
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotations
	com.google.javascript.jscomp.CodePrinterTest::testVariableArgumentsTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testEmitUnknownParamTypesAsAllType
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMemberSubclass
	com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2$catena_1
	com.google.javascript.jscomp.DisambiguatePropertiesTest::testStaticProperty
	com.google.javascript.jscomp.ExternExportsPassTest::testExportDontEmitPrototypePathPrefix
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolWithConstructor
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolDefinedInVar
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbol
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple2
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple3
	com.google.javascript.jscomp.ExternExportsPassTest::testExportProperty
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadTemplateType1
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadTemplateType2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadTemplateType3
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadTemplateType4
	com.google.javascript.jscomp.LooseTypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.LooseTypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.LooseTypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.LooseTypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypeCheckTest::testBadTemplateType1
	com.google.javascript.jscomp.TypeCheckTest::testBadTemplateType2
	com.google.javascript.jscomp.TypeCheckTest::testBadTemplateType3
	com.google.javascript.jscomp.TypeCheckTest::testBadTemplateType4
	com.google.javascript.jscomp.TypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.TypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn1
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn2
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn3
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn4
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn6
	com.google.javascript.jscomp.TypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.TypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.TypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.TypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface$catena_6
	com.google.javascript.jscomp.TypedScopeCreatorTest::testReturnTypeInference1$catena_1
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorNode$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testTemplateType
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorProperty$catena_3
Includes new failing tests, set to unusable
processed: 11000000000
pattern: 00000000111
try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000000111
pattern: 00000001011
try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000001011
pattern: 00000001101
try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000001101
pattern: 00000001110
try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000001110
pattern: 00000010011
try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
used time: Finished in 107.03 seconds
Failing tests: 85
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsAssign
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMember
	com.google.javascript.jscomp.CodePrinterTest::testOptionalTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testTempConstructor
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher1
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher2
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsImplements
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsNamespace
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotations
	com.google.javascript.jscomp.CodePrinterTest::testVariableArgumentsTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testEmitUnknownParamTypesAsAllType
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMemberSubclass
	com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2$catena_1
	com.google.javascript.jscomp.DisambiguatePropertiesTest::testStaticProperty
	com.google.javascript.jscomp.ExternExportsPassTest::testExportDontEmitPrototypePathPrefix
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolWithConstructor
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolDefinedInVar
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbol
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple2
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple3
	com.google.javascript.jscomp.ExternExportsPassTest::testExportProperty
	com.google.javascript.jscomp.LooseTypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.LooseTypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.LooseTypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.LooseTypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.TypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn1
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn2
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn3
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn4
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn6
	com.google.javascript.jscomp.TypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.TypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.TypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.TypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface$catena_6
	com.google.javascript.jscomp.TypedScopeCreatorTest::testReturnTypeInference1$catena_1
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorNode$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorProperty$catena_3
Can independently fix []
Could not fix independently
processed: 00000010011
pattern: 00000010101
try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000010101
pattern: 00000010110
try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000010110
pattern: 00000011001
try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000011001
pattern: 00000011010
try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000011010
pattern: 00000011100
try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000011100
pattern: 00000100011
try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000100011
pattern: 00000100101
try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000100101
pattern: 00000100110
try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000100110
pattern: 00000101001
try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000101001
pattern: 00000101010
try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000101010
pattern: 00000101100
try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000101100
pattern: 00000110001
try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000110001
pattern: 00000110010
try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000110010
pattern: 00000110100
try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000110100
pattern: 00000111000
try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000111000
pattern: 00001000011
try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001000011
pattern: 00001000101
try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001000101
pattern: 00001000110
try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001000110
pattern: 00001001001
try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001001001
pattern: 00001001010
try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001001010
pattern: 00001001100
try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001001100
pattern: 00001010001
try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001010001
pattern: 00001010010
try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001010010
pattern: 00001010100
try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001010100
pattern: 00001011000
try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001011000
pattern: 00001100001
try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001100001
pattern: 00001100010
try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001100010
pattern: 00001100100
try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001100100
pattern: 00001101000
try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001101000
pattern: 00001110000
try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001110000
pattern: 00010000011
try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010000011
pattern: 00010000101
try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010000101
pattern: 00010000110
try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010000110
pattern: 00010001001
try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010001001
pattern: 00010001010
try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010001010
pattern: 00010001100
try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010001100
pattern: 00010010001
try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010010001
pattern: 00010010010
try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010010010
pattern: 00010010100
try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010010100
pattern: 00010011000
try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010011000
pattern: 00010100001
try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010100001
pattern: 00010100010
try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010100010
pattern: 00010100100
try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010100100
pattern: 00010101000
try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010101000
pattern: 00010110000
try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010110000
pattern: 00011000001
try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011000001
pattern: 00011000010
try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011000010
pattern: 00011000100
try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011000100
pattern: 00011001000
try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011001000
pattern: 00011010000
try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011010000
pattern: 00011100000
try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011100000
pattern: 00100000011
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
used time: Finished in 121.09 seconds
Failing tests: 85
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsAssign
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMember
	com.google.javascript.jscomp.CodePrinterTest::testOptionalTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testTempConstructor
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher1
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher2
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsImplements
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsNamespace
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotations
	com.google.javascript.jscomp.CodePrinterTest::testVariableArgumentsTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testEmitUnknownParamTypesAsAllType
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMemberSubclass
	com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2$catena_1
	com.google.javascript.jscomp.DisambiguatePropertiesTest::testStaticProperty
	com.google.javascript.jscomp.ExternExportsPassTest::testExportDontEmitPrototypePathPrefix
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolWithConstructor
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolDefinedInVar
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbol
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple2
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple3
	com.google.javascript.jscomp.ExternExportsPassTest::testExportProperty
	com.google.javascript.jscomp.LooseTypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.LooseTypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.LooseTypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.LooseTypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.TypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn1
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn2
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn3
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn4
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn6
	com.google.javascript.jscomp.TypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.TypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.TypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.TypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface$catena_6
	com.google.javascript.jscomp.TypedScopeCreatorTest::testReturnTypeInference1$catena_1
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorNode$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorProperty$catena_3
Can independently fix []
Could not fix independently
processed: 00100000011
pattern: 00100000101
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100000101
pattern: 00100000110
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100000110
pattern: 00100001001
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100001001
pattern: 00100001010
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100001010
pattern: 00100001100
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100001100
pattern: 00100010001
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
used time: Finished in 103.42 seconds
Failing tests: 85
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsAssign
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMember
	com.google.javascript.jscomp.CodePrinterTest::testOptionalTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testTempConstructor
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher1
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher2
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsImplements
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsNamespace
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotations
	com.google.javascript.jscomp.CodePrinterTest::testVariableArgumentsTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testEmitUnknownParamTypesAsAllType
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMemberSubclass
	com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2$catena_1
	com.google.javascript.jscomp.DisambiguatePropertiesTest::testStaticProperty
	com.google.javascript.jscomp.ExternExportsPassTest::testExportDontEmitPrototypePathPrefix
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolWithConstructor
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolDefinedInVar
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbol
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple2
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple3
	com.google.javascript.jscomp.ExternExportsPassTest::testExportProperty
	com.google.javascript.jscomp.LooseTypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.LooseTypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.LooseTypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.LooseTypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.TypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn1
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn2
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn3
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn4
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn6
	com.google.javascript.jscomp.TypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.TypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.TypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.TypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface$catena_6
	com.google.javascript.jscomp.TypedScopeCreatorTest::testReturnTypeInference1$catena_1
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorNode$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorProperty$catena_3
Can independently fix []
Could not fix independently
processed: 00100010001
pattern: 00100010010
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
used time: Finished in 107.14 seconds
Failing tests: 85
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsAssign
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMember
	com.google.javascript.jscomp.CodePrinterTest::testOptionalTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testTempConstructor
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher1
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher2
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsImplements
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsNamespace
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotations
	com.google.javascript.jscomp.CodePrinterTest::testVariableArgumentsTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testEmitUnknownParamTypesAsAllType
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMemberSubclass
	com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2$catena_1
	com.google.javascript.jscomp.DisambiguatePropertiesTest::testStaticProperty
	com.google.javascript.jscomp.ExternExportsPassTest::testExportDontEmitPrototypePathPrefix
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolWithConstructor
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolDefinedInVar
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbol
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple2
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple3
	com.google.javascript.jscomp.ExternExportsPassTest::testExportProperty
	com.google.javascript.jscomp.LooseTypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.LooseTypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.LooseTypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.LooseTypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.TypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn1
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn2
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn3
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn4
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn6
	com.google.javascript.jscomp.TypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.TypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.TypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.TypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface$catena_6
	com.google.javascript.jscomp.TypedScopeCreatorTest::testReturnTypeInference1$catena_1
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorNode$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorProperty$catena_3
Can independently fix []
Could not fix independently
processed: 00100010010
pattern: 00100010100
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100010100
pattern: 00100011000
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100011000
pattern: 00100100001
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100100001
pattern: 00100100010
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100100010
pattern: 00100100100
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100100100
pattern: 00100101000
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100101000
pattern: 00100110000
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100110000
pattern: 00101000001
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101000001
pattern: 00101000010
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101000010
pattern: 00101000100
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101000100
pattern: 00101001000
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101001000
pattern: 00101010000
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101010000
pattern: 00101100000
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101100000
pattern: 00110000001
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110000001
pattern: 00110000010
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110000010
pattern: 00110000100
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110000100
pattern: 00110001000
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110001000
pattern: 00110010000
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110010000
pattern: 00110100000
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 5
replace from 496 with range 1 to
          .withReturnType(returnType, returnTypeInferred)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110100000
pattern: 00111000000
try to fix hunk: 2
insert before 203 with         returnType != null &&

try to fix hunk: 3
insert before 213 with   FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
      return this;
    }
    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
    if (returnType == null) {
      boolean hasNonEmptyReturns = false;
      List<Node> worklist = Lists.newArrayList(functionBlock);
      while (!worklist.isEmpty()) {
        Node current = worklist.remove(worklist.size() - 1);
        int cType = current.getType();
        if (cType == Token.RETURN && current.getFirstChild() != null ||
            cType == Token.THROW) {
          hasNonEmptyReturns = true;
          break;
        } else if (NodeUtil.isStatementBlock(current) ||
            NodeUtil.isControlStructure(current)) {
          for (Node child = current.getFirstChild();
               child != null; child = child.getNext()) {
            worklist.add(child);
          }
        }
      }

try to fix hunk: 4
insert before 214 with       if (!hasNonEmptyReturns) {
        returnType = typeRegistry.getNativeType(VOID_TYPE);
        returnTypeInferred = true;
      }
    }
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00111000000
pattern: 01000000011
try to fix hunk: 1
replace from 200 with range 2 to
        info.getReturnType().evaluate(scope, typeRegistry) : null;

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
used time: Finished in 95.19 seconds
Failing tests: 94
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsAssign
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMember
	com.google.javascript.jscomp.CodePrinterTest::testOptionalTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testTempConstructor
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher1
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher2
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsImplements
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsNamespace
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotations
	com.google.javascript.jscomp.CodePrinterTest::testVariableArgumentsTypesAnnotation
	com.google.javascript.jscomp.CodePrinterTest::testEmitUnknownParamTypesAsAllType
	com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMemberSubclass
	com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2$catena_1
	com.google.javascript.jscomp.DisambiguatePropertiesTest::testStaticProperty
	com.google.javascript.jscomp.ExternExportsPassTest::testExportDontEmitPrototypePathPrefix
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolWithConstructor
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolDefinedInVar
	com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbol
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple2
	com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple3
	com.google.javascript.jscomp.ExternExportsPassTest::testExportProperty
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadTemplateType1
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadTemplateType2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadTemplateType3
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadTemplateType4
	com.google.javascript.jscomp.LooseTypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.LooseTypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.LooseTypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.LooseTypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.LooseTypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypeCheckTest::testBadTemplateType1
	com.google.javascript.jscomp.TypeCheckTest::testBadTemplateType2
	com.google.javascript.jscomp.TypeCheckTest::testBadTemplateType3
	com.google.javascript.jscomp.TypeCheckTest::testBadTemplateType4
	com.google.javascript.jscomp.TypeCheckTest::testNestedFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testScoping10$catena_2
	com.google.javascript.jscomp.TypeCheckTest::testBug911118$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDontAddMethodsIfNoConstructor$catena_0
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateOldTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn1
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn2
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn3
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn4
	com.google.javascript.jscomp.TypeCheckTest::testInferredReturn6
	com.google.javascript.jscomp.TypeCheckTest::testBadConstructorCall
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck11
	com.google.javascript.jscomp.TypeCheckTest::testErrorMismatchingPropertyOnInterface5
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateTypeDef
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference12
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference13
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference15
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference16
	com.google.javascript.jscomp.TypeCheckTest::testGoodExtends7
	com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference1
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference2
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference3
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference4
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference7
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference8
	com.google.javascript.jscomp.TypeCheckTest::testFunctionInference9
	com.google.javascript.jscomp.TypeCheckTest::testPrototypePropertyReference$catena_3
	com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck7
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl1
	com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface$catena_6
	com.google.javascript.jscomp.TypedScopeCreatorTest::testReturnTypeInference1$catena_1
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorNode$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_3
	com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction$catena_5
	com.google.javascript.jscomp.TypedScopeCreatorTest::testTemplateType
	com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorProperty$catena_3
Includes new failing tests, set to unusable
processed: 01000000011
pattern: 01000000101
try to fix hunk: 1
replace from 200 with range 2 to
        info.getReturnType().evaluate(scope, typeRegistry) : null;

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000000101
pattern: 01000000110
try to fix hunk: 1
replace from 200 with range 2 to
        info.getReturnType().evaluate(scope, typeRegistry) : null;

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000000110
pattern: 01000001001
try to fix hunk: 1
replace from 200 with range 2 to
        info.getReturnType().evaluate(scope, typeRegistry) : null;

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000001001
pattern: 01000001010
try to fix hunk: 1
replace from 200 with range 2 to
        info.getReturnType().evaluate(scope, typeRegistry) : null;

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

try to fix hunk: 9
insert before 101 with   public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
    this.returnType = returnType;
    this.inferredReturnType = inferred;
    return this;
  }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000001010
pattern: 01000001100
try to fix hunk: 1
replace from 200 with range 2 to
        info.getReturnType().evaluate(scope, typeRegistry) : null;

try to fix hunk: 7
insert before 617 with                     .inferReturnStatements(fnBlock)

try to fix hunk: 8
insert before 634 with             .inferReturnStatements(fnBlock)

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000001100
pattern: 01000010001
try to fix hunk: 1
replace from 200 with range 2 to
        info.getReturnType().evaluate(scope, typeRegistry) : null;

try to fix hunk: 6
insert before 577 with       Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;

try to fix hunk: 10
replace from 517 with range 1 to
        registry, null, source,

patches are written to file
running tests...
EXCEPTION: Inside Exception generator.run() timeout
Traceback (most recent call last):
  File "run.py", line 30, in task
    generator.run()
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 82, in new_function
    return function(*args, **kwargs)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 83, in run
    self._run()
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 109, in _run
    self.taskSingleHunk(task)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 138, in taskSingleHunk
    failure = util.get_failing_tests(self.path, self.build_dir)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/util.py", line 46, in get_failing_tests
    result = runCommand(['defects4j', 'test', '-w', '{}'.format(path)], timeout=timeout)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/util.py", line 9, in runCommand
    finished = subprocess.run(cmd, capture_output=True, cwd=cwd, timeout=timeout)
  File "/usr/lib/python3.8/subprocess.py", line 495, in run
    stdout, stderr = process.communicate(input, timeout=timeout)
  File "/usr/lib/python3.8/subprocess.py", line 1028, in communicate
    stdout, stderr = self._communicate(input, endtime, timeout)
  File "/usr/lib/python3.8/subprocess.py", line 1868, in _communicate
    ready = selector.select(timeout)
  File "/usr/lib/python3.8/selectors.py", line 415, in select
    fd_event_list = self._selector.poll(timeout)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 69, in handler
    _raise_exception(timeout_exception, exception_message)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 47, in _raise_exception
    raise exception(exception_message)
TimeoutError: generator.run() timeout

