---
Begin generate bug_id: Closure_131
num_of_hunks: 2
use working dir: ./working/data/Closure_131
Try to checkout Closure_131
build dir: ['./working/data/Closure_131/build/classes', './working/data/Closure_131/build/test']
init FileManager
trace file: src/com/google/javascript/rhino/TokenStream.java
trace file: src/com/google/javascript/rhino/TokenStream.java
trying to replace old failing tests
edit: replace from 68 range 6 at test/com/google/javascript/jscomp/ConvertToDottedPropertiesTest.java
to
  public void testQuotedProps$catena_0() {
    testSame("({'':0})");                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/
    try{ testSame("({'1.0':0})");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("({'\u1d17A':0})");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("({'a\u0004b':0})");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testQuotedProps$catena_1() {
    try{ testSame("({'':0})");                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    testSame("({'1.0':0})");                                                                                /***** ORIGINAL ASSERTION IS HERE *****/
    try{ testSame("({'\u1d17A':0})");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("({'a\u0004b':0})");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testQuotedProps$catena_2() {
    try{ testSame("({'':0})");                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("({'1.0':0})");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    testSame("({'\u1d17A':0})");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/
    try{ testSame("({'a\u0004b':0})");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testQuotedProps$catena_3() {
    try{ testSame("({'':0})");                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("({'1.0':0})");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("({'\u1d17A':0})");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    testSame("({'a\u0004b':0})");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 41 range 25 at test/com/google/javascript/jscomp/ConvertToDottedPropertiesTest.java
to
  public void testDoNotConvert$catena_0() {
    testSame("a[0]");                                                                                       /***** ORIGINAL ASSERTION IS HERE *****/
    try{ testSame("a['']");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[' ']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[',']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[';']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[':']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['.']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['0']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p ']");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p' + '']");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[P]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[$]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p()]");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['default']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // Ignorable control characters are ok in Java identifiers, but not in JS.
    try{ testSame("a['A\u0004']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // upper case lower half of o from phonetic extensions set.
    // valid in Safari, not in Firefox, IE.
    try{ test("a['\u1d17A']", "a['\u1d17A']");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    // Latin capital N with tilde - nice if we handled it, but for now let's
    // only allow simple Latin (aka ASCII) to be converted.
    try{ test("a['\u00d1StuffAfter']", "a['\u00d1StuffAfter']");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDoNotConvert$catena_1() {
    try{ testSame("a[0]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    testSame("a['']");                                                                                      /***** ORIGINAL ASSERTION IS HERE *****/
    try{ testSame("a[' ']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[',']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[';']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[':']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['.']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['0']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p ']");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p' + '']");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[P]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[$]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p()]");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['default']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // Ignorable control characters are ok in Java identifiers, but not in JS.
    try{ testSame("a['A\u0004']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // upper case lower half of o from phonetic extensions set.
    // valid in Safari, not in Firefox, IE.
    try{ test("a['\u1d17A']", "a['\u1d17A']");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    // Latin capital N with tilde - nice if we handled it, but for now let's
    // only allow simple Latin (aka ASCII) to be converted.
    try{ test("a['\u00d1StuffAfter']", "a['\u00d1StuffAfter']");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDoNotConvert$catena_2() {
    try{ testSame("a[0]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['']");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    testSame("a[' ']");                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/
    try{ testSame("a[',']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[';']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[':']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['.']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['0']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p ']");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p' + '']");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[P]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[$]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p()]");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['default']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // Ignorable control characters are ok in Java identifiers, but not in JS.
    try{ testSame("a['A\u0004']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // upper case lower half of o from phonetic extensions set.
    // valid in Safari, not in Firefox, IE.
    try{ test("a['\u1d17A']", "a['\u1d17A']");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    // Latin capital N with tilde - nice if we handled it, but for now let's
    // only allow simple Latin (aka ASCII) to be converted.
    try{ test("a['\u00d1StuffAfter']", "a['\u00d1StuffAfter']");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDoNotConvert$catena_3() {
    try{ testSame("a[0]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['']");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[' ']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    testSame("a[',']");                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/
    try{ testSame("a[';']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[':']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['.']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['0']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p ']");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p' + '']");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[P]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[$]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p()]");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['default']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // Ignorable control characters are ok in Java identifiers, but not in JS.
    try{ testSame("a['A\u0004']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // upper case lower half of o from phonetic extensions set.
    // valid in Safari, not in Firefox, IE.
    try{ test("a['\u1d17A']", "a['\u1d17A']");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    // Latin capital N with tilde - nice if we handled it, but for now let's
    // only allow simple Latin (aka ASCII) to be converted.
    try{ test("a['\u00d1StuffAfter']", "a['\u00d1StuffAfter']");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDoNotConvert$catena_4() {
    try{ testSame("a[0]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['']");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[' ']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[',']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    testSame("a[';']");                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/
    try{ testSame("a[':']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['.']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['0']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p ']");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p' + '']");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[P]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[$]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p()]");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['default']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // Ignorable control characters are ok in Java identifiers, but not in JS.
    try{ testSame("a['A\u0004']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // upper case lower half of o from phonetic extensions set.
    // valid in Safari, not in Firefox, IE.
    try{ test("a['\u1d17A']", "a['\u1d17A']");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    // Latin capital N with tilde - nice if we handled it, but for now let's
    // only allow simple Latin (aka ASCII) to be converted.
    try{ test("a['\u00d1StuffAfter']", "a['\u00d1StuffAfter']");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDoNotConvert$catena_5() {
    try{ testSame("a[0]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['']");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[' ']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[',']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[';']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    testSame("a[':']");                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/
    try{ testSame("a['.']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['0']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p ']");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p' + '']");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[P]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[$]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p()]");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['default']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // Ignorable control characters are ok in Java identifiers, but not in JS.
    try{ testSame("a['A\u0004']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // upper case lower half of o from phonetic extensions set.
    // valid in Safari, not in Firefox, IE.
    try{ test("a['\u1d17A']", "a['\u1d17A']");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    // Latin capital N with tilde - nice if we handled it, but for now let's
    // only allow simple Latin (aka ASCII) to be converted.
    try{ test("a['\u00d1StuffAfter']", "a['\u00d1StuffAfter']");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDoNotConvert$catena_6() {
    try{ testSame("a[0]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['']");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[' ']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[',']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[';']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[':']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    testSame("a['.']");                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/
    try{ testSame("a['0']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p ']");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p' + '']");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[P]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[$]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p()]");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['default']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // Ignorable control characters are ok in Java identifiers, but not in JS.
    try{ testSame("a['A\u0004']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // upper case lower half of o from phonetic extensions set.
    // valid in Safari, not in Firefox, IE.
    try{ test("a['\u1d17A']", "a['\u1d17A']");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    // Latin capital N with tilde - nice if we handled it, but for now let's
    // only allow simple Latin (aka ASCII) to be converted.
    try{ test("a['\u00d1StuffAfter']", "a['\u00d1StuffAfter']");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDoNotConvert$catena_7() {
    try{ testSame("a[0]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['']");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[' ']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[',']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[';']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[':']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['.']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    testSame("a['0']");                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/
    try{ testSame("a['p ']");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p' + '']");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[P]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[$]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p()]");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['default']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // Ignorable control characters are ok in Java identifiers, but not in JS.
    try{ testSame("a['A\u0004']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // upper case lower half of o from phonetic extensions set.
    // valid in Safari, not in Firefox, IE.
    try{ test("a['\u1d17A']", "a['\u1d17A']");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    // Latin capital N with tilde - nice if we handled it, but for now let's
    // only allow simple Latin (aka ASCII) to be converted.
    try{ test("a['\u00d1StuffAfter']", "a['\u00d1StuffAfter']");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDoNotConvert$catena_8() {
    try{ testSame("a[0]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['']");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[' ']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[',']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[';']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[':']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['.']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['0']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    testSame("a['p ']");                                                                                    /***** ORIGINAL ASSERTION IS HERE *****/
    try{ testSame("a['p' + '']");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[P]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[$]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p()]");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['default']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // Ignorable control characters are ok in Java identifiers, but not in JS.
    try{ testSame("a['A\u0004']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // upper case lower half of o from phonetic extensions set.
    // valid in Safari, not in Firefox, IE.
    try{ test("a['\u1d17A']", "a['\u1d17A']");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    // Latin capital N with tilde - nice if we handled it, but for now let's
    // only allow simple Latin (aka ASCII) to be converted.
    try{ test("a['\u00d1StuffAfter']", "a['\u00d1StuffAfter']");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDoNotConvert$catena_9() {
    try{ testSame("a[0]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['']");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[' ']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[',']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[';']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[':']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['.']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['0']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p ']");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    testSame("a['p' + '']");                                                                                /***** ORIGINAL ASSERTION IS HERE *****/
    try{ testSame("a[p]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[P]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[$]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p()]");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['default']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // Ignorable control characters are ok in Java identifiers, but not in JS.
    try{ testSame("a['A\u0004']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // upper case lower half of o from phonetic extensions set.
    // valid in Safari, not in Firefox, IE.
    try{ test("a['\u1d17A']", "a['\u1d17A']");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    // Latin capital N with tilde - nice if we handled it, but for now let's
    // only allow simple Latin (aka ASCII) to be converted.
    try{ test("a['\u00d1StuffAfter']", "a['\u00d1StuffAfter']");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDoNotConvert$catena_10() {
    try{ testSame("a[0]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['']");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[' ']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[',']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[';']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[':']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['.']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['0']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p ']");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p' + '']");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    testSame("a[p]");                                                                                       /***** ORIGINAL ASSERTION IS HERE *****/
    try{ testSame("a[P]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[$]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p()]");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['default']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // Ignorable control characters are ok in Java identifiers, but not in JS.
    try{ testSame("a['A\u0004']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // upper case lower half of o from phonetic extensions set.
    // valid in Safari, not in Firefox, IE.
    try{ test("a['\u1d17A']", "a['\u1d17A']");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    // Latin capital N with tilde - nice if we handled it, but for now let's
    // only allow simple Latin (aka ASCII) to be converted.
    try{ test("a['\u00d1StuffAfter']", "a['\u00d1StuffAfter']");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDoNotConvert$catena_11() {
    try{ testSame("a[0]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['']");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[' ']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[',']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[';']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[':']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['.']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['0']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p ']");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p' + '']");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    testSame("a[P]");                                                                                       /***** ORIGINAL ASSERTION IS HERE *****/
    try{ testSame("a[$]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p()]");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['default']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // Ignorable control characters are ok in Java identifiers, but not in JS.
    try{ testSame("a['A\u0004']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // upper case lower half of o from phonetic extensions set.
    // valid in Safari, not in Firefox, IE.
    try{ test("a['\u1d17A']", "a['\u1d17A']");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    // Latin capital N with tilde - nice if we handled it, but for now let's
    // only allow simple Latin (aka ASCII) to be converted.
    try{ test("a['\u00d1StuffAfter']", "a['\u00d1StuffAfter']");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDoNotConvert$catena_12() {
    try{ testSame("a[0]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['']");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[' ']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[',']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[';']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[':']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['.']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['0']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p ']");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p' + '']");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[P]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    testSame("a[$]");                                                                                       /***** ORIGINAL ASSERTION IS HERE *****/
    try{ testSame("a[p()]");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['default']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // Ignorable control characters are ok in Java identifiers, but not in JS.
    try{ testSame("a['A\u0004']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // upper case lower half of o from phonetic extensions set.
    // valid in Safari, not in Firefox, IE.
    try{ test("a['\u1d17A']", "a['\u1d17A']");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    // Latin capital N with tilde - nice if we handled it, but for now let's
    // only allow simple Latin (aka ASCII) to be converted.
    try{ test("a['\u00d1StuffAfter']", "a['\u00d1StuffAfter']");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDoNotConvert$catena_13() {
    try{ testSame("a[0]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['']");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[' ']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[',']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[';']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[':']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['.']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['0']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p ']");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p' + '']");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[P]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[$]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    testSame("a[p()]");                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/
    try{ testSame("a['default']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // Ignorable control characters are ok in Java identifiers, but not in JS.
    try{ testSame("a['A\u0004']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // upper case lower half of o from phonetic extensions set.
    // valid in Safari, not in Firefox, IE.
    try{ test("a['\u1d17A']", "a['\u1d17A']");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    // Latin capital N with tilde - nice if we handled it, but for now let's
    // only allow simple Latin (aka ASCII) to be converted.
    try{ test("a['\u00d1StuffAfter']", "a['\u00d1StuffAfter']");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDoNotConvert$catena_14() {
    try{ testSame("a[0]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['']");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[' ']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[',']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[';']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[':']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['.']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['0']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p ']");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p' + '']");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[P]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[$]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p()]");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    testSame("a['default']");                                                                               /***** ORIGINAL ASSERTION IS HERE *****/
    // Ignorable control characters are ok in Java identifiers, but not in JS.
    try{ testSame("a['A\u0004']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // upper case lower half of o from phonetic extensions set.
    // valid in Safari, not in Firefox, IE.
    try{ test("a['\u1d17A']", "a['\u1d17A']");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    // Latin capital N with tilde - nice if we handled it, but for now let's
    // only allow simple Latin (aka ASCII) to be converted.
    try{ test("a['\u00d1StuffAfter']", "a['\u00d1StuffAfter']");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDoNotConvert$catena_15() {
    try{ testSame("a[0]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['']");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[' ']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[',']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[';']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[':']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['.']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['0']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p ']");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p' + '']");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[P]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[$]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p()]");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['default']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // Ignorable control characters are ok in Java identifiers, but not in JS.
    testSame("a['A\u0004']");                                                                               /***** ORIGINAL ASSERTION IS HERE *****/
    // upper case lower half of o from phonetic extensions set.
    // valid in Safari, not in Firefox, IE.
    try{ test("a['\u1d17A']", "a['\u1d17A']");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    // Latin capital N with tilde - nice if we handled it, but for now let's
    // only allow simple Latin (aka ASCII) to be converted.
    try{ test("a['\u00d1StuffAfter']", "a['\u00d1StuffAfter']");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDoNotConvert$catena_16() {
    try{ testSame("a[0]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['']");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[' ']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[',']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[';']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[':']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['.']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['0']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p ']");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p' + '']");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[P]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[$]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p()]");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['default']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // Ignorable control characters are ok in Java identifiers, but not in JS.
    try{ testSame("a['A\u0004']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // upper case lower half of o from phonetic extensions set.
    // valid in Safari, not in Firefox, IE.
    test("a['\u1d17A']", "a['\u1d17A']");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/
    // Latin capital N with tilde - nice if we handled it, but for now let's
    // only allow simple Latin (aka ASCII) to be converted.
    try{ test("a['\u00d1StuffAfter']", "a['\u00d1StuffAfter']");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testDoNotConvert$catena_17() {
    try{ testSame("a[0]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['']");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[' ']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[',']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[';']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[':']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['.']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['0']");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p ']");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['p' + '']");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[P]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[$]");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a[p()]");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testSame("a['default']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // Ignorable control characters are ok in Java identifiers, but not in JS.
    try{ testSame("a['A\u0004']");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    // upper case lower half of o from phonetic extensions set.
    // valid in Safari, not in Firefox, IE.
    try{ test("a['\u1d17A']", "a['\u1d17A']");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    // Latin capital N with tilde - nice if we handled it, but for now let's
    // only allow simple Latin (aka ASCII) to be converted.
    test("a['\u00d1StuffAfter']", "a['\u00d1StuffAfter']");                                                 /***** ORIGINAL ASSERTION IS HERE *****/
  }
trace file: test/com/google/javascript/jscomp/ConvertToDottedPropertiesTest.java
new test num: 22
ori test num: 0
pattern: 00
patches are written to file
running tests...
used time: Finished in 322.50 seconds
Failing tests: 2
	com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps$catena_3
	com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert$catena_15
pattern: 01
try to fix hunk: 1
replace from 199 with range 1 to
        if (Character.isIdentifierIgnorable(s.charAt(i)) ||

patches are written to file
running tests...
used time: Finished in 293.07 seconds
Failing tests: 0
No new failing tests but only 1 hunk
pattern: 10
try to fix hunk: 0
insert before 194 with           Character.isIdentifierIgnorable(s.charAt(0)) ||

patches are written to file
running tests...
used time: Finished in 300.68 seconds
Failing tests: 2
	com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps$catena_3
	com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert$catena_15
No new failing tests but only 1 hunk
pattern: 11
try to fix hunk: 0
insert before 194 with           Character.isIdentifierIgnorable(s.charAt(0)) ||

try to fix hunk: 1
replace from 199 with range 1 to
        if (Character.isIdentifierIgnorable(s.charAt(i)) ||

patches are written to file
running tests...
used time: Finished in 299.90 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
Find 0 new bugs
