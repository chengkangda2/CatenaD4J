{
    "original": {
        "num_of_hunks": 8,
        "0": {
            "file_name": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
            "from_line_no": 301,
            "to_line_no": 302,
            "replaced_with": "          left, leftType, leftIsRefineable ? merged.typeA : null,\n          right, rightType, rightIsRefineable ? merged.typeB : null);\n",
            "replaced": "          left, leftIsRefineable, merged.typeA,\n          right, rightIsRefineable, merged.typeB);\n",
            "patch_type": "replace",
            "next_line_no": 303
        },
        "1": {
            "file_name": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
            "from_line_no": 348,
            "to_line_no": 349,
            "replaced_with": "          left, leftType, leftIsRefineable ? restrictedLeftType : null,\n          right, rightType, rightIsRefineable ? restrictedRightType : null);\n",
            "replaced": "          left, leftIsRefineable, restrictedLeftType,\n          right, rightIsRefineable, restrictedRightType);\n",
            "patch_type": "replace",
            "next_line_no": 350
        },
        "2": {
            "file_name": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
            "from_line_no": 394,
            "to_line_no": 394,
            "replaced_with": "    if (restrictedType != null && restrictedType != originalType) {\n",
            "replaced": "    if (restrictedType != null && !restrictedType.equals(originalType)) {\n",
            "patch_type": "replace",
            "next_line_no": 395
        },
        "3": {
            "file_name": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
            "from_line_no": 407,
            "to_line_no": 408,
            "replaced_with": "      Node left, JSType originalLeftType, JSType restrictedLeftType,\n      Node right, JSType originalRightType, JSType restrictedRightType) {\n",
            "replaced": "      Node left, boolean leftIsRefineable, JSType restrictedLeftType,\n      Node right, boolean rightIsRefineable, JSType restrictedRightType) {\n",
            "patch_type": "replace",
            "next_line_no": 409
        },
        "4": {
            "file_name": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
            "from_line_no": 410,
            "to_line_no": 410,
            "replaced_with": "        restrictedLeftType != null && restrictedLeftType != originalLeftType;\n",
            "replaced": "        leftIsRefineable && restrictedLeftType != null;\n",
            "patch_type": "replace",
            "next_line_no": 411
        },
        "5": {
            "file_name": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
            "from_line_no": 412,
            "to_line_no": 412,
            "replaced_with": "        restrictedRightType != null && restrictedRightType != originalRightType;\n",
            "replaced": "        rightIsRefineable && restrictedRightType != null;\n",
            "patch_type": "replace",
            "next_line_no": 413
        },
        "6": {
            "file_name": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
            "from_line_no": 430,
            "to_line_no": 434,
            "replaced_with": "      return maybeRestrictName(\n          blindScope, name, type,\n          type.getRestrictedTypeGivenToBooleanOutcome(outcome));\n",
            "replaced": "      JSType restrictedType =\n          type.getRestrictedTypeGivenToBooleanOutcome(outcome);\n      FlowScope informed = blindScope.createChildFlowScope();\n      declareNameInScope(informed, name, restrictedType);\n      return informed;\n",
            "patch_type": "replace",
            "next_line_no": 435
        },
        "7": {
            "file_name": "src/com/google/javascript/rhino/jstype/JSType.java",
            "replaced_with": "    if (outcome && this == getNativeType(JSTypeNative.UNKNOWN_TYPE)) {\n      return getNativeType(JSTypeNative.CHECKED_UNKNOWN_TYPE);\n    }\n",
            "patch_type": "insert",
            "next_line_no": 883
        }
    },
    "method": {
        "failing_tests": [
            "com.google.javascript.jscomp.TypeCheckTest::testIssue783",
            "com.google.javascript.jscomp.TypeCheckTest::testMissingProperty20",
            "com.google.javascript.rhino.jstype.JSTypeTest::testRestrictedTypeGivenToBoolean"
        ],
        "com.google.javascript.jscomp.TypeCheckTest::testIssue783": {
            "file_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
            "Instance": "Begin: Pos(5996, 10)\nEnd: Pos(6008, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_167/test//com/google/javascript/jscomp/TypeCheckTest.java\nName: testIssue783\nChilds: [StatementAssertion<Begin: Pos(5997, 5), End: Pos(6007, 54)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_167/test//com/google/javascript/jscomp/TypeCheckTest.java",
            "name": "testIssue783",
            "begin": "Pos(5996, 10)",
            "end": "Pos(6008, 3)",
            "begin_line_no": 5996,
            "end_line_no": 6008,
            "child": [
                "Begin: Pos(5997, 5)\nEnd: Pos(6007, 54)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "com.google.javascript.jscomp.TypeCheckTest::testMissingProperty20": {
            "file_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
            "Instance": "Begin: Pos(9114, 10)\nEnd: Pos(9119, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_167/test//com/google/javascript/jscomp/TypeCheckTest.java\nName: testMissingProperty20\nChilds: [StatementAssertion<Begin: Pos(9115, 5), End: Pos(9118, 48)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_167/test//com/google/javascript/jscomp/TypeCheckTest.java",
            "name": "testMissingProperty20",
            "begin": "Pos(9114, 10)",
            "end": "Pos(9119, 3)",
            "begin_line_no": 9114,
            "end_line_no": 9119,
            "child": [
                "Begin: Pos(9115, 5)\nEnd: Pos(9118, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "com.google.javascript.rhino.jstype.JSTypeTest::testRestrictedTypeGivenToBoolean": {
            "file_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
            "check": [
                "Use pattern matching: .assertTypeEquals",
                "Use pattern matching: .assertTypeEquals",
                "Use pattern matching: .assertTypeEquals",
                "Use pattern matching: .assertTypeEquals",
                "Use pattern matching: .assertTypeEquals",
                "Use pattern matching: .assertTypeEquals",
                "Use pattern matching: .assertTypeEquals",
                "Use pattern matching: .assertTypeEquals",
                "Use pattern matching: .assertTypeEquals",
                "Use pattern matching: .assertTypeEquals",
                "Use pattern matching: .assertTypeEquals",
                "Use pattern matching: .assertTypeEquals",
                "Use pattern matching: .assertTypeEquals",
                "Use pattern matching: .assertTypeEquals",
                "Use pattern matching: .assertTypeEquals",
                "Use pattern matching: .assertTypeEquals",
                "Use pattern matching: .assertTypeEquals",
                "Use pattern matching: .assertTypeEquals",
                "Use pattern matching: .assertTypeEquals",
                "Use pattern matching: .assertTypeEquals",
                "Use pattern matching: .assertTypeEquals",
                "Use pattern matching: .assertTypeEquals",
                "Use pattern matching: .assertTypeEquals",
                "Use pattern matching: .assertTypeEquals"
            ],
            "Instance": "Begin: Pos(5215, 3)\nEnd: Pos(5282, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_167/test//com/google/javascript/rhino/jstype/JSTypeTest.java\nName: testRestrictedTypeGivenToBoolean\nChilds: [StatementAssertion<Begin: Pos(5218, 5), End: Pos(5219, 67)>,\nStatementAssertion<Begin: Pos(5220, 5), End: Pos(5221, 68)>,\nStatementAssertion<Begin: Pos(5223, 5), End: Pos(5224, 64)>,\nStatementAssertion<Begin: Pos(5225, 5), End: Pos(5226, 65)>,\nStatementAssertion<Begin: Pos(5228, 5), End: Pos(5229, 66)>,\nStatementAssertion<Begin: Pos(5230, 5), End: Pos(5231, 67)>,\nStatementAssertion<Begin: Pos(5233, 5), End: Pos(5234, 66)>,\nStatementAssertion<Begin: Pos(5235, 5), End: Pos(5236, 67)>,\nStatementAssertion<Begin: Pos(5238, 5), End: Pos(5239, 73)>,\nStatementAssertion<Begin: Pos(5240, 5), End: Pos(5241, 74)>,\nStatementAssertion<Begin: Pos(5243, 5), End: Pos(5244, 64)>,\nStatementAssertion<Begin: Pos(5245, 5), End: Pos(5246, 65)>,\nStatementAssertion<Begin: Pos(5248, 5), End: Pos(5249, 69)>,\nStatementAssertion<Begin: Pos(5250, 5), End: Pos(5251, 70)>,\nStatementAssertion<Begin: Pos(5253, 5), End: Pos(5254, 62)>,\nStatementAssertion<Begin: Pos(5255, 5), End: Pos(5256, 63)>,\nStatementAssertion<Begin: Pos(5258, 5), End: Pos(5259, 63)>,\nStatementAssertion<Begin: Pos(5260, 5), End: Pos(5261, 64)>,\nStatementAssertion<Begin: Pos(5263, 5), End: Pos(5264, 67)>,\nStatementAssertion<Begin: Pos(5265, 5), End: Pos(5266, 68)>,\nStatementAssertion<Begin: Pos(5271, 5), End: Pos(5272, 74)>,\nStatementAssertion<Begin: Pos(5273, 5), End: Pos(5274, 75)>,\nStatementAssertion<Begin: Pos(5278, 5), End: Pos(5279, 75)>,\nStatementAssertion<Begin: Pos(5280, 5), End: Pos(5281, 76)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_167/test//com/google/javascript/rhino/jstype/JSTypeTest.java",
            "name": "testRestrictedTypeGivenToBoolean",
            "begin": "Pos(5215, 3)",
            "end": "Pos(5282, 3)",
            "begin_line_no": 5215,
            "end_line_no": 5282,
            "child": [
                "Begin: Pos(5218, 5)\nEnd: Pos(5219, 67)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(5220, 5)\nEnd: Pos(5221, 68)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(5223, 5)\nEnd: Pos(5224, 64)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(5225, 5)\nEnd: Pos(5226, 65)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(5228, 5)\nEnd: Pos(5229, 66)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(5230, 5)\nEnd: Pos(5231, 67)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(5233, 5)\nEnd: Pos(5234, 66)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(5235, 5)\nEnd: Pos(5236, 67)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(5238, 5)\nEnd: Pos(5239, 73)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(5240, 5)\nEnd: Pos(5241, 74)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(5243, 5)\nEnd: Pos(5244, 64)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(5245, 5)\nEnd: Pos(5246, 65)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(5248, 5)\nEnd: Pos(5249, 69)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(5250, 5)\nEnd: Pos(5251, 70)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(5253, 5)\nEnd: Pos(5254, 62)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(5255, 5)\nEnd: Pos(5256, 63)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(5258, 5)\nEnd: Pos(5259, 63)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(5260, 5)\nEnd: Pos(5261, 64)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(5263, 5)\nEnd: Pos(5264, 67)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(5265, 5)\nEnd: Pos(5266, 68)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(5271, 5)\nEnd: Pos(5272, 74)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(5273, 5)\nEnd: Pos(5274, 75)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(5278, 5)\nEnd: Pos(5279, 75)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(5280, 5)\nEnd: Pos(5281, 76)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_0() {\n    // simple cases\n    assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_1() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_2() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_3() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_4() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_5() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_6() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_7() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_8() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_9() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_10() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_11() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_12() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_13() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_14() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_15() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_16() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_17() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_18() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_19() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_20() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_21() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_22() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_23() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_0() {\n    // simple cases\n    assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_1() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_2() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "3": "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_3() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "4": "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_4() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "5": "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_5() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "6": "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_6() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "7": "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_7() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "8": "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_8() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "9": "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_9() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "10": "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_10() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "11": "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_11() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "12": "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_12() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "13": "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_13() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "14": "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_14() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "15": "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_15() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "16": "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_16() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "17": "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_17() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "18": "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_18() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "19": "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_19() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "20": "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_20() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "21": "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_21() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "22": "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_22() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "23": "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_23() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        }
    },
    "00000001": {
        "failing_tests": [
            "com.google.javascript.rhino.jstype.JSTypeTest::testRestrictedTypeGivenToBoolean$catena_18"
        ]
    },
    "00000011": {
        "failing_tests": [
            "com.google.javascript.jscomp.TypeCheckTest::testMissingProperty20"
        ]
    }
}