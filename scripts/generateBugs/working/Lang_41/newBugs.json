{
    "original": {
        "num_of_hunks": 8,
        "0": {
            "file_name": "src/java/org/apache/commons/lang/ClassUtils.java",
            "replaced_with": "        StringBuffer arrayPrefix = new StringBuffer();\n",
            "patch_type": "insert",
            "next_line_no": 191
        },
        "1": {
            "file_name": "src/java/org/apache/commons/lang/ClassUtils.java",
            "replaced_with": "        if (className.startsWith(\"[\")) {\n            while (className.charAt(0) == '[') {\n                className = className.substring(1);\n                arrayPrefix.append(\"[]\");\n            }\n",
            "patch_type": "insert",
            "next_line_no": 193
        },
        "2": {
            "file_name": "src/java/org/apache/commons/lang/ClassUtils.java",
            "replaced_with": "            if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {\n                className = className.substring(1, className.length() - 1);\n            }\n        }\n",
            "patch_type": "insert",
            "next_line_no": 194
        },
        "3": {
            "file_name": "src/java/org/apache/commons/lang/ClassUtils.java",
            "replaced_with": "        if (reverseAbbreviationMap.containsKey(className)) {\n            className = reverseAbbreviationMap.get(className);\n        }\n",
            "patch_type": "insert",
            "next_line_no": 195
        },
        "4": {
            "file_name": "src/java/org/apache/commons/lang/ClassUtils.java",
            "from_line_no": 203,
            "to_line_no": 203,
            "replaced_with": "        return out + arrayPrefix;\n",
            "replaced": "        return out;\n",
            "patch_type": "replace",
            "next_line_no": 204
        },
        "5": {
            "file_name": "src/java/org/apache/commons/lang/ClassUtils.java",
            "from_line_no": 245,
            "to_line_no": 245,
            "replaced_with": "        if (className == null || className.length() == 0) {\n",
            "replaced": "        if (className == null) {\n",
            "patch_type": "replace",
            "next_line_no": 246
        },
        "6": {
            "file_name": "src/java/org/apache/commons/lang/ClassUtils.java",
            "replaced_with": "        while (className.charAt(0) == '[') {\n            className = className.substring(1);\n        }\n",
            "patch_type": "insert",
            "next_line_no": 250
        },
        "7": {
            "file_name": "src/java/org/apache/commons/lang/ClassUtils.java",
            "replaced_with": "        if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {\n            className = className.substring(1);\n        }\n",
            "patch_type": "insert",
            "next_line_no": 251
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class",
            "org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class"
        ],
        "org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class": {
            "file_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
            "Instance": "Begin: Pos(91, 12)\nEnd: Pos(124, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_41/src/test//org/apache/commons/lang/ClassUtilsTest.java\nName: test_getShortClassName_Class\nChilds: [StatementAssertion<Begin: Pos(92, 9), End: Pos(92, 83)>,\nStatementAssertion<Begin: Pos(93, 9), End: Pos(93, 81)>,\nStatementAssertion<Begin: Pos(94, 9), End: Pos(94, 69)>,\nStatementAssertion<Begin: Pos(97, 9), End: Pos(97, 79)>,\nStatementAssertion<Begin: Pos(98, 9), End: Pos(98, 85)>,\nStatementAssertion<Begin: Pos(101, 9), End: Pos(101, 77)>,\nStatementAssertion<Begin: Pos(102, 9), End: Pos(102, 71)>,\nStatementAssertion<Begin: Pos(103, 9), End: Pos(103, 71)>,\nStatementAssertion<Begin: Pos(104, 9), End: Pos(104, 73)>,\nStatementAssertion<Begin: Pos(105, 9), End: Pos(105, 69)>,\nStatementAssertion<Begin: Pos(106, 9), End: Pos(106, 71)>,\nStatementAssertion<Begin: Pos(107, 9), End: Pos(107, 73)>,\nStatementAssertion<Begin: Pos(108, 9), End: Pos(108, 75)>,\nStatementAssertion<Begin: Pos(111, 9), End: Pos(111, 81)>,\nStatementAssertion<Begin: Pos(112, 9), End: Pos(112, 75)>,\nStatementAssertion<Begin: Pos(113, 9), End: Pos(113, 75)>,\nStatementAssertion<Begin: Pos(114, 9), End: Pos(114, 77)>,\nStatementAssertion<Begin: Pos(115, 9), End: Pos(115, 73)>,\nStatementAssertion<Begin: Pos(116, 9), End: Pos(116, 75)>,\nStatementAssertion<Begin: Pos(117, 9), End: Pos(117, 77)>,\nStatementAssertion<Begin: Pos(118, 9), End: Pos(118, 79)>,\nStatementAssertion<Begin: Pos(121, 9), End: Pos(121, 83)>,\nStatementAssertion<Begin: Pos(122, 9), End: Pos(122, 87)>,\nStatementAssertion<Begin: Pos(123, 9), End: Pos(123, 91)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_41/src/test//org/apache/commons/lang/ClassUtilsTest.java",
            "name": "test_getShortClassName_Class",
            "begin": "Pos(91, 12)",
            "end": "Pos(124, 5)",
            "begin_line_no": 91,
            "end_line_no": 124,
            "child": [
                "Begin: Pos(92, 9)\nEnd: Pos(92, 83)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(93, 9)\nEnd: Pos(93, 81)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(94, 9)\nEnd: Pos(94, 69)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(97, 9)\nEnd: Pos(97, 79)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(98, 9)\nEnd: Pos(98, 85)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(101, 9)\nEnd: Pos(101, 77)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(102, 9)\nEnd: Pos(102, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(103, 9)\nEnd: Pos(103, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(104, 9)\nEnd: Pos(104, 73)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(105, 9)\nEnd: Pos(105, 69)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(106, 9)\nEnd: Pos(106, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(107, 9)\nEnd: Pos(107, 73)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(108, 9)\nEnd: Pos(108, 75)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(111, 9)\nEnd: Pos(111, 81)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(112, 9)\nEnd: Pos(112, 75)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(113, 9)\nEnd: Pos(113, 75)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(114, 9)\nEnd: Pos(114, 77)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(115, 9)\nEnd: Pos(115, 73)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(116, 9)\nEnd: Pos(116, 75)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(117, 9)\nEnd: Pos(117, 77)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(118, 9)\nEnd: Pos(118, 79)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(121, 9)\nEnd: Pos(121, 83)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(122, 9)\nEnd: Pos(122, 87)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(123, 9)\nEnd: Pos(123, 91)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void test_getShortClassName_Class$catena_0() {\n        assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getShortClassName_Class$catena_1() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getShortClassName_Class$catena_2() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getShortClassName_Class$catena_3() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getShortClassName_Class$catena_4() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getShortClassName_Class$catena_5() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getShortClassName_Class$catena_6() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getShortClassName_Class$catena_7() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getShortClassName_Class$catena_8() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getShortClassName_Class$catena_9() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getShortClassName_Class$catena_10() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getShortClassName_Class$catena_11() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getShortClassName_Class$catena_12() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getShortClassName_Class$catena_13() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getShortClassName_Class$catena_14() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getShortClassName_Class$catena_15() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getShortClassName_Class$catena_16() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getShortClassName_Class$catena_17() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getShortClassName_Class$catena_18() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getShortClassName_Class$catena_19() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getShortClassName_Class$catena_20() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getShortClassName_Class$catena_21() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getShortClassName_Class$catena_22() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getShortClassName_Class$catena_23() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));                 /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void test_getShortClassName_Class$catena_0() {\n        assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void test_getShortClassName_Class$catena_1() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void test_getShortClassName_Class$catena_2() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void test_getShortClassName_Class$catena_3() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    public void test_getShortClassName_Class$catena_4() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    public void test_getShortClassName_Class$catena_5() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "6": "    public void test_getShortClassName_Class$catena_6() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "7": "    public void test_getShortClassName_Class$catena_7() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "8": "    public void test_getShortClassName_Class$catena_8() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "9": "    public void test_getShortClassName_Class$catena_9() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "10": "    public void test_getShortClassName_Class$catena_10() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "11": "    public void test_getShortClassName_Class$catena_11() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "12": "    public void test_getShortClassName_Class$catena_12() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "13": "    public void test_getShortClassName_Class$catena_13() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "14": "    public void test_getShortClassName_Class$catena_14() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "15": "    public void test_getShortClassName_Class$catena_15() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "16": "    public void test_getShortClassName_Class$catena_16() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "17": "    public void test_getShortClassName_Class$catena_17() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "18": "    public void test_getShortClassName_Class$catena_18() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "19": "    public void test_getShortClassName_Class$catena_19() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "20": "    public void test_getShortClassName_Class$catena_20() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "21": "    public void test_getShortClassName_Class$catena_21() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "22": "    public void test_getShortClassName_Class$catena_22() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "23": "    public void test_getShortClassName_Class$catena_23() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));                 /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class": {
            "file_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
            "Instance": "Begin: Pos(140, 12)\nEnd: Pos(162, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_41/src/test//org/apache/commons/lang/ClassUtilsTest.java\nName: test_getPackageName_Class\nChilds: [StatementAssertion<Begin: Pos(141, 9), End: Pos(141, 75)>,\nStatementAssertion<Begin: Pos(142, 9), End: Pos(142, 78)>,\nStatementAssertion<Begin: Pos(143, 9), End: Pos(143, 65)>,\nStatementAssertion<Begin: Pos(146, 9), End: Pos(146, 77)>,\nStatementAssertion<Begin: Pos(149, 9), End: Pos(149, 69)>,\nStatementAssertion<Begin: Pos(150, 9), End: Pos(150, 66)>,\nStatementAssertion<Begin: Pos(151, 9), End: Pos(151, 66)>,\nStatementAssertion<Begin: Pos(152, 9), End: Pos(152, 67)>,\nStatementAssertion<Begin: Pos(153, 9), End: Pos(153, 65)>,\nStatementAssertion<Begin: Pos(154, 9), End: Pos(154, 66)>,\nStatementAssertion<Begin: Pos(155, 9), End: Pos(155, 67)>,\nStatementAssertion<Begin: Pos(156, 9), End: Pos(156, 68)>,\nStatementAssertion<Begin: Pos(159, 9), End: Pos(159, 79)>,\nStatementAssertion<Begin: Pos(160, 9), End: Pos(160, 81)>,\nStatementAssertion<Begin: Pos(161, 9), End: Pos(161, 83)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_41/src/test//org/apache/commons/lang/ClassUtilsTest.java",
            "name": "test_getPackageName_Class",
            "begin": "Pos(140, 12)",
            "end": "Pos(162, 5)",
            "begin_line_no": 140,
            "end_line_no": 162,
            "child": [
                "Begin: Pos(141, 9)\nEnd: Pos(141, 75)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(142, 9)\nEnd: Pos(142, 78)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(143, 9)\nEnd: Pos(143, 65)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(146, 9)\nEnd: Pos(146, 77)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(149, 9)\nEnd: Pos(149, 69)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(150, 9)\nEnd: Pos(150, 66)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(151, 9)\nEnd: Pos(151, 66)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(152, 9)\nEnd: Pos(152, 67)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(153, 9)\nEnd: Pos(153, 65)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(154, 9)\nEnd: Pos(154, 66)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(155, 9)\nEnd: Pos(155, 67)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(156, 9)\nEnd: Pos(156, 68)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(159, 9)\nEnd: Pos(159, 79)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(160, 9)\nEnd: Pos(160, 81)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(161, 9)\nEnd: Pos(161, 83)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void test_getPackageName_Class$catena_0() {\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getPackageName_Class$catena_1() {\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"\", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getPackageName_Class$catena_2() {\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"\", ClassUtils.getPackageName((Class)null));                                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // LANG-535\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getPackageName_Class$catena_3() {\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Primitive Arrays\n        try{ assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getPackageName_Class$catena_4() {\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"\", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getPackageName_Class$catena_5() {\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"\", ClassUtils.getPackageName(byte[].class));                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"\", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getPackageName_Class$catena_6() {\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"\", ClassUtils.getPackageName(char[].class));                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"\", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getPackageName_Class$catena_7() {\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"\", ClassUtils.getPackageName(short[].class));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"\", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getPackageName_Class$catena_8() {\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"\", ClassUtils.getPackageName(int[].class));                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"\", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getPackageName_Class$catena_9() {\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"\", ClassUtils.getPackageName(long[].class));                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"\", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getPackageName_Class$catena_10() {\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"\", ClassUtils.getPackageName(float[].class));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"\", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getPackageName_Class$catena_11() {\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"\", ClassUtils.getPackageName(double[].class));                                        /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getPackageName_Class$catena_12() {\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getPackageName_Class$catena_13() {\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void test_getPackageName_Class$catena_14() {\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));                         /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void test_getPackageName_Class$catena_0() {\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void test_getPackageName_Class$catena_1() {\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"\", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void test_getPackageName_Class$catena_2() {\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"\", ClassUtils.getPackageName((Class)null));                                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // LANG-535\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void test_getPackageName_Class$catena_3() {\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Primitive Arrays\n        try{ assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    public void test_getPackageName_Class$catena_4() {\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"\", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    public void test_getPackageName_Class$catena_5() {\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"\", ClassUtils.getPackageName(byte[].class));                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"\", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "6": "    public void test_getPackageName_Class$catena_6() {\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"\", ClassUtils.getPackageName(char[].class));                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"\", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "7": "    public void test_getPackageName_Class$catena_7() {\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"\", ClassUtils.getPackageName(short[].class));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"\", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "8": "    public void test_getPackageName_Class$catena_8() {\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"\", ClassUtils.getPackageName(int[].class));                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"\", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "9": "    public void test_getPackageName_Class$catena_9() {\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"\", ClassUtils.getPackageName(long[].class));                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"\", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "10": "    public void test_getPackageName_Class$catena_10() {\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"\", ClassUtils.getPackageName(float[].class));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"\", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "11": "    public void test_getPackageName_Class$catena_11() {\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"\", ClassUtils.getPackageName(double[].class));                                        /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "12": "    public void test_getPackageName_Class$catena_12() {\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "13": "    public void test_getPackageName_Class$catena_13() {\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "14": "    public void test_getPackageName_Class$catena_14() {\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));                         /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "00000111": {
        "failing_tests": [
            "org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3",
            "org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13",
            "org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12",
            "org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14"
        ]
    },
    "11101000": {
        "failing_tests": [
            "org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21",
            "org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4",
            "org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3",
            "org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23",
            "org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22"
        ]
    },
    "11111000": {
        "failing_tests": [
            "org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13",
            "org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19",
            "org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18",
            "org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17",
            "org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16",
            "org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15",
            "org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20",
            "org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14"
        ]
    }
}