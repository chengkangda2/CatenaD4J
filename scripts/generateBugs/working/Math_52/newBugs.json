{
    "original": {
        "num_of_hunks": 3,
        "0": {
            "file_name": "src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java",
            "from_line_no": 344,
            "to_line_no": 344,
            "replaced_with": "  final double inPlaneThreshold = 0.001;\n  if (c <= inPlaneThreshold * k.getNorm() * u3.getNorm()) {\n",
            "replaced": "  if (c == 0) {\n",
            "patch_type": "replace",
            "next_line_no": 345
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java",
            "from_line_no": 353,
            "to_line_no": 353,
            "replaced_with": "    if (c <= inPlaneThreshold * k.getNorm() * u2Prime.getNorm()) {\n",
            "replaced": "    if (c == 0) {\n",
            "patch_type": "replace",
            "next_line_no": 354
        },
        "2": {
            "file_name": "src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java",
            "from_line_no": 359,
            "to_line_no": 359,
            "replaced_with": "      if (c <= 0) {\n",
            "replaced": "      if (c == 0) {\n",
            "patch_type": "replace",
            "next_line_no": 360
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math.geometry.euclidean.threed.RotationTest::testIssue639"
        ],
        "org.apache.commons.math.geometry.euclidean.threed.RotationTest::testIssue639": {
            "file_path": "src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java",
            "Instance": "Begin: Pos(479, 3)\nEnd: Pos(492, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_52/src/test/java//org/apache/commons/math/geometry/euclidean/threed/RotationTest.java\nName: testIssue639\nChilds: [StatementAssertion<Begin: Pos(488, 7), End: Pos(488, 78)>,\nStatementAssertion<Begin: Pos(489, 7), End: Pos(489, 78)>,\nStatementAssertion<Begin: Pos(490, 7), End: Pos(490, 78)>,\nStatementAssertion<Begin: Pos(491, 7), End: Pos(491, 78)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_52/src/test/java//org/apache/commons/math/geometry/euclidean/threed/RotationTest.java",
            "name": "testIssue639",
            "begin": "Pos(479, 3)",
            "end": "Pos(492, 3)",
            "begin_line_no": 479,
            "end_line_no": 492,
            "child": [
                "Begin: Pos(488, 7)\nEnd: Pos(488, 78)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(489, 7)\nEnd: Pos(489, 78)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(490, 7)\nEnd: Pos(490, 78)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(491, 7)\nEnd: Pos(491, 78)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  @Test\n  public void testIssue639$catena_0(){\n      Vector3D u1 = new Vector3D(-1321008684645961.0 /  268435456.0,\n                                 -5774608829631843.0 /  268435456.0,\n                                 -3822921525525679.0 / 4294967296.0);\n      Vector3D u2 =new Vector3D( -5712344449280879.0 /    2097152.0,\n                                 -2275058564560979.0 /    1048576.0,\n                                  4423475992255071.0 /      65536.0);\n      Rotation rot = new Rotation(u1, u2, Vector3D.PLUS_I,Vector3D.PLUS_K);\n      Assert.assertEquals( 0.6228370359608200639829222, rot.getQ0(), 1.0e-15);                              /***** ORIGINAL ASSERTION IS HERE *****/\n      try{ Assert.assertEquals( 0.0257707621456498790029987, rot.getQ1(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ Assert.assertEquals(-0.0000000002503012255839931, rot.getQ2(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ Assert.assertEquals(-0.7819270390861109450724902, rot.getQ3(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  @Test\n  public void testIssue639$catena_1(){\n      Vector3D u1 = new Vector3D(-1321008684645961.0 /  268435456.0,\n                                 -5774608829631843.0 /  268435456.0,\n                                 -3822921525525679.0 / 4294967296.0);\n      Vector3D u2 =new Vector3D( -5712344449280879.0 /    2097152.0,\n                                 -2275058564560979.0 /    1048576.0,\n                                  4423475992255071.0 /      65536.0);\n      Rotation rot = new Rotation(u1, u2, Vector3D.PLUS_I,Vector3D.PLUS_K);\n      try{ Assert.assertEquals( 0.6228370359608200639829222, rot.getQ0(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n      Assert.assertEquals( 0.0257707621456498790029987, rot.getQ1(), 1.0e-15);                              /***** ORIGINAL ASSERTION IS HERE *****/\n      try{ Assert.assertEquals(-0.0000000002503012255839931, rot.getQ2(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ Assert.assertEquals(-0.7819270390861109450724902, rot.getQ3(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  @Test\n  public void testIssue639$catena_2(){\n      Vector3D u1 = new Vector3D(-1321008684645961.0 /  268435456.0,\n                                 -5774608829631843.0 /  268435456.0,\n                                 -3822921525525679.0 / 4294967296.0);\n      Vector3D u2 =new Vector3D( -5712344449280879.0 /    2097152.0,\n                                 -2275058564560979.0 /    1048576.0,\n                                  4423475992255071.0 /      65536.0);\n      Rotation rot = new Rotation(u1, u2, Vector3D.PLUS_I,Vector3D.PLUS_K);\n      try{ Assert.assertEquals( 0.6228370359608200639829222, rot.getQ0(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ Assert.assertEquals( 0.0257707621456498790029987, rot.getQ1(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n      Assert.assertEquals(-0.0000000002503012255839931, rot.getQ2(), 1.0e-15);                              /***** ORIGINAL ASSERTION IS HERE *****/\n      try{ Assert.assertEquals(-0.7819270390861109450724902, rot.getQ3(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  @Test\n  public void testIssue639$catena_3(){\n      Vector3D u1 = new Vector3D(-1321008684645961.0 /  268435456.0,\n                                 -5774608829631843.0 /  268435456.0,\n                                 -3822921525525679.0 / 4294967296.0);\n      Vector3D u2 =new Vector3D( -5712344449280879.0 /    2097152.0,\n                                 -2275058564560979.0 /    1048576.0,\n                                  4423475992255071.0 /      65536.0);\n      Rotation rot = new Rotation(u1, u2, Vector3D.PLUS_I,Vector3D.PLUS_K);\n      try{ Assert.assertEquals( 0.6228370359608200639829222, rot.getQ0(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ Assert.assertEquals( 0.0257707621456498790029987, rot.getQ1(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ Assert.assertEquals(-0.0000000002503012255839931, rot.getQ2(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n      Assert.assertEquals(-0.7819270390861109450724902, rot.getQ3(), 1.0e-15);                              /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  @Test\n  public void testIssue639$catena_0(){\n      Vector3D u1 = new Vector3D(-1321008684645961.0 /  268435456.0,\n                                 -5774608829631843.0 /  268435456.0,\n                                 -3822921525525679.0 / 4294967296.0);\n      Vector3D u2 =new Vector3D( -5712344449280879.0 /    2097152.0,\n                                 -2275058564560979.0 /    1048576.0,\n                                  4423475992255071.0 /      65536.0);\n      Rotation rot = new Rotation(u1, u2, Vector3D.PLUS_I,Vector3D.PLUS_K);\n      Assert.assertEquals( 0.6228370359608200639829222, rot.getQ0(), 1.0e-15);                              /***** ORIGINAL ASSERTION IS HERE *****/\n      try{ Assert.assertEquals( 0.0257707621456498790029987, rot.getQ1(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ Assert.assertEquals(-0.0000000002503012255839931, rot.getQ2(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ Assert.assertEquals(-0.7819270390861109450724902, rot.getQ3(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  @Test\n  public void testIssue639$catena_1(){\n      Vector3D u1 = new Vector3D(-1321008684645961.0 /  268435456.0,\n                                 -5774608829631843.0 /  268435456.0,\n                                 -3822921525525679.0 / 4294967296.0);\n      Vector3D u2 =new Vector3D( -5712344449280879.0 /    2097152.0,\n                                 -2275058564560979.0 /    1048576.0,\n                                  4423475992255071.0 /      65536.0);\n      Rotation rot = new Rotation(u1, u2, Vector3D.PLUS_I,Vector3D.PLUS_K);\n      try{ Assert.assertEquals( 0.6228370359608200639829222, rot.getQ0(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n      Assert.assertEquals( 0.0257707621456498790029987, rot.getQ1(), 1.0e-15);                              /***** ORIGINAL ASSERTION IS HERE *****/\n      try{ Assert.assertEquals(-0.0000000002503012255839931, rot.getQ2(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ Assert.assertEquals(-0.7819270390861109450724902, rot.getQ3(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  @Test\n  public void testIssue639$catena_2(){\n      Vector3D u1 = new Vector3D(-1321008684645961.0 /  268435456.0,\n                                 -5774608829631843.0 /  268435456.0,\n                                 -3822921525525679.0 / 4294967296.0);\n      Vector3D u2 =new Vector3D( -5712344449280879.0 /    2097152.0,\n                                 -2275058564560979.0 /    1048576.0,\n                                  4423475992255071.0 /      65536.0);\n      Rotation rot = new Rotation(u1, u2, Vector3D.PLUS_I,Vector3D.PLUS_K);\n      try{ Assert.assertEquals( 0.6228370359608200639829222, rot.getQ0(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ Assert.assertEquals( 0.0257707621456498790029987, rot.getQ1(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n      Assert.assertEquals(-0.0000000002503012255839931, rot.getQ2(), 1.0e-15);                              /***** ORIGINAL ASSERTION IS HERE *****/\n      try{ Assert.assertEquals(-0.7819270390861109450724902, rot.getQ3(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "3": "  @Test\n  public void testIssue639$catena_3(){\n      Vector3D u1 = new Vector3D(-1321008684645961.0 /  268435456.0,\n                                 -5774608829631843.0 /  268435456.0,\n                                 -3822921525525679.0 / 4294967296.0);\n      Vector3D u2 =new Vector3D( -5712344449280879.0 /    2097152.0,\n                                 -2275058564560979.0 /    1048576.0,\n                                  4423475992255071.0 /      65536.0);\n      Rotation rot = new Rotation(u1, u2, Vector3D.PLUS_I,Vector3D.PLUS_K);\n      try{ Assert.assertEquals( 0.6228370359608200639829222, rot.getQ0(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ Assert.assertEquals( 0.0257707621456498790029987, rot.getQ1(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ Assert.assertEquals(-0.0000000002503012255839931, rot.getQ2(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n      Assert.assertEquals(-0.7819270390861109450724902, rot.getQ3(), 1.0e-15);                              /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        }
    }
}