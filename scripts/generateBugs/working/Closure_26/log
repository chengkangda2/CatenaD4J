---
Begin generate bug_id: Closure_26
num_of_hunks: 3
timeout for running: 3600
use working dir: ./working/data/Closure_26
Try to checkout Closure_26
build dir: ['./working/data/Closure_26/build/classes', './working/data/Closure_26/build/test']
init FileManager
trace file: src/com/google/javascript/jscomp/ProcessCommonJSModules.java
trying to replace old failing tests
edit: replace from 58 range 21 at test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java
to
  public void testExports$catena_0() {
    setFilename("test");
    test(
        "var name = require('name');" +
        "exports.foo = 1;",
        "goog.provide('module$test');" +
        "var module$test = {};" +
        "goog.require('module$name');" +
        "var name$$module$test = module$name;" +
        "module$test.foo = 1;");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test(
        "var name = require('name');" +
        "module.exports = function() {};",
        "goog.provide('module$test');" +
        "var module$test = {};" +
        "goog.require('module$name');" +
        "var name$$module$test = module$name;" +
        "module$test.module$exports = function() {};" +
        "if(module$test.module$exports)" +
        "module$test=module$test.module$exports");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testExports$catena_1() {
    setFilename("test");
    try{ test(
        "var name = require('name');" +
        "exports.foo = 1;",
        "goog.provide('module$test');" +
        "var module$test = {};" +
        "goog.require('module$name');" +
        "var name$$module$test = module$name;" +
        "module$test.foo = 1;");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    test(
        "var name = require('name');" +
        "module.exports = function() {};",
        "goog.provide('module$test');" +
        "var module$test = {};" +
        "goog.require('module$name');" +
        "var name$$module$test = module$name;" +
        "module$test.module$exports = function() {};" +
        "if(module$test.module$exports)" +
        "module$test=module$test.module$exports");                                                          /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 102 range 25 at test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java
to
  public void testModuleName$catena_0() {
    assertEquals("module$foo$baz",
        ProcessCommonJSModules.toModuleName("./baz.js", "foo/bar.js"));                                     /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertEquals("module$foo$baz_bar",
        ProcessCommonJSModules.toModuleName("./baz-bar.js", "foo/bar.js"));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("module$baz",
        ProcessCommonJSModules.toModuleName("../baz.js", "foo/bar.js"));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("module$baz",
        ProcessCommonJSModules.toModuleName("../../baz.js", "foo/bar/abc.js"));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("module$baz", ProcessCommonJSModules.toModuleName(
        "../../../baz.js", "foo/bar/abc/xyz.js"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    setFilename("foo/bar");
    try{ test(
        "var name = require('name');",
        "goog.provide('module$foo$bar'); var module$foo$bar = {};" +
        "goog.require('module$name');" +
        "var name$$module$foo$bar = module$name;");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test(
        "var name = require('./name');",
        "goog.provide('module$foo$bar');" +
        "var module$foo$bar = {};" +
        "goog.require('module$foo$name');" +
        "var name$$module$foo$bar = module$foo$name;");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

  }   public void testModuleName$catena_1() {
    try{ assertEquals("module$foo$baz",
        ProcessCommonJSModules.toModuleName("./baz.js", "foo/bar.js"));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    assertEquals("module$foo$baz_bar",
        ProcessCommonJSModules.toModuleName("./baz-bar.js", "foo/bar.js"));                                 /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertEquals("module$baz",
        ProcessCommonJSModules.toModuleName("../baz.js", "foo/bar.js"));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("module$baz",
        ProcessCommonJSModules.toModuleName("../../baz.js", "foo/bar/abc.js"));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("module$baz", ProcessCommonJSModules.toModuleName(
        "../../../baz.js", "foo/bar/abc/xyz.js"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    setFilename("foo/bar");
    try{ test(
        "var name = require('name');",
        "goog.provide('module$foo$bar'); var module$foo$bar = {};" +
        "goog.require('module$name');" +
        "var name$$module$foo$bar = module$name;");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test(
        "var name = require('./name');",
        "goog.provide('module$foo$bar');" +
        "var module$foo$bar = {};" +
        "goog.require('module$foo$name');" +
        "var name$$module$foo$bar = module$foo$name;");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

  }   public void testModuleName$catena_2() {
    try{ assertEquals("module$foo$baz",
        ProcessCommonJSModules.toModuleName("./baz.js", "foo/bar.js"));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("module$foo$baz_bar",
        ProcessCommonJSModules.toModuleName("./baz-bar.js", "foo/bar.js"));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    assertEquals("module$baz",
        ProcessCommonJSModules.toModuleName("../baz.js", "foo/bar.js"));                                    /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertEquals("module$baz",
        ProcessCommonJSModules.toModuleName("../../baz.js", "foo/bar/abc.js"));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("module$baz", ProcessCommonJSModules.toModuleName(
        "../../../baz.js", "foo/bar/abc/xyz.js"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    setFilename("foo/bar");
    try{ test(
        "var name = require('name');",
        "goog.provide('module$foo$bar'); var module$foo$bar = {};" +
        "goog.require('module$name');" +
        "var name$$module$foo$bar = module$name;");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test(
        "var name = require('./name');",
        "goog.provide('module$foo$bar');" +
        "var module$foo$bar = {};" +
        "goog.require('module$foo$name');" +
        "var name$$module$foo$bar = module$foo$name;");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

  }   public void testModuleName$catena_3() {
    try{ assertEquals("module$foo$baz",
        ProcessCommonJSModules.toModuleName("./baz.js", "foo/bar.js"));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("module$foo$baz_bar",
        ProcessCommonJSModules.toModuleName("./baz-bar.js", "foo/bar.js"));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("module$baz",
        ProcessCommonJSModules.toModuleName("../baz.js", "foo/bar.js"));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    assertEquals("module$baz",
        ProcessCommonJSModules.toModuleName("../../baz.js", "foo/bar/abc.js"));                             /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertEquals("module$baz", ProcessCommonJSModules.toModuleName(
        "../../../baz.js", "foo/bar/abc/xyz.js"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    setFilename("foo/bar");
    try{ test(
        "var name = require('name');",
        "goog.provide('module$foo$bar'); var module$foo$bar = {};" +
        "goog.require('module$name');" +
        "var name$$module$foo$bar = module$name;");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test(
        "var name = require('./name');",
        "goog.provide('module$foo$bar');" +
        "var module$foo$bar = {};" +
        "goog.require('module$foo$name');" +
        "var name$$module$foo$bar = module$foo$name;");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

  }   public void testModuleName$catena_4() {
    try{ assertEquals("module$foo$baz",
        ProcessCommonJSModules.toModuleName("./baz.js", "foo/bar.js"));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("module$foo$baz_bar",
        ProcessCommonJSModules.toModuleName("./baz-bar.js", "foo/bar.js"));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("module$baz",
        ProcessCommonJSModules.toModuleName("../baz.js", "foo/bar.js"));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("module$baz",
        ProcessCommonJSModules.toModuleName("../../baz.js", "foo/bar/abc.js"));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    assertEquals("module$baz", ProcessCommonJSModules.toModuleName(
        "../../../baz.js", "foo/bar/abc/xyz.js"));                                                          /***** ORIGINAL ASSERTION IS HERE *****/
    setFilename("foo/bar");
    try{ test(
        "var name = require('name');",
        "goog.provide('module$foo$bar'); var module$foo$bar = {};" +
        "goog.require('module$name');" +
        "var name$$module$foo$bar = module$name;");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test(
        "var name = require('./name');",
        "goog.provide('module$foo$bar');" +
        "var module$foo$bar = {};" +
        "goog.require('module$foo$name');" +
        "var name$$module$foo$bar = module$foo$name;");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

  }   public void testModuleName$catena_5() {
    try{ assertEquals("module$foo$baz",
        ProcessCommonJSModules.toModuleName("./baz.js", "foo/bar.js"));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("module$foo$baz_bar",
        ProcessCommonJSModules.toModuleName("./baz-bar.js", "foo/bar.js"));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("module$baz",
        ProcessCommonJSModules.toModuleName("../baz.js", "foo/bar.js"));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("module$baz",
        ProcessCommonJSModules.toModuleName("../../baz.js", "foo/bar/abc.js"));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("module$baz", ProcessCommonJSModules.toModuleName(
        "../../../baz.js", "foo/bar/abc/xyz.js"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    setFilename("foo/bar");
    test(
        "var name = require('name');",
        "goog.provide('module$foo$bar'); var module$foo$bar = {};" +
        "goog.require('module$name');" +
        "var name$$module$foo$bar = module$name;");                                                         /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test(
        "var name = require('./name');",
        "goog.provide('module$foo$bar');" +
        "var module$foo$bar = {};" +
        "goog.require('module$foo$name');" +
        "var name$$module$foo$bar = module$foo$name;");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

  }   public void testModuleName$catena_6() {
    try{ assertEquals("module$foo$baz",
        ProcessCommonJSModules.toModuleName("./baz.js", "foo/bar.js"));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("module$foo$baz_bar",
        ProcessCommonJSModules.toModuleName("./baz-bar.js", "foo/bar.js"));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("module$baz",
        ProcessCommonJSModules.toModuleName("../baz.js", "foo/bar.js"));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("module$baz",
        ProcessCommonJSModules.toModuleName("../../baz.js", "foo/bar/abc.js"));                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertEquals("module$baz", ProcessCommonJSModules.toModuleName(
        "../../../baz.js", "foo/bar/abc/xyz.js"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    setFilename("foo/bar");
    try{ test(
        "var name = require('name');",
        "goog.provide('module$foo$bar'); var module$foo$bar = {};" +
        "goog.require('module$name');" +
        "var name$$module$foo$bar = module$name;");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    test(
        "var name = require('./name');",
        "goog.provide('module$foo$bar');" +
        "var module$foo$bar = {};" +
        "goog.require('module$foo$name');" +
        "var name$$module$foo$bar = module$foo$name;");                                                     /***** ORIGINAL ASSERTION IS HERE *****/

  }
edit: replace from 37 range 20 at test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java
to
  public void testWithoutExports$catena_0() {
    setFilename("test");
    test(
        "var name = require('name');" +
        "name()",
        "goog.provide('module$test');" +
        "var module$test = {};" +
        "goog.require('module$name');" +
        "var name$$module$test = module$name;" +
        "name$$module$test();");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/
    setFilename("test/sub");
    try{ test(
        "var name = require('mod/name');" +
        "(function() { name(); })();",
        "goog.provide('module$test$sub');" +
        "var module$test$sub = {};" +
        "goog.require('module$mod$name');" +
        "var name$$module$test$sub = module$mod$name;" +
        "(function() { name$$module$test$sub(); })();");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testWithoutExports$catena_1() {
    setFilename("test");
    try{ test(
        "var name = require('name');" +
        "name()",
        "goog.provide('module$test');" +
        "var module$test = {};" +
        "goog.require('module$name');" +
        "var name$$module$test = module$name;" +
        "name$$module$test();");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    setFilename("test/sub");
    test(
        "var name = require('mod/name');" +
        "(function() { name(); })();",
        "goog.provide('module$test$sub');" +
        "var module$test$sub = {};" +
        "goog.require('module$mod$name');" +
        "var name$$module$test$sub = module$mod$name;" +
        "(function() { name$$module$test$sub(); })();");                                                    /***** ORIGINAL ASSERTION IS HERE *****/
  }
trace file: test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java
new test num: 11
ori test num: 4
pattern: 000
patches are written to file
running tests...
used time: Finished in 250.48 seconds
Failing tests: 9
	com.google.javascript.jscomp.CommandLineRunnerTest::testTransformAMDAndProcessCJS
	com.google.javascript.jscomp.CommandLineRunnerTest::testProcessCJS
	com.google.javascript.jscomp.ProcessCommonJSModulesTest::testExports$catena_0
	com.google.javascript.jscomp.ProcessCommonJSModulesTest::testWithoutExports$catena_0
	com.google.javascript.jscomp.ProcessCommonJSModulesTest::testWithoutExports$catena_1
	com.google.javascript.jscomp.ProcessCommonJSModulesTest::testDash
	com.google.javascript.jscomp.ProcessCommonJSModulesTest::testVarRenaming
	com.google.javascript.jscomp.ProcessCommonJSModulesTest::testModuleName$catena_5
	com.google.javascript.jscomp.ProcessCommonJSModulesTest::testModuleName$catena_6
processed: 000
pattern: 001
try to fix hunk: 2
insert before 228 with       modulesWithExports.add(moduleName);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001
pattern: 010
try to fix hunk: 1
insert before 207 with       if (!modulesWithExports.contains(moduleName)) {
        return;
      }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010
pattern: 100
try to fix hunk: 0
insert before 128 with     private Set<String> modulesWithExports = Sets.newHashSet();

patches are written to file
running tests...
used time: Finished in 229.96 seconds
Failing tests: 9
	com.google.javascript.jscomp.CommandLineRunnerTest::testTransformAMDAndProcessCJS
	com.google.javascript.jscomp.CommandLineRunnerTest::testProcessCJS
	com.google.javascript.jscomp.ProcessCommonJSModulesTest::testExports$catena_0
	com.google.javascript.jscomp.ProcessCommonJSModulesTest::testWithoutExports$catena_0
	com.google.javascript.jscomp.ProcessCommonJSModulesTest::testWithoutExports$catena_1
	com.google.javascript.jscomp.ProcessCommonJSModulesTest::testDash
	com.google.javascript.jscomp.ProcessCommonJSModulesTest::testVarRenaming
	com.google.javascript.jscomp.ProcessCommonJSModulesTest::testModuleName$catena_5
	com.google.javascript.jscomp.ProcessCommonJSModulesTest::testModuleName$catena_6
No new failing tests but only 1 hunk
processed: 100
pattern: 011
try to fix hunk: 1
insert before 207 with       if (!modulesWithExports.contains(moduleName)) {
        return;
      }

try to fix hunk: 2
insert before 228 with       modulesWithExports.add(moduleName);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011
pattern: 101
try to fix hunk: 0
insert before 128 with     private Set<String> modulesWithExports = Sets.newHashSet();

try to fix hunk: 2
insert before 228 with       modulesWithExports.add(moduleName);

patches are written to file
running tests...
used time: Finished in 228.55 seconds
Failing tests: 9
	com.google.javascript.jscomp.CommandLineRunnerTest::testTransformAMDAndProcessCJS
	com.google.javascript.jscomp.CommandLineRunnerTest::testProcessCJS
	com.google.javascript.jscomp.ProcessCommonJSModulesTest::testExports$catena_0
	com.google.javascript.jscomp.ProcessCommonJSModulesTest::testWithoutExports$catena_0
	com.google.javascript.jscomp.ProcessCommonJSModulesTest::testWithoutExports$catena_1
	com.google.javascript.jscomp.ProcessCommonJSModulesTest::testDash
	com.google.javascript.jscomp.ProcessCommonJSModulesTest::testVarRenaming
	com.google.javascript.jscomp.ProcessCommonJSModulesTest::testModuleName$catena_5
	com.google.javascript.jscomp.ProcessCommonJSModulesTest::testModuleName$catena_6
Can independently fix []
Could not fix independently
processed: 101
pattern: 110
try to fix hunk: 0
insert before 128 with     private Set<String> modulesWithExports = Sets.newHashSet();

try to fix hunk: 1
insert before 207 with       if (!modulesWithExports.contains(moduleName)) {
        return;
      }

patches are written to file
running tests...
used time: Finished in 228.72 seconds
Failing tests: 1
	com.google.javascript.jscomp.ProcessCommonJSModulesTest::testExports$catena_1
Includes new failing tests, set to unusable
processed: 110
pattern: 111
try to fix hunk: 0
insert before 128 with     private Set<String> modulesWithExports = Sets.newHashSet();

try to fix hunk: 1
insert before 207 with       if (!modulesWithExports.contains(moduleName)) {
        return;
      }

try to fix hunk: 2
insert before 228 with       modulesWithExports.add(moduleName);

patches are written to file
running tests...
used time: Finished in 231.51 seconds
Failing tests: 0
Can independently fix ['com.google.javascript.jscomp.ProcessCommonJSModulesTest::testDash', 'com.google.javascript.jscomp.ProcessCommonJSModulesTest::testWithoutExports$catena_0', 'com.google.javascript.jscomp.ProcessCommonJSModulesTest::testModuleName$catena_5', 'com.google.javascript.jscomp.ProcessCommonJSModulesTest::testModuleName$catena_6', 'com.google.javascript.jscomp.ProcessCommonJSModulesTest::testVarRenaming', 'com.google.javascript.jscomp.CommandLineRunnerTest::testTransformAMDAndProcessCJS', 'com.google.javascript.jscomp.ProcessCommonJSModulesTest::testWithoutExports$catena_1', 'com.google.javascript.jscomp.ProcessCommonJSModulesTest::testExports$catena_0', 'com.google.javascript.jscomp.CommandLineRunnerTest::testProcessCJS']
select new bug
Pattern: 111
new failing tests:
com.google.javascript.jscomp.ProcessCommonJSModulesTest::testDash
com.google.javascript.jscomp.ProcessCommonJSModulesTest::testWithoutExports$catena_0
com.google.javascript.jscomp.ProcessCommonJSModulesTest::testModuleName$catena_5
com.google.javascript.jscomp.ProcessCommonJSModulesTest::testModuleName$catena_6
com.google.javascript.jscomp.ProcessCommonJSModulesTest::testVarRenaming
com.google.javascript.jscomp.CommandLineRunnerTest::testTransformAMDAndProcessCJS
com.google.javascript.jscomp.ProcessCommonJSModulesTest::testWithoutExports$catena_1
com.google.javascript.jscomp.ProcessCommonJSModulesTest::testExports$catena_0
com.google.javascript.jscomp.CommandLineRunnerTest::testProcessCJS
Save found bug
processed: 111
Find 1 new bugs
