{
    "original": {
        "num_of_hunks": 3,
        "0": {
            "file_name": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
            "replaced_with": "    private Set<String> modulesWithExports = Sets.newHashSet();\n",
            "patch_type": "insert",
            "next_line_no": 128
        },
        "1": {
            "file_name": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
            "replaced_with": "      if (!modulesWithExports.contains(moduleName)) {\n        return;\n      }\n",
            "patch_type": "insert",
            "next_line_no": 207
        },
        "2": {
            "file_name": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
            "replaced_with": "      modulesWithExports.add(moduleName);\n",
            "patch_type": "insert",
            "next_line_no": 228
        }
    },
    "method": {
        "failing_tests": [
            "com.google.javascript.jscomp.CommandLineRunnerTest::testTransformAMDAndProcessCJS",
            "com.google.javascript.jscomp.CommandLineRunnerTest::testProcessCJS",
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest::testExports",
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest::testModuleName",
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest::testDash",
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest::testVarRenaming",
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest::testWithoutExports"
        ],
        "com.google.javascript.jscomp.CommandLineRunnerTest::testTransformAMDAndProcessCJS": {
            "file_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
            "Instance": "Begin: Pos(1052, 10)\nEnd: Pos(1059, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/CommandLineRunnerTest.java\nName: testTransformAMDAndProcessCJS\nChilds: [StatementAssertion<Begin: Pos(1057, 5), End: Pos(1058, 58)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/CommandLineRunnerTest.java",
            "name": "testTransformAMDAndProcessCJS",
            "begin": "Pos(1052, 10)",
            "end": "Pos(1059, 3)",
            "begin_line_no": 1052,
            "end_line_no": 1059,
            "child": [
                "Begin: Pos(1057, 5)\nEnd: Pos(1058, 58)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "com.google.javascript.jscomp.CommandLineRunnerTest::testProcessCJS": {
            "file_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
            "Instance": "Begin: Pos(1044, 10)\nEnd: Pos(1050, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/CommandLineRunnerTest.java\nName: testProcessCJS\nChilds: [StatementAssertion<Begin: Pos(1048, 5), End: Pos(1049, 40)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/CommandLineRunnerTest.java",
            "name": "testProcessCJS",
            "begin": "Pos(1044, 10)",
            "end": "Pos(1050, 3)",
            "begin_line_no": 1044,
            "end_line_no": 1050,
            "child": [
                "Begin: Pos(1048, 5)\nEnd: Pos(1049, 40)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "com.google.javascript.jscomp.ProcessCommonJSModulesTest::testExports": {
            "file_path": "test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java",
            "Instance": "Begin: Pos(58, 10)\nEnd: Pos(78, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/ProcessCommonJSModulesTest.java\nName: testExports\nChilds: [StatementAssertion<Begin: Pos(60, 5), End: Pos(67, 32)>,\nStatementAssertion<Begin: Pos(68, 5), End: Pos(77, 50)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/ProcessCommonJSModulesTest.java",
            "name": "testExports",
            "begin": "Pos(58, 10)",
            "end": "Pos(78, 3)",
            "begin_line_no": 58,
            "end_line_no": 78,
            "child": [
                "Begin: Pos(60, 5)\nEnd: Pos(67, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(68, 5)\nEnd: Pos(77, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testExports$catena_0() {\n    setFilename(\"test\");\n    test(\n        \"var name = require('name');\" +\n        \"exports.foo = 1;\",\n        \"goog.provide('module$test');\" +\n        \"var module$test = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$test = module$name;\" +\n        \"module$test.foo = 1;\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\n        \"var name = require('name');\" +\n        \"module.exports = function() {};\",\n        \"goog.provide('module$test');\" +\n        \"var module$test = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$test = module$name;\" +\n        \"module$test.module$exports = function() {};\" +\n        \"if(module$test.module$exports)\" +\n        \"module$test=module$test.module$exports\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testExports$catena_1() {\n    setFilename(\"test\");\n    try{ test(\n        \"var name = require('name');\" +\n        \"exports.foo = 1;\",\n        \"goog.provide('module$test');\" +\n        \"var module$test = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$test = module$name;\" +\n        \"module$test.foo = 1;\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\n        \"var name = require('name');\" +\n        \"module.exports = function() {};\",\n        \"goog.provide('module$test');\" +\n        \"var module$test = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$test = module$name;\" +\n        \"module$test.module$exports = function() {};\" +\n        \"if(module$test.module$exports)\" +\n        \"module$test=module$test.module$exports\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testExports$catena_0() {\n    setFilename(\"test\");\n    test(\n        \"var name = require('name');\" +\n        \"exports.foo = 1;\",\n        \"goog.provide('module$test');\" +\n        \"var module$test = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$test = module$name;\" +\n        \"module$test.foo = 1;\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\n        \"var name = require('name');\" +\n        \"module.exports = function() {};\",\n        \"goog.provide('module$test');\" +\n        \"var module$test = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$test = module$name;\" +\n        \"module$test.module$exports = function() {};\" +\n        \"if(module$test.module$exports)\" +\n        \"module$test=module$test.module$exports\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testExports$catena_1() {\n    setFilename(\"test\");\n    try{ test(\n        \"var name = require('name');\" +\n        \"exports.foo = 1;\",\n        \"goog.provide('module$test');\" +\n        \"var module$test = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$test = module$name;\" +\n        \"module$test.foo = 1;\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\n        \"var name = require('name');\" +\n        \"module.exports = function() {};\",\n        \"goog.provide('module$test');\" +\n        \"var module$test = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$test = module$name;\" +\n        \"module$test.module$exports = function() {};\" +\n        \"if(module$test.module$exports)\" +\n        \"module$test=module$test.module$exports\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        },
        "com.google.javascript.jscomp.ProcessCommonJSModulesTest::testModuleName": {
            "file_path": "test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java",
            "Instance": "Begin: Pos(102, 10)\nEnd: Pos(126, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/ProcessCommonJSModulesTest.java\nName: testModuleName\nChilds: [StatementAssertion<Begin: Pos(103, 5), End: Pos(104, 71)>,\nStatementAssertion<Begin: Pos(105, 5), End: Pos(106, 75)>,\nStatementAssertion<Begin: Pos(107, 5), End: Pos(108, 72)>,\nStatementAssertion<Begin: Pos(109, 5), End: Pos(110, 79)>,\nStatementAssertion<Begin: Pos(111, 5), End: Pos(112, 50)>,\nStatementAssertion<Begin: Pos(114, 5), End: Pos(118, 51)>,\nStatementAssertion<Begin: Pos(119, 5), End: Pos(124, 55)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/ProcessCommonJSModulesTest.java",
            "name": "testModuleName",
            "begin": "Pos(102, 10)",
            "end": "Pos(126, 3)",
            "begin_line_no": 102,
            "end_line_no": 126,
            "child": [
                "Begin: Pos(103, 5)\nEnd: Pos(104, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(105, 5)\nEnd: Pos(106, 75)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(107, 5)\nEnd: Pos(108, 72)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(109, 5)\nEnd: Pos(110, 79)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(111, 5)\nEnd: Pos(112, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(114, 5)\nEnd: Pos(118, 51)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(119, 5)\nEnd: Pos(124, 55)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testModuleName$catena_0() {\n    assertEquals(\"module$foo$baz\",\n        ProcessCommonJSModules.toModuleName(\"./baz.js\", \"foo/bar.js\"));                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\"module$foo$baz_bar\",\n        ProcessCommonJSModules.toModuleName(\"./baz-bar.js\", \"foo/bar.js\"));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\",\n        ProcessCommonJSModules.toModuleName(\"../baz.js\", \"foo/bar.js\"));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\",\n        ProcessCommonJSModules.toModuleName(\"../../baz.js\", \"foo/bar/abc.js\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\", ProcessCommonJSModules.toModuleName(\n        \"../../../baz.js\", \"foo/bar/abc/xyz.js\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    setFilename(\"foo/bar\");\n    try{ test(\n        \"var name = require('name');\",\n        \"goog.provide('module$foo$bar'); var module$foo$bar = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$foo$bar = module$name;\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\n        \"var name = require('./name');\",\n        \"goog.provide('module$foo$bar');\" +\n        \"var module$foo$bar = {};\" +\n        \"goog.require('module$foo$name');\" +\n        \"var name$$module$foo$bar = module$foo$name;\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
                "  public void testModuleName$catena_1() {\n    try{ assertEquals(\"module$foo$baz\",\n        ProcessCommonJSModules.toModuleName(\"./baz.js\", \"foo/bar.js\"));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\"module$foo$baz_bar\",\n        ProcessCommonJSModules.toModuleName(\"./baz-bar.js\", \"foo/bar.js\"));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\"module$baz\",\n        ProcessCommonJSModules.toModuleName(\"../baz.js\", \"foo/bar.js\"));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\",\n        ProcessCommonJSModules.toModuleName(\"../../baz.js\", \"foo/bar/abc.js\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\", ProcessCommonJSModules.toModuleName(\n        \"../../../baz.js\", \"foo/bar/abc/xyz.js\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    setFilename(\"foo/bar\");\n    try{ test(\n        \"var name = require('name');\",\n        \"goog.provide('module$foo$bar'); var module$foo$bar = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$foo$bar = module$name;\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\n        \"var name = require('./name');\",\n        \"goog.provide('module$foo$bar');\" +\n        \"var module$foo$bar = {};\" +\n        \"goog.require('module$foo$name');\" +\n        \"var name$$module$foo$bar = module$foo$name;\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
                "  public void testModuleName$catena_2() {\n    try{ assertEquals(\"module$foo$baz\",\n        ProcessCommonJSModules.toModuleName(\"./baz.js\", \"foo/bar.js\"));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$foo$baz_bar\",\n        ProcessCommonJSModules.toModuleName(\"./baz-bar.js\", \"foo/bar.js\"));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\"module$baz\",\n        ProcessCommonJSModules.toModuleName(\"../baz.js\", \"foo/bar.js\"));                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\"module$baz\",\n        ProcessCommonJSModules.toModuleName(\"../../baz.js\", \"foo/bar/abc.js\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\", ProcessCommonJSModules.toModuleName(\n        \"../../../baz.js\", \"foo/bar/abc/xyz.js\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    setFilename(\"foo/bar\");\n    try{ test(\n        \"var name = require('name');\",\n        \"goog.provide('module$foo$bar'); var module$foo$bar = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$foo$bar = module$name;\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\n        \"var name = require('./name');\",\n        \"goog.provide('module$foo$bar');\" +\n        \"var module$foo$bar = {};\" +\n        \"goog.require('module$foo$name');\" +\n        \"var name$$module$foo$bar = module$foo$name;\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
                "  public void testModuleName$catena_3() {\n    try{ assertEquals(\"module$foo$baz\",\n        ProcessCommonJSModules.toModuleName(\"./baz.js\", \"foo/bar.js\"));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$foo$baz_bar\",\n        ProcessCommonJSModules.toModuleName(\"./baz-bar.js\", \"foo/bar.js\"));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\",\n        ProcessCommonJSModules.toModuleName(\"../baz.js\", \"foo/bar.js\"));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\"module$baz\",\n        ProcessCommonJSModules.toModuleName(\"../../baz.js\", \"foo/bar/abc.js\"));                             /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\"module$baz\", ProcessCommonJSModules.toModuleName(\n        \"../../../baz.js\", \"foo/bar/abc/xyz.js\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    setFilename(\"foo/bar\");\n    try{ test(\n        \"var name = require('name');\",\n        \"goog.provide('module$foo$bar'); var module$foo$bar = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$foo$bar = module$name;\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\n        \"var name = require('./name');\",\n        \"goog.provide('module$foo$bar');\" +\n        \"var module$foo$bar = {};\" +\n        \"goog.require('module$foo$name');\" +\n        \"var name$$module$foo$bar = module$foo$name;\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
                "  public void testModuleName$catena_4() {\n    try{ assertEquals(\"module$foo$baz\",\n        ProcessCommonJSModules.toModuleName(\"./baz.js\", \"foo/bar.js\"));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$foo$baz_bar\",\n        ProcessCommonJSModules.toModuleName(\"./baz-bar.js\", \"foo/bar.js\"));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\",\n        ProcessCommonJSModules.toModuleName(\"../baz.js\", \"foo/bar.js\"));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\",\n        ProcessCommonJSModules.toModuleName(\"../../baz.js\", \"foo/bar/abc.js\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\"module$baz\", ProcessCommonJSModules.toModuleName(\n        \"../../../baz.js\", \"foo/bar/abc/xyz.js\"));                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    setFilename(\"foo/bar\");\n    try{ test(\n        \"var name = require('name');\",\n        \"goog.provide('module$foo$bar'); var module$foo$bar = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$foo$bar = module$name;\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\n        \"var name = require('./name');\",\n        \"goog.provide('module$foo$bar');\" +\n        \"var module$foo$bar = {};\" +\n        \"goog.require('module$foo$name');\" +\n        \"var name$$module$foo$bar = module$foo$name;\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
                "  public void testModuleName$catena_5() {\n    try{ assertEquals(\"module$foo$baz\",\n        ProcessCommonJSModules.toModuleName(\"./baz.js\", \"foo/bar.js\"));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$foo$baz_bar\",\n        ProcessCommonJSModules.toModuleName(\"./baz-bar.js\", \"foo/bar.js\"));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\",\n        ProcessCommonJSModules.toModuleName(\"../baz.js\", \"foo/bar.js\"));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\",\n        ProcessCommonJSModules.toModuleName(\"../../baz.js\", \"foo/bar/abc.js\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\", ProcessCommonJSModules.toModuleName(\n        \"../../../baz.js\", \"foo/bar/abc/xyz.js\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    setFilename(\"foo/bar\");\n    test(\n        \"var name = require('name');\",\n        \"goog.provide('module$foo$bar'); var module$foo$bar = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$foo$bar = module$name;\");                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\n        \"var name = require('./name');\",\n        \"goog.provide('module$foo$bar');\" +\n        \"var module$foo$bar = {};\" +\n        \"goog.require('module$foo$name');\" +\n        \"var name$$module$foo$bar = module$foo$name;\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
                "  public void testModuleName$catena_6() {\n    try{ assertEquals(\"module$foo$baz\",\n        ProcessCommonJSModules.toModuleName(\"./baz.js\", \"foo/bar.js\"));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$foo$baz_bar\",\n        ProcessCommonJSModules.toModuleName(\"./baz-bar.js\", \"foo/bar.js\"));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\",\n        ProcessCommonJSModules.toModuleName(\"../baz.js\", \"foo/bar.js\"));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\",\n        ProcessCommonJSModules.toModuleName(\"../../baz.js\", \"foo/bar/abc.js\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\", ProcessCommonJSModules.toModuleName(\n        \"../../../baz.js\", \"foo/bar/abc/xyz.js\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    setFilename(\"foo/bar\");\n    try{ test(\n        \"var name = require('name');\",\n        \"goog.provide('module$foo$bar'); var module$foo$bar = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$foo$bar = module$name;\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\n        \"var name = require('./name');\",\n        \"goog.provide('module$foo$bar');\" +\n        \"var module$foo$bar = {};\" +\n        \"goog.require('module$foo$name');\" +\n        \"var name$$module$foo$bar = module$foo$name;\");                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n  }"
            ],
            "func": {
                "0": "  public void testModuleName$catena_0() {\n    assertEquals(\"module$foo$baz\",\n        ProcessCommonJSModules.toModuleName(\"./baz.js\", \"foo/bar.js\"));                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\"module$foo$baz_bar\",\n        ProcessCommonJSModules.toModuleName(\"./baz-bar.js\", \"foo/bar.js\"));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\",\n        ProcessCommonJSModules.toModuleName(\"../baz.js\", \"foo/bar.js\"));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\",\n        ProcessCommonJSModules.toModuleName(\"../../baz.js\", \"foo/bar/abc.js\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\", ProcessCommonJSModules.toModuleName(\n        \"../../../baz.js\", \"foo/bar/abc/xyz.js\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    setFilename(\"foo/bar\");\n    try{ test(\n        \"var name = require('name');\",\n        \"goog.provide('module$foo$bar'); var module$foo$bar = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$foo$bar = module$name;\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\n        \"var name = require('./name');\",\n        \"goog.provide('module$foo$bar');\" +\n        \"var module$foo$bar = {};\" +\n        \"goog.require('module$foo$name');\" +\n        \"var name$$module$foo$bar = module$foo$name;\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
                "1": "  public void testModuleName$catena_1() {\n    try{ assertEquals(\"module$foo$baz\",\n        ProcessCommonJSModules.toModuleName(\"./baz.js\", \"foo/bar.js\"));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\"module$foo$baz_bar\",\n        ProcessCommonJSModules.toModuleName(\"./baz-bar.js\", \"foo/bar.js\"));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\"module$baz\",\n        ProcessCommonJSModules.toModuleName(\"../baz.js\", \"foo/bar.js\"));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\",\n        ProcessCommonJSModules.toModuleName(\"../../baz.js\", \"foo/bar/abc.js\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\", ProcessCommonJSModules.toModuleName(\n        \"../../../baz.js\", \"foo/bar/abc/xyz.js\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    setFilename(\"foo/bar\");\n    try{ test(\n        \"var name = require('name');\",\n        \"goog.provide('module$foo$bar'); var module$foo$bar = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$foo$bar = module$name;\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\n        \"var name = require('./name');\",\n        \"goog.provide('module$foo$bar');\" +\n        \"var module$foo$bar = {};\" +\n        \"goog.require('module$foo$name');\" +\n        \"var name$$module$foo$bar = module$foo$name;\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
                "2": "  public void testModuleName$catena_2() {\n    try{ assertEquals(\"module$foo$baz\",\n        ProcessCommonJSModules.toModuleName(\"./baz.js\", \"foo/bar.js\"));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$foo$baz_bar\",\n        ProcessCommonJSModules.toModuleName(\"./baz-bar.js\", \"foo/bar.js\"));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\"module$baz\",\n        ProcessCommonJSModules.toModuleName(\"../baz.js\", \"foo/bar.js\"));                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\"module$baz\",\n        ProcessCommonJSModules.toModuleName(\"../../baz.js\", \"foo/bar/abc.js\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\", ProcessCommonJSModules.toModuleName(\n        \"../../../baz.js\", \"foo/bar/abc/xyz.js\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    setFilename(\"foo/bar\");\n    try{ test(\n        \"var name = require('name');\",\n        \"goog.provide('module$foo$bar'); var module$foo$bar = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$foo$bar = module$name;\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\n        \"var name = require('./name');\",\n        \"goog.provide('module$foo$bar');\" +\n        \"var module$foo$bar = {};\" +\n        \"goog.require('module$foo$name');\" +\n        \"var name$$module$foo$bar = module$foo$name;\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
                "3": "  public void testModuleName$catena_3() {\n    try{ assertEquals(\"module$foo$baz\",\n        ProcessCommonJSModules.toModuleName(\"./baz.js\", \"foo/bar.js\"));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$foo$baz_bar\",\n        ProcessCommonJSModules.toModuleName(\"./baz-bar.js\", \"foo/bar.js\"));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\",\n        ProcessCommonJSModules.toModuleName(\"../baz.js\", \"foo/bar.js\"));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\"module$baz\",\n        ProcessCommonJSModules.toModuleName(\"../../baz.js\", \"foo/bar/abc.js\"));                             /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\"module$baz\", ProcessCommonJSModules.toModuleName(\n        \"../../../baz.js\", \"foo/bar/abc/xyz.js\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    setFilename(\"foo/bar\");\n    try{ test(\n        \"var name = require('name');\",\n        \"goog.provide('module$foo$bar'); var module$foo$bar = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$foo$bar = module$name;\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\n        \"var name = require('./name');\",\n        \"goog.provide('module$foo$bar');\" +\n        \"var module$foo$bar = {};\" +\n        \"goog.require('module$foo$name');\" +\n        \"var name$$module$foo$bar = module$foo$name;\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
                "4": "  public void testModuleName$catena_4() {\n    try{ assertEquals(\"module$foo$baz\",\n        ProcessCommonJSModules.toModuleName(\"./baz.js\", \"foo/bar.js\"));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$foo$baz_bar\",\n        ProcessCommonJSModules.toModuleName(\"./baz-bar.js\", \"foo/bar.js\"));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\",\n        ProcessCommonJSModules.toModuleName(\"../baz.js\", \"foo/bar.js\"));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\",\n        ProcessCommonJSModules.toModuleName(\"../../baz.js\", \"foo/bar/abc.js\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\"module$baz\", ProcessCommonJSModules.toModuleName(\n        \"../../../baz.js\", \"foo/bar/abc/xyz.js\"));                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    setFilename(\"foo/bar\");\n    try{ test(\n        \"var name = require('name');\",\n        \"goog.provide('module$foo$bar'); var module$foo$bar = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$foo$bar = module$name;\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\n        \"var name = require('./name');\",\n        \"goog.provide('module$foo$bar');\" +\n        \"var module$foo$bar = {};\" +\n        \"goog.require('module$foo$name');\" +\n        \"var name$$module$foo$bar = module$foo$name;\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
                "5": "  public void testModuleName$catena_5() {\n    try{ assertEquals(\"module$foo$baz\",\n        ProcessCommonJSModules.toModuleName(\"./baz.js\", \"foo/bar.js\"));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$foo$baz_bar\",\n        ProcessCommonJSModules.toModuleName(\"./baz-bar.js\", \"foo/bar.js\"));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\",\n        ProcessCommonJSModules.toModuleName(\"../baz.js\", \"foo/bar.js\"));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\",\n        ProcessCommonJSModules.toModuleName(\"../../baz.js\", \"foo/bar/abc.js\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\", ProcessCommonJSModules.toModuleName(\n        \"../../../baz.js\", \"foo/bar/abc/xyz.js\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    setFilename(\"foo/bar\");\n    test(\n        \"var name = require('name');\",\n        \"goog.provide('module$foo$bar'); var module$foo$bar = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$foo$bar = module$name;\");                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\n        \"var name = require('./name');\",\n        \"goog.provide('module$foo$bar');\" +\n        \"var module$foo$bar = {};\" +\n        \"goog.require('module$foo$name');\" +\n        \"var name$$module$foo$bar = module$foo$name;\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
                "6": "  public void testModuleName$catena_6() {\n    try{ assertEquals(\"module$foo$baz\",\n        ProcessCommonJSModules.toModuleName(\"./baz.js\", \"foo/bar.js\"));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$foo$baz_bar\",\n        ProcessCommonJSModules.toModuleName(\"./baz-bar.js\", \"foo/bar.js\"));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\",\n        ProcessCommonJSModules.toModuleName(\"../baz.js\", \"foo/bar.js\"));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\",\n        ProcessCommonJSModules.toModuleName(\"../../baz.js\", \"foo/bar/abc.js\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"module$baz\", ProcessCommonJSModules.toModuleName(\n        \"../../../baz.js\", \"foo/bar/abc/xyz.js\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    setFilename(\"foo/bar\");\n    try{ test(\n        \"var name = require('name');\",\n        \"goog.provide('module$foo$bar'); var module$foo$bar = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$foo$bar = module$name;\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\n        \"var name = require('./name');\",\n        \"goog.provide('module$foo$bar');\" +\n        \"var module$foo$bar = {};\" +\n        \"goog.require('module$foo$name');\" +\n        \"var name$$module$foo$bar = module$foo$name;\");                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n  }"
            }
        },
        "com.google.javascript.jscomp.ProcessCommonJSModulesTest::testDash": {
            "file_path": "test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java",
            "Instance": "Begin: Pos(91, 10)\nEnd: Pos(100, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/ProcessCommonJSModulesTest.java\nName: testDash\nChilds: [StatementAssertion<Begin: Pos(93, 5), End: Pos(99, 37)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/ProcessCommonJSModulesTest.java",
            "name": "testDash",
            "begin": "Pos(91, 10)",
            "end": "Pos(100, 3)",
            "begin_line_no": 91,
            "end_line_no": 100,
            "child": [
                "Begin: Pos(93, 5)\nEnd: Pos(99, 37)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "com.google.javascript.jscomp.ProcessCommonJSModulesTest::testVarRenaming": {
            "file_path": "test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java",
            "Instance": "Begin: Pos(80, 10)\nEnd: Pos(89, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/ProcessCommonJSModulesTest.java\nName: testVarRenaming\nChilds: [StatementAssertion<Begin: Pos(82, 5), End: Pos(88, 56)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/ProcessCommonJSModulesTest.java",
            "name": "testVarRenaming",
            "begin": "Pos(80, 10)",
            "end": "Pos(89, 3)",
            "begin_line_no": 80,
            "end_line_no": 89,
            "child": [
                "Begin: Pos(82, 5)\nEnd: Pos(88, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "com.google.javascript.jscomp.ProcessCommonJSModulesTest::testWithoutExports": {
            "file_path": "test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java",
            "Instance": "Begin: Pos(37, 10)\nEnd: Pos(56, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/ProcessCommonJSModulesTest.java\nName: testWithoutExports\nChilds: [StatementAssertion<Begin: Pos(39, 5), End: Pos(46, 32)>,\nStatementAssertion<Begin: Pos(48, 5), End: Pos(55, 56)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/ProcessCommonJSModulesTest.java",
            "name": "testWithoutExports",
            "begin": "Pos(37, 10)",
            "end": "Pos(56, 3)",
            "begin_line_no": 37,
            "end_line_no": 56,
            "child": [
                "Begin: Pos(39, 5)\nEnd: Pos(46, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(48, 5)\nEnd: Pos(55, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testWithoutExports$catena_0() {\n    setFilename(\"test\");\n    test(\n        \"var name = require('name');\" +\n        \"name()\",\n        \"goog.provide('module$test');\" +\n        \"var module$test = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$test = module$name;\" +\n        \"name$$module$test();\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    setFilename(\"test/sub\");\n    try{ test(\n        \"var name = require('mod/name');\" +\n        \"(function() { name(); })();\",\n        \"goog.provide('module$test$sub');\" +\n        \"var module$test$sub = {};\" +\n        \"goog.require('module$mod$name');\" +\n        \"var name$$module$test$sub = module$mod$name;\" +\n        \"(function() { name$$module$test$sub(); })();\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testWithoutExports$catena_1() {\n    setFilename(\"test\");\n    try{ test(\n        \"var name = require('name');\" +\n        \"name()\",\n        \"goog.provide('module$test');\" +\n        \"var module$test = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$test = module$name;\" +\n        \"name$$module$test();\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    setFilename(\"test/sub\");\n    test(\n        \"var name = require('mod/name');\" +\n        \"(function() { name(); })();\",\n        \"goog.provide('module$test$sub');\" +\n        \"var module$test$sub = {};\" +\n        \"goog.require('module$mod$name');\" +\n        \"var name$$module$test$sub = module$mod$name;\" +\n        \"(function() { name$$module$test$sub(); })();\");                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testWithoutExports$catena_0() {\n    setFilename(\"test\");\n    test(\n        \"var name = require('name');\" +\n        \"name()\",\n        \"goog.provide('module$test');\" +\n        \"var module$test = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$test = module$name;\" +\n        \"name$$module$test();\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    setFilename(\"test/sub\");\n    try{ test(\n        \"var name = require('mod/name');\" +\n        \"(function() { name(); })();\",\n        \"goog.provide('module$test$sub');\" +\n        \"var module$test$sub = {};\" +\n        \"goog.require('module$mod$name');\" +\n        \"var name$$module$test$sub = module$mod$name;\" +\n        \"(function() { name$$module$test$sub(); })();\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testWithoutExports$catena_1() {\n    setFilename(\"test\");\n    try{ test(\n        \"var name = require('name');\" +\n        \"name()\",\n        \"goog.provide('module$test');\" +\n        \"var module$test = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$test = module$name;\" +\n        \"name$$module$test();\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    setFilename(\"test/sub\");\n    test(\n        \"var name = require('mod/name');\" +\n        \"(function() { name(); })();\",\n        \"goog.provide('module$test$sub');\" +\n        \"var module$test$sub = {};\" +\n        \"goog.require('module$mod$name');\" +\n        \"var name$$module$test$sub = module$mod$name;\" +\n        \"(function() { name$$module$test$sub(); })();\");                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        }
    },
    "111": {
        "failing_tests": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest::testWithoutExports$catena_1",
            "com.google.javascript.jscomp.CommandLineRunnerTest::testProcessCJS",
            "com.google.javascript.jscomp.CommandLineRunnerTest::testTransformAMDAndProcessCJS",
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest::testExports$catena_0",
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest::testVarRenaming",
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest::testModuleName$catena_6",
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest::testDash",
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest::testModuleName$catena_5",
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest::testWithoutExports$catena_0"
        ]
    }
}