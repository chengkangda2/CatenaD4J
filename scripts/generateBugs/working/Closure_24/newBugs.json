{
    "original": {
        "num_of_hunks": 4,
        "0": {
            "file_name": "src/com/google/javascript/jscomp/ScopedAliases.java",
            "from_line_no": 278,
            "to_line_no": 279,
            "replaced_with": "        if (parent.isVar() &&\n            n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n",
            "replaced": "        if (parent.isVar()) {\n          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n",
            "patch_type": "replace",
            "next_line_no": 280
        },
        "1": {
            "file_name": "src/com/google/javascript/jscomp/ScopedAliases.java",
            "replaced_with": "        } else if (v.isBleedingFunction()) {\n",
            "patch_type": "insert",
            "next_line_no": 287
        },
        "2": {
            "file_name": "src/com/google/javascript/jscomp/ScopedAliases.java",
            "replaced_with": "        } else if (parent.getType() == Token.LP) {\n",
            "patch_type": "insert",
            "next_line_no": 289
        },
        "3": {
            "file_name": "src/com/google/javascript/jscomp/ScopedAliases.java",
            "from_line_no": 295,
            "to_line_no": 295,
            "replaced": "        }\n",
            "patch_type": "delete",
            "next_line_no": 296
        }
    },
    "method": {
        "failing_tests": [
            "com.google.javascript.jscomp.ScopedAliasesTest::testNonAliasLocal"
        ],
        "com.google.javascript.jscomp.ScopedAliasesTest::testNonAliasLocal": {
            "file_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
            "Instance": "Begin: Pos(405, 10)\nEnd: Pos(415, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_24/test//com/google/javascript/jscomp/ScopedAliasesTest.java\nName: testNonAliasLocal\nChilds: [StatementAssertion<Begin: Pos(406, 5), End: Pos(406, 78)>,\nStatementAssertion<Begin: Pos(407, 5), End: Pos(408, 50)>,\nStatementAssertion<Begin: Pos(409, 5), End: Pos(410, 50)>,\nStatementAssertion<Begin: Pos(411, 5), End: Pos(412, 50)>,\nStatementAssertion<Begin: Pos(413, 5), End: Pos(414, 50)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_24/test//com/google/javascript/jscomp/ScopedAliasesTest.java",
            "name": "testNonAliasLocal",
            "begin": "Pos(405, 10)",
            "end": "Pos(415, 3)",
            "begin_line_no": 405,
            "end_line_no": 415,
            "child": [
                "Begin: Pos(406, 5)\nEnd: Pos(406, 78)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(407, 5)\nEnd: Pos(408, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(409, 5)\nEnd: Pos(410, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(411, 5)\nEnd: Pos(412, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(413, 5)\nEnd: Pos(414, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testNonAliasLocal$catena_0() {\n    testScopedFailure(\"var x = 10\", ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testScopedFailure(\"var x = goog.dom + 10\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testScopedFailure(\"var x = goog['dom']\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testScopedFailure(\"var x = goog.dom, y = 10\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testScopedFailure(\"function f() {}\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testNonAliasLocal$catena_1() {\n    try{ testScopedFailure(\"var x = 10\", ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    testScopedFailure(\"var x = goog.dom + 10\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testScopedFailure(\"var x = goog['dom']\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testScopedFailure(\"var x = goog.dom, y = 10\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testScopedFailure(\"function f() {}\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testNonAliasLocal$catena_2() {\n    try{ testScopedFailure(\"var x = 10\", ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testScopedFailure(\"var x = goog.dom + 10\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    testScopedFailure(\"var x = goog['dom']\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testScopedFailure(\"var x = goog.dom, y = 10\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testScopedFailure(\"function f() {}\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testNonAliasLocal$catena_3() {\n    try{ testScopedFailure(\"var x = 10\", ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testScopedFailure(\"var x = goog.dom + 10\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testScopedFailure(\"var x = goog['dom']\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    testScopedFailure(\"var x = goog.dom, y = 10\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testScopedFailure(\"function f() {}\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testNonAliasLocal$catena_4() {\n    try{ testScopedFailure(\"var x = 10\", ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testScopedFailure(\"var x = goog.dom + 10\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testScopedFailure(\"var x = goog['dom']\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testScopedFailure(\"var x = goog.dom, y = 10\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    testScopedFailure(\"function f() {}\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testNonAliasLocal$catena_0() {\n    testScopedFailure(\"var x = 10\", ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testScopedFailure(\"var x = goog.dom + 10\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testScopedFailure(\"var x = goog['dom']\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testScopedFailure(\"var x = goog.dom, y = 10\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testScopedFailure(\"function f() {}\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testNonAliasLocal$catena_1() {\n    try{ testScopedFailure(\"var x = 10\", ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    testScopedFailure(\"var x = goog.dom + 10\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testScopedFailure(\"var x = goog['dom']\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testScopedFailure(\"var x = goog.dom, y = 10\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testScopedFailure(\"function f() {}\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testNonAliasLocal$catena_2() {\n    try{ testScopedFailure(\"var x = 10\", ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testScopedFailure(\"var x = goog.dom + 10\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    testScopedFailure(\"var x = goog['dom']\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testScopedFailure(\"var x = goog.dom, y = 10\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testScopedFailure(\"function f() {}\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "3": "  public void testNonAliasLocal$catena_3() {\n    try{ testScopedFailure(\"var x = 10\", ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testScopedFailure(\"var x = goog.dom + 10\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testScopedFailure(\"var x = goog['dom']\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    testScopedFailure(\"var x = goog.dom, y = 10\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testScopedFailure(\"function f() {}\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "4": "  public void testNonAliasLocal$catena_4() {\n    try{ testScopedFailure(\"var x = 10\", ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testScopedFailure(\"var x = goog.dom + 10\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testScopedFailure(\"var x = goog['dom']\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testScopedFailure(\"var x = goog.dom, y = 10\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    testScopedFailure(\"function f() {}\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        }
    },
    "1111": {
        "failing_tests": [
            "com.google.javascript.jscomp.ScopedAliasesTest::testNonAliasLocal$catena_4"
        ]
    }
}