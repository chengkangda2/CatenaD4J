{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
            "from_line_no": 495,
            "to_line_no": 496,
            "replaced_with": "                if (tokenLen == 2) {\n                    rule = TwoDigitYearField.INSTANCE;\n",
            "replaced": "                if (tokenLen >= 4) {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen);\n",
            "patch_type": "replace",
            "next_line_no": 497
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
            "from_line_no": 498,
            "to_line_no": 498,
            "replaced_with": "                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n",
            "replaced": "                    rule = TwoDigitYearField.INSTANCE;\n",
            "patch_type": "replace",
            "next_line_no": 499
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.lang3.time.FastDateFormatTest::testFormat"
        ],
        "org.apache.commons.lang3.time.FastDateFormatTest::testFormat": {
            "file_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
            "Instance": "Begin: Pos(173, 12)\nEnd: Pos(226, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_18/src/test/java//org/apache/commons/lang3/time/FastDateFormatTest.java\nName: testFormat\nChilds: [StatementAssertion<Begin: Pos(189, 13), End: Pos(189, 63)>,\nStatementAssertion<Begin: Pos(190, 13), End: Pos(190, 67)>,\nStatementAssertion<Begin: Pos(191, 13), End: Pos(191, 66)>,\nStatementAssertion<Begin: Pos(192, 13), End: Pos(192, 69)>,\nStatementAssertion<Begin: Pos(193, 13), End: Pos(193, 67)>,\nStatementAssertion<Begin: Pos(194, 13), End: Pos(194, 66)>,\nStatementAssertion<Begin: Pos(195, 13), End: Pos(195, 69)>,\nStatementAssertion<Begin: Pos(198, 13), End: Pos(198, 53)>,\nStatementAssertion<Begin: Pos(199, 13), End: Pos(199, 52)>,\nStatementAssertion<Begin: Pos(200, 13), End: Pos(200, 55)>,\nStatementAssertion<Begin: Pos(202, 13), End: Pos(202, 53)>,\nStatementAssertion<Begin: Pos(203, 13), End: Pos(203, 52)>,\nStatementAssertion<Begin: Pos(204, 13), End: Pos(204, 55)>,\nStatementAssertion<Begin: Pos(207, 13), End: Pos(207, 54)>,\nStatementAssertion<Begin: Pos(208, 13), End: Pos(208, 53)>,\nStatementAssertion<Begin: Pos(209, 13), End: Pos(209, 56)>,\nStatementAssertion<Begin: Pos(211, 13), End: Pos(211, 54)>,\nStatementAssertion<Begin: Pos(212, 13), End: Pos(212, 53)>,\nStatementAssertion<Begin: Pos(213, 13), End: Pos(213, 56)>,\nStatementAssertion<Begin: Pos(220, 13), End: Pos(220, 112)>,\nStatementAssertion<Begin: Pos(221, 13), End: Pos(221, 112)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_18/src/test/java//org/apache/commons/lang3/time/FastDateFormatTest.java",
            "name": "testFormat",
            "begin": "Pos(173, 12)",
            "end": "Pos(226, 5)",
            "begin_line_no": 173,
            "end_line_no": 226,
            "child": [
                "Begin: Pos(189, 13)\nEnd: Pos(189, 63)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(190, 13)\nEnd: Pos(190, 67)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(191, 13)\nEnd: Pos(191, 66)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(192, 13)\nEnd: Pos(192, 69)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(193, 13)\nEnd: Pos(193, 67)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(194, 13)\nEnd: Pos(194, 66)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(195, 13)\nEnd: Pos(195, 69)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(198, 13)\nEnd: Pos(198, 53)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(199, 13)\nEnd: Pos(199, 52)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(200, 13)\nEnd: Pos(200, 55)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(202, 13)\nEnd: Pos(202, 53)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(203, 13)\nEnd: Pos(203, 52)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(204, 13)\nEnd: Pos(204, 55)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(207, 13)\nEnd: Pos(207, 54)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(208, 13)\nEnd: Pos(208, 53)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(209, 13)\nEnd: Pos(209, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(211, 13)\nEnd: Pos(211, 54)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(212, 13)\nEnd: Pos(212, 53)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(213, 13)\nEnd: Pos(213, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(220, 13)\nEnd: Pos(220, 112)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(221, 13)\nEnd: Pos(221, 112)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testFormat$catena_0() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            assertEquals(sdf.format(date1), fdf.format(date1));                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "    public void testFormat$catena_1() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "    public void testFormat$catena_2() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "    public void testFormat$catena_3() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "    public void testFormat$catena_4() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "    public void testFormat$catena_5() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "    public void testFormat$catena_6() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "    public void testFormat$catena_7() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            assertEquals(\"-0500\", fdf.format(date1));                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "    public void testFormat$catena_8() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(\"-0500\", fdf.format(cal1));                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "    public void testFormat$catena_9() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(\"-0500\", fdf.format(millis1));                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "    public void testFormat$catena_10() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            assertEquals(\"-0400\", fdf.format(date2));                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "    public void testFormat$catena_11() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(\"-0400\", fdf.format(cal2));                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "    public void testFormat$catena_12() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(\"-0400\", fdf.format(millis2));                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "    public void testFormat$catena_13() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            assertEquals(\"-05:00\", fdf.format(date1));                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "    public void testFormat$catena_14() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(\"-05:00\", fdf.format(cal1));                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "    public void testFormat$catena_15() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(\"-05:00\", fdf.format(millis1));                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "    public void testFormat$catena_16() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            assertEquals(\"-04:00\", fdf.format(date2));                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "    public void testFormat$catena_17() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(\"-04:00\", fdf.format(cal2));                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "    public void testFormat$catena_18() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(\"-04:00\", fdf.format(millis2));                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "    public void testFormat$catena_19() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));         /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "    public void testFormat$catena_20() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));         /***** ORIGINAL ASSERTION IS HERE *****/\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }"
            ],
            "func": {
                "0": "    public void testFormat$catena_0() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            assertEquals(sdf.format(date1), fdf.format(date1));                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "1": "    public void testFormat$catena_1() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "2": "    public void testFormat$catena_2() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "3": "    public void testFormat$catena_3() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "4": "    public void testFormat$catena_4() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "5": "    public void testFormat$catena_5() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "6": "    public void testFormat$catena_6() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "7": "    public void testFormat$catena_7() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            assertEquals(\"-0500\", fdf.format(date1));                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "8": "    public void testFormat$catena_8() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(\"-0500\", fdf.format(cal1));                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "9": "    public void testFormat$catena_9() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(\"-0500\", fdf.format(millis1));                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "10": "    public void testFormat$catena_10() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            assertEquals(\"-0400\", fdf.format(date2));                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "11": "    public void testFormat$catena_11() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(\"-0400\", fdf.format(cal2));                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "12": "    public void testFormat$catena_12() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(\"-0400\", fdf.format(millis2));                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "13": "    public void testFormat$catena_13() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            assertEquals(\"-05:00\", fdf.format(date1));                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "14": "    public void testFormat$catena_14() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(\"-05:00\", fdf.format(cal1));                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "15": "    public void testFormat$catena_15() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(\"-05:00\", fdf.format(millis1));                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "16": "    public void testFormat$catena_16() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            assertEquals(\"-04:00\", fdf.format(date2));                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "17": "    public void testFormat$catena_17() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(\"-04:00\", fdf.format(cal2));                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "18": "    public void testFormat$catena_18() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(\"-04:00\", fdf.format(millis2));                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "19": "    public void testFormat$catena_19() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));         /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
                "20": "    public void testFormat$catena_20() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));         /***** ORIGINAL ASSERTION IS HERE *****/\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }"
            }
        }
    },
    "11": {
        "failing_tests": [
            "org.apache.commons.lang3.time.FastDateFormatTest::testFormat$catena_20",
            "org.apache.commons.lang3.time.FastDateFormatTest::testFormat$catena_19"
        ]
    }
}