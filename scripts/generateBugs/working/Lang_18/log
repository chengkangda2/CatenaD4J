---
Begin generate bug_id: Lang_18
num_of_hunks: 2
use working dir: ./working/data/Lang_18
Try to checkout Lang_18
build dir: ['./working/data/Lang_18/target/classes', './working/data/Lang_18/target/tests']
init FileManager
trace file: src/main/java/org/apache/commons/lang3/time/FastDateFormat.java
trace file: src/main/java/org/apache/commons/lang3/time/FastDateFormat.java
trying to replace old failing tests
edit: replace from 173 range 54 at src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java
to
    public void testFormat$catena_0() {
        Locale realDefaultLocale = Locale.getDefault();
        TimeZone realDefaultZone = TimeZone.getDefault();
        try {
            Locale.setDefault(Locale.US);
            TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));

            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
            Date date1 = cal1.getTime();
            Date date2 = cal2.getTime();
            long millis1 = date1.getTime();
            long millis2 = date2.getTime();

            FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
            assertEquals(sdf.format(date1), fdf.format(date1));                                                          /***** ORIGINAL ASSERTION IS HERE *****/
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("Z");
            try{ assertEquals("-0500", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-0400", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("ZZ");
            try{ assertEquals("-05:00", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-04:00", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +
                " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
            fdf = FastDateFormat.getInstance(pattern);
            sdf = new SimpleDateFormat(pattern);
            // SDF bug fix starting with Java 7
            try{ assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            Locale.setDefault(realDefaultLocale);
            TimeZone.setDefault(realDefaultZone);
        }
    }     public void testFormat$catena_1() {
        Locale realDefaultLocale = Locale.getDefault();
        TimeZone realDefaultZone = TimeZone.getDefault();
        try {
            Locale.setDefault(Locale.US);
            TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));

            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
            Date date1 = cal1.getTime();
            Date date2 = cal2.getTime();
            long millis1 = date1.getTime();
            long millis2 = date2.getTime();

            FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
            assertEquals("2003-01-10T15:33:20", fdf.format(date1));                                                      /***** ORIGINAL ASSERTION IS HERE *****/
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("Z");
            try{ assertEquals("-0500", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-0400", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("ZZ");
            try{ assertEquals("-05:00", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-04:00", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +
                " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
            fdf = FastDateFormat.getInstance(pattern);
            sdf = new SimpleDateFormat(pattern);
            // SDF bug fix starting with Java 7
            try{ assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            Locale.setDefault(realDefaultLocale);
            TimeZone.setDefault(realDefaultZone);
        }
    }     public void testFormat$catena_2() {
        Locale realDefaultLocale = Locale.getDefault();
        TimeZone realDefaultZone = TimeZone.getDefault();
        try {
            Locale.setDefault(Locale.US);
            TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));

            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
            Date date1 = cal1.getTime();
            Date date2 = cal2.getTime();
            long millis1 = date1.getTime();
            long millis2 = date2.getTime();

            FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            assertEquals("2003-01-10T15:33:20", fdf.format(cal1));                                                       /***** ORIGINAL ASSERTION IS HERE *****/
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("Z");
            try{ assertEquals("-0500", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-0400", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("ZZ");
            try{ assertEquals("-05:00", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-04:00", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +
                " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
            fdf = FastDateFormat.getInstance(pattern);
            sdf = new SimpleDateFormat(pattern);
            // SDF bug fix starting with Java 7
            try{ assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            Locale.setDefault(realDefaultLocale);
            TimeZone.setDefault(realDefaultZone);
        }
    }     public void testFormat$catena_3() {
        Locale realDefaultLocale = Locale.getDefault();
        TimeZone realDefaultZone = TimeZone.getDefault();
        try {
            Locale.setDefault(Locale.US);
            TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));

            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
            Date date1 = cal1.getTime();
            Date date2 = cal2.getTime();
            long millis1 = date1.getTime();
            long millis2 = date2.getTime();

            FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            assertEquals("2003-01-10T15:33:20", fdf.format(millis1));                                                    /***** ORIGINAL ASSERTION IS HERE *****/
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("Z");
            try{ assertEquals("-0500", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-0400", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("ZZ");
            try{ assertEquals("-05:00", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-04:00", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +
                " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
            fdf = FastDateFormat.getInstance(pattern);
            sdf = new SimpleDateFormat(pattern);
            // SDF bug fix starting with Java 7
            try{ assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            Locale.setDefault(realDefaultLocale);
            TimeZone.setDefault(realDefaultZone);
        }
    }     public void testFormat$catena_4() {
        Locale realDefaultLocale = Locale.getDefault();
        TimeZone realDefaultZone = TimeZone.getDefault();
        try {
            Locale.setDefault(Locale.US);
            TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));

            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
            Date date1 = cal1.getTime();
            Date date2 = cal2.getTime();
            long millis1 = date1.getTime();
            long millis2 = date2.getTime();

            FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            assertEquals("2003-07-10T09:00:00", fdf.format(date2));                                                      /***** ORIGINAL ASSERTION IS HERE *****/
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("Z");
            try{ assertEquals("-0500", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-0400", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("ZZ");
            try{ assertEquals("-05:00", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-04:00", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +
                " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
            fdf = FastDateFormat.getInstance(pattern);
            sdf = new SimpleDateFormat(pattern);
            // SDF bug fix starting with Java 7
            try{ assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            Locale.setDefault(realDefaultLocale);
            TimeZone.setDefault(realDefaultZone);
        }
    }     public void testFormat$catena_5() {
        Locale realDefaultLocale = Locale.getDefault();
        TimeZone realDefaultZone = TimeZone.getDefault();
        try {
            Locale.setDefault(Locale.US);
            TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));

            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
            Date date1 = cal1.getTime();
            Date date2 = cal2.getTime();
            long millis1 = date1.getTime();
            long millis2 = date2.getTime();

            FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            assertEquals("2003-07-10T09:00:00", fdf.format(cal2));                                                       /***** ORIGINAL ASSERTION IS HERE *****/
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("Z");
            try{ assertEquals("-0500", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-0400", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("ZZ");
            try{ assertEquals("-05:00", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-04:00", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +
                " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
            fdf = FastDateFormat.getInstance(pattern);
            sdf = new SimpleDateFormat(pattern);
            // SDF bug fix starting with Java 7
            try{ assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            Locale.setDefault(realDefaultLocale);
            TimeZone.setDefault(realDefaultZone);
        }
    }     public void testFormat$catena_6() {
        Locale realDefaultLocale = Locale.getDefault();
        TimeZone realDefaultZone = TimeZone.getDefault();
        try {
            Locale.setDefault(Locale.US);
            TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));

            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
            Date date1 = cal1.getTime();
            Date date2 = cal2.getTime();
            long millis1 = date1.getTime();
            long millis2 = date2.getTime();

            FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            assertEquals("2003-07-10T09:00:00", fdf.format(millis2));                                                    /***** ORIGINAL ASSERTION IS HERE *****/

            fdf = FastDateFormat.getInstance("Z");
            try{ assertEquals("-0500", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-0400", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("ZZ");
            try{ assertEquals("-05:00", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-04:00", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +
                " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
            fdf = FastDateFormat.getInstance(pattern);
            sdf = new SimpleDateFormat(pattern);
            // SDF bug fix starting with Java 7
            try{ assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            Locale.setDefault(realDefaultLocale);
            TimeZone.setDefault(realDefaultZone);
        }
    }     public void testFormat$catena_7() {
        Locale realDefaultLocale = Locale.getDefault();
        TimeZone realDefaultZone = TimeZone.getDefault();
        try {
            Locale.setDefault(Locale.US);
            TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));

            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
            Date date1 = cal1.getTime();
            Date date2 = cal2.getTime();
            long millis1 = date1.getTime();
            long millis2 = date2.getTime();

            FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("Z");
            assertEquals("-0500", fdf.format(date1));                                                                    /***** ORIGINAL ASSERTION IS HERE *****/
            try{ assertEquals("-0500", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-0400", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("ZZ");
            try{ assertEquals("-05:00", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-04:00", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +
                " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
            fdf = FastDateFormat.getInstance(pattern);
            sdf = new SimpleDateFormat(pattern);
            // SDF bug fix starting with Java 7
            try{ assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            Locale.setDefault(realDefaultLocale);
            TimeZone.setDefault(realDefaultZone);
        }
    }     public void testFormat$catena_8() {
        Locale realDefaultLocale = Locale.getDefault();
        TimeZone realDefaultZone = TimeZone.getDefault();
        try {
            Locale.setDefault(Locale.US);
            TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));

            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
            Date date1 = cal1.getTime();
            Date date2 = cal2.getTime();
            long millis1 = date1.getTime();
            long millis2 = date2.getTime();

            FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("Z");
            try{ assertEquals("-0500", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            assertEquals("-0500", fdf.format(cal1));                                                                     /***** ORIGINAL ASSERTION IS HERE *****/
            try{ assertEquals("-0500", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-0400", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("ZZ");
            try{ assertEquals("-05:00", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-04:00", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +
                " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
            fdf = FastDateFormat.getInstance(pattern);
            sdf = new SimpleDateFormat(pattern);
            // SDF bug fix starting with Java 7
            try{ assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            Locale.setDefault(realDefaultLocale);
            TimeZone.setDefault(realDefaultZone);
        }
    }     public void testFormat$catena_9() {
        Locale realDefaultLocale = Locale.getDefault();
        TimeZone realDefaultZone = TimeZone.getDefault();
        try {
            Locale.setDefault(Locale.US);
            TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));

            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
            Date date1 = cal1.getTime();
            Date date2 = cal2.getTime();
            long millis1 = date1.getTime();
            long millis2 = date2.getTime();

            FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("Z");
            try{ assertEquals("-0500", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            assertEquals("-0500", fdf.format(millis1));                                                                  /***** ORIGINAL ASSERTION IS HERE *****/

            try{ assertEquals("-0400", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("ZZ");
            try{ assertEquals("-05:00", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-04:00", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +
                " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
            fdf = FastDateFormat.getInstance(pattern);
            sdf = new SimpleDateFormat(pattern);
            // SDF bug fix starting with Java 7
            try{ assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            Locale.setDefault(realDefaultLocale);
            TimeZone.setDefault(realDefaultZone);
        }
    }     public void testFormat$catena_10() {
        Locale realDefaultLocale = Locale.getDefault();
        TimeZone realDefaultZone = TimeZone.getDefault();
        try {
            Locale.setDefault(Locale.US);
            TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));

            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
            Date date1 = cal1.getTime();
            Date date2 = cal2.getTime();
            long millis1 = date1.getTime();
            long millis2 = date2.getTime();

            FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("Z");
            try{ assertEquals("-0500", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            assertEquals("-0400", fdf.format(date2));                                                                    /***** ORIGINAL ASSERTION IS HERE *****/
            try{ assertEquals("-0400", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("ZZ");
            try{ assertEquals("-05:00", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-04:00", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +
                " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
            fdf = FastDateFormat.getInstance(pattern);
            sdf = new SimpleDateFormat(pattern);
            // SDF bug fix starting with Java 7
            try{ assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            Locale.setDefault(realDefaultLocale);
            TimeZone.setDefault(realDefaultZone);
        }
    }     public void testFormat$catena_11() {
        Locale realDefaultLocale = Locale.getDefault();
        TimeZone realDefaultZone = TimeZone.getDefault();
        try {
            Locale.setDefault(Locale.US);
            TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));

            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
            Date date1 = cal1.getTime();
            Date date2 = cal2.getTime();
            long millis1 = date1.getTime();
            long millis2 = date2.getTime();

            FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("Z");
            try{ assertEquals("-0500", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-0400", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            assertEquals("-0400", fdf.format(cal2));                                                                     /***** ORIGINAL ASSERTION IS HERE *****/
            try{ assertEquals("-0400", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("ZZ");
            try{ assertEquals("-05:00", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-04:00", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +
                " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
            fdf = FastDateFormat.getInstance(pattern);
            sdf = new SimpleDateFormat(pattern);
            // SDF bug fix starting with Java 7
            try{ assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            Locale.setDefault(realDefaultLocale);
            TimeZone.setDefault(realDefaultZone);
        }
    }     public void testFormat$catena_12() {
        Locale realDefaultLocale = Locale.getDefault();
        TimeZone realDefaultZone = TimeZone.getDefault();
        try {
            Locale.setDefault(Locale.US);
            TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));

            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
            Date date1 = cal1.getTime();
            Date date2 = cal2.getTime();
            long millis1 = date1.getTime();
            long millis2 = date2.getTime();

            FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("Z");
            try{ assertEquals("-0500", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-0400", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            assertEquals("-0400", fdf.format(millis2));                                                                  /***** ORIGINAL ASSERTION IS HERE *****/

            fdf = FastDateFormat.getInstance("ZZ");
            try{ assertEquals("-05:00", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-04:00", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +
                " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
            fdf = FastDateFormat.getInstance(pattern);
            sdf = new SimpleDateFormat(pattern);
            // SDF bug fix starting with Java 7
            try{ assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            Locale.setDefault(realDefaultLocale);
            TimeZone.setDefault(realDefaultZone);
        }
    }     public void testFormat$catena_13() {
        Locale realDefaultLocale = Locale.getDefault();
        TimeZone realDefaultZone = TimeZone.getDefault();
        try {
            Locale.setDefault(Locale.US);
            TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));

            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
            Date date1 = cal1.getTime();
            Date date2 = cal2.getTime();
            long millis1 = date1.getTime();
            long millis2 = date2.getTime();

            FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("Z");
            try{ assertEquals("-0500", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-0400", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("ZZ");
            assertEquals("-05:00", fdf.format(date1));                                                                   /***** ORIGINAL ASSERTION IS HERE *****/
            try{ assertEquals("-05:00", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-04:00", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +
                " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
            fdf = FastDateFormat.getInstance(pattern);
            sdf = new SimpleDateFormat(pattern);
            // SDF bug fix starting with Java 7
            try{ assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            Locale.setDefault(realDefaultLocale);
            TimeZone.setDefault(realDefaultZone);
        }
    }     public void testFormat$catena_14() {
        Locale realDefaultLocale = Locale.getDefault();
        TimeZone realDefaultZone = TimeZone.getDefault();
        try {
            Locale.setDefault(Locale.US);
            TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));

            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
            Date date1 = cal1.getTime();
            Date date2 = cal2.getTime();
            long millis1 = date1.getTime();
            long millis2 = date2.getTime();

            FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("Z");
            try{ assertEquals("-0500", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-0400", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("ZZ");
            try{ assertEquals("-05:00", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            assertEquals("-05:00", fdf.format(cal1));                                                                    /***** ORIGINAL ASSERTION IS HERE *****/
            try{ assertEquals("-05:00", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-04:00", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +
                " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
            fdf = FastDateFormat.getInstance(pattern);
            sdf = new SimpleDateFormat(pattern);
            // SDF bug fix starting with Java 7
            try{ assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            Locale.setDefault(realDefaultLocale);
            TimeZone.setDefault(realDefaultZone);
        }
    }     public void testFormat$catena_15() {
        Locale realDefaultLocale = Locale.getDefault();
        TimeZone realDefaultZone = TimeZone.getDefault();
        try {
            Locale.setDefault(Locale.US);
            TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));

            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
            Date date1 = cal1.getTime();
            Date date2 = cal2.getTime();
            long millis1 = date1.getTime();
            long millis2 = date2.getTime();

            FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("Z");
            try{ assertEquals("-0500", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-0400", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("ZZ");
            try{ assertEquals("-05:00", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            assertEquals("-05:00", fdf.format(millis1));                                                                 /***** ORIGINAL ASSERTION IS HERE *****/

            try{ assertEquals("-04:00", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +
                " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
            fdf = FastDateFormat.getInstance(pattern);
            sdf = new SimpleDateFormat(pattern);
            // SDF bug fix starting with Java 7
            try{ assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            Locale.setDefault(realDefaultLocale);
            TimeZone.setDefault(realDefaultZone);
        }
    }     public void testFormat$catena_16() {
        Locale realDefaultLocale = Locale.getDefault();
        TimeZone realDefaultZone = TimeZone.getDefault();
        try {
            Locale.setDefault(Locale.US);
            TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));

            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
            Date date1 = cal1.getTime();
            Date date2 = cal2.getTime();
            long millis1 = date1.getTime();
            long millis2 = date2.getTime();

            FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("Z");
            try{ assertEquals("-0500", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-0400", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("ZZ");
            try{ assertEquals("-05:00", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            assertEquals("-04:00", fdf.format(date2));                                                                   /***** ORIGINAL ASSERTION IS HERE *****/
            try{ assertEquals("-04:00", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +
                " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
            fdf = FastDateFormat.getInstance(pattern);
            sdf = new SimpleDateFormat(pattern);
            // SDF bug fix starting with Java 7
            try{ assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            Locale.setDefault(realDefaultLocale);
            TimeZone.setDefault(realDefaultZone);
        }
    }     public void testFormat$catena_17() {
        Locale realDefaultLocale = Locale.getDefault();
        TimeZone realDefaultZone = TimeZone.getDefault();
        try {
            Locale.setDefault(Locale.US);
            TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));

            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
            Date date1 = cal1.getTime();
            Date date2 = cal2.getTime();
            long millis1 = date1.getTime();
            long millis2 = date2.getTime();

            FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("Z");
            try{ assertEquals("-0500", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-0400", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("ZZ");
            try{ assertEquals("-05:00", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-04:00", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            assertEquals("-04:00", fdf.format(cal2));                                                                    /***** ORIGINAL ASSERTION IS HERE *****/
            try{ assertEquals("-04:00", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +
                " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
            fdf = FastDateFormat.getInstance(pattern);
            sdf = new SimpleDateFormat(pattern);
            // SDF bug fix starting with Java 7
            try{ assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            Locale.setDefault(realDefaultLocale);
            TimeZone.setDefault(realDefaultZone);
        }
    }     public void testFormat$catena_18() {
        Locale realDefaultLocale = Locale.getDefault();
        TimeZone realDefaultZone = TimeZone.getDefault();
        try {
            Locale.setDefault(Locale.US);
            TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));

            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
            Date date1 = cal1.getTime();
            Date date2 = cal2.getTime();
            long millis1 = date1.getTime();
            long millis2 = date2.getTime();

            FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("Z");
            try{ assertEquals("-0500", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-0400", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("ZZ");
            try{ assertEquals("-05:00", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-04:00", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            assertEquals("-04:00", fdf.format(millis2));                                                                 /***** ORIGINAL ASSERTION IS HERE *****/

            String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +
                " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
            fdf = FastDateFormat.getInstance(pattern);
            sdf = new SimpleDateFormat(pattern);
            // SDF bug fix starting with Java 7
            try{ assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            Locale.setDefault(realDefaultLocale);
            TimeZone.setDefault(realDefaultZone);
        }
    }     public void testFormat$catena_19() {
        Locale realDefaultLocale = Locale.getDefault();
        TimeZone realDefaultZone = TimeZone.getDefault();
        try {
            Locale.setDefault(Locale.US);
            TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));

            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
            Date date1 = cal1.getTime();
            Date date2 = cal2.getTime();
            long millis1 = date1.getTime();
            long millis2 = date2.getTime();

            FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("Z");
            try{ assertEquals("-0500", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-0400", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("ZZ");
            try{ assertEquals("-05:00", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-04:00", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +
                " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
            fdf = FastDateFormat.getInstance(pattern);
            sdf = new SimpleDateFormat(pattern);
            // SDF bug fix starting with Java 7
            assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1));         /***** ORIGINAL ASSERTION IS HERE *****/
            try{ assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            Locale.setDefault(realDefaultLocale);
            TimeZone.setDefault(realDefaultZone);
        }
    }     public void testFormat$catena_20() {
        Locale realDefaultLocale = Locale.getDefault();
        TimeZone realDefaultZone = TimeZone.getDefault();
        try {
            Locale.setDefault(Locale.US);
            TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));

            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
            Date date1 = cal1.getTime();
            Date date2 = cal2.getTime();
            long millis1 = date1.getTime();
            long millis2 = date2.getTime();

            FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-01-10T15:33:20", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("2003-07-10T09:00:00", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("Z");
            try{ assertEquals("-0500", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0500", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-0400", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-0400", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

            fdf = FastDateFormat.getInstance("ZZ");
            try{ assertEquals("-05:00", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-05:00", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            try{ assertEquals("-04:00", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals("-04:00", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

            String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +
                " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
            fdf = FastDateFormat.getInstance(pattern);
            sdf = new SimpleDateFormat(pattern);
            // SDF bug fix starting with Java 7
            try{ assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}
            assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2));         /***** ORIGINAL ASSERTION IS HERE *****/
        } finally {
            Locale.setDefault(realDefaultLocale);
            TimeZone.setDefault(realDefaultZone);
        }
    }
trace file: src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java
new test num: 21
ori test num: 0
pattern: 00
patches are written to file
running tests...
used time: Finished in 30.34 seconds
Failing tests: 2
	org.apache.commons.lang3.time.FastDateFormatTest::testFormat$catena_19
	org.apache.commons.lang3.time.FastDateFormatTest::testFormat$catena_20
pattern: 01
try to fix hunk: 1
replace from 498 with range 1 to
                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);

patches are written to file
running tests...
used time: Finished in 22.11 seconds
Failing tests: 3
	org.apache.commons.lang3.time.FastDateFormatTest::testShortDateStyleWithLocales
	org.apache.commons.lang3.time.FastDateFormatTest::testFormat$catena_19
	org.apache.commons.lang3.time.FastDateFormatTest::testFormat$catena_20
Includes new failing tests, set to unusable
pattern: 10
try to fix hunk: 0
replace from 495 with range 2 to
                if (tokenLen == 2) {
                    rule = TwoDigitYearField.INSTANCE;

patches are written to file
running tests...
used time: Finished in 24.92 seconds
Failing tests: 22
	org.apache.commons.lang3.time.DateFormatUtilsTest::testFormatUTC
	org.apache.commons.lang3.time.DateFormatUtilsTest::testFormatCalendar
	org.apache.commons.lang3.time.DateFormatUtilsTest::testSMTP
	org.apache.commons.lang3.time.DateFormatUtilsTest::testDateTimeISO
	org.apache.commons.lang3.time.DateFormatUtilsTest::testDateISO
	org.apache.commons.lang3.time.DateFormatUtilsTest::testFormat
	org.apache.commons.lang3.time.DateUtilsTest::testLang530
	org.apache.commons.lang3.time.DurationFormatUtilsTest::testFormatPeriodISO
	org.apache.commons.lang3.time.FastDateFormatTest::testSimpleDate
	org.apache.commons.lang3.time.FastDateFormatTest::testShortDateStyleWithLocales
	org.apache.commons.lang3.time.FastDateFormatTest::testMilleniumBug
	org.apache.commons.lang3.time.FastDateFormatTest::testLowYearPadding
	org.apache.commons.lang3.time.FastDateFormatTest::testFormat$catena_19
	org.apache.commons.lang3.time.FastDateFormatTest::testFormat$catena_20
	org.apache.commons.lang3.time.FastDateFormatTest::testLang538
	org.apache.commons.lang3.time.FastDateFormatTest::testFormat$catena_0
	org.apache.commons.lang3.time.FastDateFormatTest::testFormat$catena_1
	org.apache.commons.lang3.time.FastDateFormatTest::testFormat$catena_2
	org.apache.commons.lang3.time.FastDateFormatTest::testFormat$catena_3
	org.apache.commons.lang3.time.FastDateFormatTest::testFormat$catena_4
	org.apache.commons.lang3.time.FastDateFormatTest::testFormat$catena_5
	org.apache.commons.lang3.time.FastDateFormatTest::testFormat$catena_6
Includes new failing tests, set to unusable
pattern: 11
try to fix hunk: 0
replace from 495 with range 2 to
                if (tokenLen == 2) {
                    rule = TwoDigitYearField.INSTANCE;

try to fix hunk: 1
replace from 498 with range 1 to
                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);

patches are written to file
running tests...
used time: Finished in 23.32 seconds
Failing tests: 0
Can independently fix ['org.apache.commons.lang3.time.FastDateFormatTest::testFormat$catena_20', 'org.apache.commons.lang3.time.FastDateFormatTest::testFormat$catena_19']
select new bug
Pattern: 11
failing tests: org.apache.commons.lang3.time.FastDateFormatTest::testFormat$catena_20@org.apache.commons.lang3.time.FastDateFormatTest::testFormat$catena_19
Find 1 new bugs
