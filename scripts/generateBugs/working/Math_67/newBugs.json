{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java",
            "from_line_no": 92,
            "to_line_no": 92,
            "replaced_with": "        return optimaValues[0];\n",
            "replaced": "        return optimizer.getFunctionValue();\n",
            "patch_type": "replace",
            "next_line_no": 93
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java",
            "from_line_no": 97,
            "to_line_no": 97,
            "replaced_with": "        return optima[0];\n",
            "replaced": "        return optimizer.getResult();\n",
            "patch_type": "replace",
            "next_line_no": 98
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest::testQuinticMin"
        ],
        "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest::testQuinticMin": {
            "file_path": "src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java",
            "Instance": "Begin: Pos(55, 5)\nEnd: Pos(100, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_67/src/test/java//org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java\nName: testQuinticMin\nChilds: [StatementAssertion<Begin: Pos(70, 13), End: Pos(70, 57)>,\nStatementAssertion<Begin: Pos(74, 13), End: Pos(74, 43)>,\nStatementAssertion<Begin: Pos(78, 13), End: Pos(78, 57)>,\nStatementAssertion<Begin: Pos(82, 13), End: Pos(82, 43)>,\nStatementAssertion<Begin: Pos(85, 9), End: Pos(85, 103)>,\nStatementAssertion<Begin: Pos(86, 9), End: Pos(86, 72)>,\nStatementAssertion<Begin: Pos(87, 9), End: Pos(87, 79)>,\nStatementAssertion<Begin: Pos(92, 13), End: Pos(92, 71)>,\nStatementAssertion<Begin: Pos(95, 9), End: Pos(95, 57)>,\nStatementAssertion<Begin: Pos(96, 9), End: Pos(96, 57)>,\nStatementAssertion<Begin: Pos(97, 9), End: Pos(97, 57)>,\nStatementAssertion<Begin: Pos(98, 9), End: Pos(98, 57)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_67/src/test/java//org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java",
            "name": "testQuinticMin",
            "begin": "Pos(55, 5)",
            "end": "Pos(100, 5)",
            "begin_line_no": 55,
            "end_line_no": 100,
            "child": [
                "Begin: Pos(70, 13)\nEnd: Pos(70, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(74, 13)\nEnd: Pos(74, 43)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(78, 13)\nEnd: Pos(78, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(82, 13)\nEnd: Pos(82, 43)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(85, 9)\nEnd: Pos(85, 103)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(86, 9)\nEnd: Pos(86, 72)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(87, 9)\nEnd: Pos(87, 79)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(92, 13)\nEnd: Pos(92, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(95, 9)\nEnd: Pos(95, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(96, 9)\nEnd: Pos(96, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(97, 9)\nEnd: Pos(97, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(98, 9)\nEnd: Pos(98, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void testQuinticMin$catena_0() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            fail(\"an exception should have been thrown\");                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertTrue(minimizer.getEvaluations()    >= 510);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 530);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 150);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    @Test\n    public void testQuinticMin$catena_1() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertTrue(minimizer.getEvaluations()    >= 510);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 530);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 150);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    @Test\n    public void testQuinticMin$catena_2() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            fail(\"an exception should have been thrown\");                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertTrue(minimizer.getEvaluations()    >= 510);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 530);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 150);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    @Test\n    public void testQuinticMin$catena_3() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n\n        try{ assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertTrue(minimizer.getEvaluations()    >= 510);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 530);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 150);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    @Test\n    public void testQuinticMin$catena_4() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertTrue(minimizer.getEvaluations()    >= 510);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 530);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 150);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    @Test\n    public void testQuinticMin$catena_5() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertTrue(minimizer.getEvaluations()    >= 510);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 530);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 150);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    @Test\n    public void testQuinticMin$catena_6() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertTrue(minimizer.getEvaluations()    >= 510);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 530);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 150);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    @Test\n    public void testQuinticMin$catena_7() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n\n        try{ assertTrue(minimizer.getEvaluations()    >= 510);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 530);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 150);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    @Test\n    public void testQuinticMin$catena_8() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        assertTrue(minimizer.getEvaluations()    >= 510);                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(minimizer.getEvaluations()    <= 530);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 150);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    @Test\n    public void testQuinticMin$catena_9() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertTrue(minimizer.getEvaluations()    >= 510);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(minimizer.getEvaluations()    <= 530);                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(minimizer.getIterationCount() >= 150);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    @Test\n    public void testQuinticMin$catena_10() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertTrue(minimizer.getEvaluations()    >= 510);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 530);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(minimizer.getIterationCount() >= 150);                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    @Test\n    public void testQuinticMin$catena_11() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertTrue(minimizer.getEvaluations()    >= 510);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 530);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 150);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(minimizer.getIterationCount() <= 170);                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void testQuinticMin$catena_0() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            fail(\"an exception should have been thrown\");                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertTrue(minimizer.getEvaluations()    >= 510);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 530);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 150);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "1": "    @Test\n    public void testQuinticMin$catena_1() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertTrue(minimizer.getEvaluations()    >= 510);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 530);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 150);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "2": "    @Test\n    public void testQuinticMin$catena_2() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            fail(\"an exception should have been thrown\");                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertTrue(minimizer.getEvaluations()    >= 510);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 530);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 150);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "3": "    @Test\n    public void testQuinticMin$catena_3() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n\n        try{ assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertTrue(minimizer.getEvaluations()    >= 510);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 530);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 150);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "4": "    @Test\n    public void testQuinticMin$catena_4() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertTrue(minimizer.getEvaluations()    >= 510);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 530);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 150);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "5": "    @Test\n    public void testQuinticMin$catena_5() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertTrue(minimizer.getEvaluations()    >= 510);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 530);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 150);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "6": "    @Test\n    public void testQuinticMin$catena_6() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertTrue(minimizer.getEvaluations()    >= 510);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 530);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 150);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "7": "    @Test\n    public void testQuinticMin$catena_7() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n\n        try{ assertTrue(minimizer.getEvaluations()    >= 510);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 530);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 150);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "8": "    @Test\n    public void testQuinticMin$catena_8() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        assertTrue(minimizer.getEvaluations()    >= 510);                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(minimizer.getEvaluations()    <= 530);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 150);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "9": "    @Test\n    public void testQuinticMin$catena_9() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertTrue(minimizer.getEvaluations()    >= 510);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(minimizer.getEvaluations()    <= 530);                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(minimizer.getIterationCount() >= 150);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "10": "    @Test\n    public void testQuinticMin$catena_10() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertTrue(minimizer.getEvaluations()    >= 510);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 530);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(minimizer.getIterationCount() >= 150);                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "11": "    @Test\n    public void testQuinticMin$catena_11() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try{ assertTrue(minimizer.getEvaluations()    >= 510);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 530);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 150);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(minimizer.getIterationCount() <= 170);                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }"
            }
        }
    },
    "01": {
        "failing_tests": [
            "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest::testQuinticMin$catena_5"
        ]
    },
    "10": {
        "failing_tests": [
            "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest::testQuinticMin$catena_6"
        ]
    }
}