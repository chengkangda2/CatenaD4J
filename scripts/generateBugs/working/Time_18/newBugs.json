{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/main/java/org/joda/time/chrono/GJChronology.java",
            "replaced_with": "        try {\n",
            "patch_type": "insert",
            "next_line_no": 364
        },
        "1": {
            "file_name": "src/main/java/org/joda/time/chrono/GJChronology.java",
            "replaced_with": "        } catch (IllegalFieldValueException ex) {\n            if (monthOfYear != 2 || dayOfMonth != 29) {\n                throw ex;\n            }\n            instant = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, 28,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (instant >= iCutoverMillis) {\n                throw ex;\n            }\n        }\n",
            "patch_type": "insert",
            "next_line_no": 367
        }
    },
    "method": {
        "failing_tests": [
            "org.joda.time.chrono.TestGJChronology::testLeapYearRulesConstruction"
        ],
        "org.joda.time.chrono.TestGJChronology::testLeapYearRulesConstruction": {
            "file_path": "src/test/java/org/joda/time/chrono/TestGJChronology.java",
            "Instance": "Begin: Pos(494, 12)\nEnd: Pos(500, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Time_18/src/test/java//org/joda/time/chrono/TestGJChronology.java\nName: testLeapYearRulesConstruction\nChilds: [StatementAssertion<Begin: Pos(497, 9), End: Pos(497, 41)>,\nStatementAssertion<Begin: Pos(498, 9), End: Pos(498, 45)>,\nStatementAssertion<Begin: Pos(499, 9), End: Pos(499, 45)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Time_18/src/test/java//org/joda/time/chrono/TestGJChronology.java",
            "name": "testLeapYearRulesConstruction",
            "begin": "Pos(494, 12)",
            "end": "Pos(500, 5)",
            "begin_line_no": 494,
            "end_line_no": 500,
            "child": [
                "Begin: Pos(497, 9)\nEnd: Pos(497, 41)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(498, 9)\nEnd: Pos(498, 45)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(499, 9)\nEnd: Pos(499, 45)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testLeapYearRulesConstruction$catena_0() {\n        // 1500 not leap in Gregorian, but is leap in Julian\n        DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n        assertEquals(dt.getYear(), 1500);                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(dt.getMonthOfYear(), 2);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(dt.getDayOfMonth(), 29);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testLeapYearRulesConstruction$catena_1() {\n        // 1500 not leap in Gregorian, but is leap in Julian\n        DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n        try{ assertEquals(dt.getYear(), 1500);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(dt.getMonthOfYear(), 2);                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(dt.getDayOfMonth(), 29);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testLeapYearRulesConstruction$catena_2() {\n        // 1500 not leap in Gregorian, but is leap in Julian\n        DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n        try{ assertEquals(dt.getYear(), 1500);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(dt.getMonthOfYear(), 2);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(dt.getDayOfMonth(), 29);                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testLeapYearRulesConstruction$catena_0() {\n        // 1500 not leap in Gregorian, but is leap in Julian\n        DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n        assertEquals(dt.getYear(), 1500);                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(dt.getMonthOfYear(), 2);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(dt.getDayOfMonth(), 29);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testLeapYearRulesConstruction$catena_1() {\n        // 1500 not leap in Gregorian, but is leap in Julian\n        DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n        try{ assertEquals(dt.getYear(), 1500);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(dt.getMonthOfYear(), 2);                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(dt.getDayOfMonth(), 29);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testLeapYearRulesConstruction$catena_2() {\n        // 1500 not leap in Gregorian, but is leap in Julian\n        DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n        try{ assertEquals(dt.getYear(), 1500);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(dt.getMonthOfYear(), 2);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(dt.getDayOfMonth(), 29);                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "11": {
        "failing_tests": [
            "org.joda.time.chrono.TestGJChronology::testLeapYearRulesConstruction$catena_1",
            "org.joda.time.chrono.TestGJChronology::testLeapYearRulesConstruction$catena_2",
            "org.joda.time.chrono.TestGJChronology::testLeapYearRulesConstruction$catena_0"
        ]
    }
}