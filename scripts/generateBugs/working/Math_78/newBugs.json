{
    "original": {
        "num_of_hunks": 3,
        "0": {
            "file_name": "src/main/java/org/apache/commons/math/ode/events/EventState.java",
            "replaced_with": "                    if (ga * gb > 0) {\n",
            "patch_type": "insert",
            "next_line_no": 191
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/math/ode/events/EventState.java",
            "replaced_with": "                        final double epsilon = (forward ? 0.25 : -0.25) * convergence;\n                        for (int k = 0; (k < 4) && (ga * gb > 0); ++k) {\n                            ta += epsilon;\n                            interpolator.setInterpolatedTime(ta);\n                            ga = handler.g(ta, interpolator.getInterpolatedState());\n                        }\n                        if (ga * gb > 0) {\n",
            "patch_type": "insert",
            "next_line_no": 198
        },
        "2": {
            "file_name": "src/main/java/org/apache/commons/math/ode/events/EventState.java",
            "replaced_with": "                            throw MathRuntimeException.createInternalError(null);\n                        }\n                    }\n",
            "patch_type": "insert",
            "next_line_no": 199
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math.ode.events.EventStateTest::closeEvents"
        ],
        "org.apache.commons.math.ode.events.EventStateTest::closeEvents": {
            "file_path": "src/test/java/org/apache/commons/math/ode/events/EventStateTest.java",
            "Instance": "Begin: Pos(31, 5)\nEnd: Pos(69, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_78/src/test/java//org/apache/commons/math/ode/events/EventStateTest.java\nName: closeEvents\nChilds: [StatementAssertion<Begin: Pos(60, 9), End: Pos(60, 57)>,\nStatementAssertion<Begin: Pos(61, 9), End: Pos(61, 62)>,\nStatementAssertion<Begin: Pos(66, 9), End: Pos(66, 57)>,\nStatementAssertion<Begin: Pos(67, 9), End: Pos(67, 62)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_78/src/test/java//org/apache/commons/math/ode/events/EventStateTest.java",
            "name": "closeEvents",
            "begin": "Pos(31, 5)",
            "end": "Pos(69, 5)",
            "begin_line_no": 31,
            "end_line_no": 69,
            "child": [
                "Begin: Pos(60, 9)\nEnd: Pos(60, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(61, 9)\nEnd: Pos(61, 62)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(66, 9)\nEnd: Pos(66, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(67, 9)\nEnd: Pos(67, 62)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void closeEvents$catena_0()\n        throws EventException, ConvergenceException, DerivativeException {\n\n        final double r1  = 90.0;\n        final double r2  = 135.0;\n        final double gap = r2 - r1;\n        EventHandler closeEventsGenerator = new EventHandler() {\n            public void resetState(double t, double[] y) {\n            }\n            public double g(double t, double[] y) {\n                return (t - r1) * (r2 - t);\n            }\n            public int eventOccurred(double t, double[] y, boolean increasing) {\n                return CONTINUE;\n            }\n        };\n\n        final double tolerance = 0.1;\n        EventState es = new EventState(closeEventsGenerator, 1.5 * gap, tolerance, 10);\n\n        double t0 = r1 - 0.5 * gap;\n        es.reinitializeBegin(t0, new double[0]);\n        AbstractStepInterpolator interpolator =\n            new DummyStepInterpolator(new double[0], true);\n        interpolator.storeTime(t0);\n\n        interpolator.shift();\n        interpolator.storeTime(0.5 * (r1 + r2));\n        Assert.assertTrue(es.evaluateStep(interpolator));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertEquals(r1, es.getEventTime(), tolerance);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        es.stepAccepted(es.getEventTime(), new double[0]);\n\n        interpolator.shift();\n        interpolator.storeTime(r2 + 0.4 * gap);\n        try{ Assert.assertTrue(es.evaluateStep(interpolator));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(r2, es.getEventTime(), tolerance);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    @Test\n    public void closeEvents$catena_1()\n        throws EventException, ConvergenceException, DerivativeException {\n\n        final double r1  = 90.0;\n        final double r2  = 135.0;\n        final double gap = r2 - r1;\n        EventHandler closeEventsGenerator = new EventHandler() {\n            public void resetState(double t, double[] y) {\n            }\n            public double g(double t, double[] y) {\n                return (t - r1) * (r2 - t);\n            }\n            public int eventOccurred(double t, double[] y, boolean increasing) {\n                return CONTINUE;\n            }\n        };\n\n        final double tolerance = 0.1;\n        EventState es = new EventState(closeEventsGenerator, 1.5 * gap, tolerance, 10);\n\n        double t0 = r1 - 0.5 * gap;\n        es.reinitializeBegin(t0, new double[0]);\n        AbstractStepInterpolator interpolator =\n            new DummyStepInterpolator(new double[0], true);\n        interpolator.storeTime(t0);\n\n        interpolator.shift();\n        interpolator.storeTime(0.5 * (r1 + r2));\n        try{ Assert.assertTrue(es.evaluateStep(interpolator));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertEquals(r1, es.getEventTime(), tolerance);                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        es.stepAccepted(es.getEventTime(), new double[0]);\n\n        interpolator.shift();\n        interpolator.storeTime(r2 + 0.4 * gap);\n        try{ Assert.assertTrue(es.evaluateStep(interpolator));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(r2, es.getEventTime(), tolerance);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    @Test\n    public void closeEvents$catena_2()\n        throws EventException, ConvergenceException, DerivativeException {\n\n        final double r1  = 90.0;\n        final double r2  = 135.0;\n        final double gap = r2 - r1;\n        EventHandler closeEventsGenerator = new EventHandler() {\n            public void resetState(double t, double[] y) {\n            }\n            public double g(double t, double[] y) {\n                return (t - r1) * (r2 - t);\n            }\n            public int eventOccurred(double t, double[] y, boolean increasing) {\n                return CONTINUE;\n            }\n        };\n\n        final double tolerance = 0.1;\n        EventState es = new EventState(closeEventsGenerator, 1.5 * gap, tolerance, 10);\n\n        double t0 = r1 - 0.5 * gap;\n        es.reinitializeBegin(t0, new double[0]);\n        AbstractStepInterpolator interpolator =\n            new DummyStepInterpolator(new double[0], true);\n        interpolator.storeTime(t0);\n\n        interpolator.shift();\n        interpolator.storeTime(0.5 * (r1 + r2));\n        try{ Assert.assertTrue(es.evaluateStep(interpolator));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(r1, es.getEventTime(), tolerance);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        es.stepAccepted(es.getEventTime(), new double[0]);\n\n        interpolator.shift();\n        interpolator.storeTime(r2 + 0.4 * gap);\n        Assert.assertTrue(es.evaluateStep(interpolator));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertEquals(r2, es.getEventTime(), tolerance);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    @Test\n    public void closeEvents$catena_3()\n        throws EventException, ConvergenceException, DerivativeException {\n\n        final double r1  = 90.0;\n        final double r2  = 135.0;\n        final double gap = r2 - r1;\n        EventHandler closeEventsGenerator = new EventHandler() {\n            public void resetState(double t, double[] y) {\n            }\n            public double g(double t, double[] y) {\n                return (t - r1) * (r2 - t);\n            }\n            public int eventOccurred(double t, double[] y, boolean increasing) {\n                return CONTINUE;\n            }\n        };\n\n        final double tolerance = 0.1;\n        EventState es = new EventState(closeEventsGenerator, 1.5 * gap, tolerance, 10);\n\n        double t0 = r1 - 0.5 * gap;\n        es.reinitializeBegin(t0, new double[0]);\n        AbstractStepInterpolator interpolator =\n            new DummyStepInterpolator(new double[0], true);\n        interpolator.storeTime(t0);\n\n        interpolator.shift();\n        interpolator.storeTime(0.5 * (r1 + r2));\n        try{ Assert.assertTrue(es.evaluateStep(interpolator));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(r1, es.getEventTime(), tolerance);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        es.stepAccepted(es.getEventTime(), new double[0]);\n\n        interpolator.shift();\n        interpolator.storeTime(r2 + 0.4 * gap);\n        try{ Assert.assertTrue(es.evaluateStep(interpolator));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertEquals(r2, es.getEventTime(), tolerance);                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void closeEvents$catena_0()\n        throws EventException, ConvergenceException, DerivativeException {\n\n        final double r1  = 90.0;\n        final double r2  = 135.0;\n        final double gap = r2 - r1;\n        EventHandler closeEventsGenerator = new EventHandler() {\n            public void resetState(double t, double[] y) {\n            }\n            public double g(double t, double[] y) {\n                return (t - r1) * (r2 - t);\n            }\n            public int eventOccurred(double t, double[] y, boolean increasing) {\n                return CONTINUE;\n            }\n        };\n\n        final double tolerance = 0.1;\n        EventState es = new EventState(closeEventsGenerator, 1.5 * gap, tolerance, 10);\n\n        double t0 = r1 - 0.5 * gap;\n        es.reinitializeBegin(t0, new double[0]);\n        AbstractStepInterpolator interpolator =\n            new DummyStepInterpolator(new double[0], true);\n        interpolator.storeTime(t0);\n\n        interpolator.shift();\n        interpolator.storeTime(0.5 * (r1 + r2));\n        Assert.assertTrue(es.evaluateStep(interpolator));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertEquals(r1, es.getEventTime(), tolerance);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        es.stepAccepted(es.getEventTime(), new double[0]);\n\n        interpolator.shift();\n        interpolator.storeTime(r2 + 0.4 * gap);\n        try{ Assert.assertTrue(es.evaluateStep(interpolator));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(r2, es.getEventTime(), tolerance);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "1": "    @Test\n    public void closeEvents$catena_1()\n        throws EventException, ConvergenceException, DerivativeException {\n\n        final double r1  = 90.0;\n        final double r2  = 135.0;\n        final double gap = r2 - r1;\n        EventHandler closeEventsGenerator = new EventHandler() {\n            public void resetState(double t, double[] y) {\n            }\n            public double g(double t, double[] y) {\n                return (t - r1) * (r2 - t);\n            }\n            public int eventOccurred(double t, double[] y, boolean increasing) {\n                return CONTINUE;\n            }\n        };\n\n        final double tolerance = 0.1;\n        EventState es = new EventState(closeEventsGenerator, 1.5 * gap, tolerance, 10);\n\n        double t0 = r1 - 0.5 * gap;\n        es.reinitializeBegin(t0, new double[0]);\n        AbstractStepInterpolator interpolator =\n            new DummyStepInterpolator(new double[0], true);\n        interpolator.storeTime(t0);\n\n        interpolator.shift();\n        interpolator.storeTime(0.5 * (r1 + r2));\n        try{ Assert.assertTrue(es.evaluateStep(interpolator));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertEquals(r1, es.getEventTime(), tolerance);                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        es.stepAccepted(es.getEventTime(), new double[0]);\n\n        interpolator.shift();\n        interpolator.storeTime(r2 + 0.4 * gap);\n        try{ Assert.assertTrue(es.evaluateStep(interpolator));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(r2, es.getEventTime(), tolerance);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "2": "    @Test\n    public void closeEvents$catena_2()\n        throws EventException, ConvergenceException, DerivativeException {\n\n        final double r1  = 90.0;\n        final double r2  = 135.0;\n        final double gap = r2 - r1;\n        EventHandler closeEventsGenerator = new EventHandler() {\n            public void resetState(double t, double[] y) {\n            }\n            public double g(double t, double[] y) {\n                return (t - r1) * (r2 - t);\n            }\n            public int eventOccurred(double t, double[] y, boolean increasing) {\n                return CONTINUE;\n            }\n        };\n\n        final double tolerance = 0.1;\n        EventState es = new EventState(closeEventsGenerator, 1.5 * gap, tolerance, 10);\n\n        double t0 = r1 - 0.5 * gap;\n        es.reinitializeBegin(t0, new double[0]);\n        AbstractStepInterpolator interpolator =\n            new DummyStepInterpolator(new double[0], true);\n        interpolator.storeTime(t0);\n\n        interpolator.shift();\n        interpolator.storeTime(0.5 * (r1 + r2));\n        try{ Assert.assertTrue(es.evaluateStep(interpolator));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(r1, es.getEventTime(), tolerance);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        es.stepAccepted(es.getEventTime(), new double[0]);\n\n        interpolator.shift();\n        interpolator.storeTime(r2 + 0.4 * gap);\n        Assert.assertTrue(es.evaluateStep(interpolator));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertEquals(r2, es.getEventTime(), tolerance);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "3": "    @Test\n    public void closeEvents$catena_3()\n        throws EventException, ConvergenceException, DerivativeException {\n\n        final double r1  = 90.0;\n        final double r2  = 135.0;\n        final double gap = r2 - r1;\n        EventHandler closeEventsGenerator = new EventHandler() {\n            public void resetState(double t, double[] y) {\n            }\n            public double g(double t, double[] y) {\n                return (t - r1) * (r2 - t);\n            }\n            public int eventOccurred(double t, double[] y, boolean increasing) {\n                return CONTINUE;\n            }\n        };\n\n        final double tolerance = 0.1;\n        EventState es = new EventState(closeEventsGenerator, 1.5 * gap, tolerance, 10);\n\n        double t0 = r1 - 0.5 * gap;\n        es.reinitializeBegin(t0, new double[0]);\n        AbstractStepInterpolator interpolator =\n            new DummyStepInterpolator(new double[0], true);\n        interpolator.storeTime(t0);\n\n        interpolator.shift();\n        interpolator.storeTime(0.5 * (r1 + r2));\n        try{ Assert.assertTrue(es.evaluateStep(interpolator));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(r1, es.getEventTime(), tolerance);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        es.stepAccepted(es.getEventTime(), new double[0]);\n\n        interpolator.shift();\n        interpolator.storeTime(r2 + 0.4 * gap);\n        try{ Assert.assertTrue(es.evaluateStep(interpolator));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertEquals(r2, es.getEventTime(), tolerance);                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }"
            }
        }
    },
    "111": {
        "failing_tests": [
            "org.apache.commons.math.ode.events.EventStateTest::closeEvents$catena_2",
            "org.apache.commons.math.ode.events.EventStateTest::closeEvents$catena_3"
        ]
    }
}