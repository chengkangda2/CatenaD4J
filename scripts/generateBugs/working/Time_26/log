---
Begin generate bug_id: Time_26
num_of_hunks: 9
timeout for running: 3600
use working dir: ./working/data/Time_26
Try to checkout Time_26
build dir: ['./working/data/Time_26/build/classes', './working/data/Time_26/build/tests']
init FileManager
trace file: src/main/java/org/joda/time/DateTimeZone.java
trace file: src/main/java/org/joda/time/chrono/ZonedChronology.java
trace file: src/main/java/org/joda/time/field/LenientDateTimeField.java
trying to replace old failing tests
edit: replace from 1097 range 6 at src/test/java/org/joda/time/TestDateTimeZoneCutover.java
to
    public void testWithSecondOfMinuteInDstChange$catena_0() {
        DateTime dateTime = new DateTime("2010-10-31T02:30:10.123+02:00", ZONE_PARIS);
        assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString());                                 /***** ORIGINAL ASSERTION IS HERE *****/
        DateTime test = dateTime.withSecondOfMinute(0);
        try{ assertEquals("2010-10-31T02:30:00.123+02:00", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testWithSecondOfMinuteInDstChange$catena_1() {
        DateTime dateTime = new DateTime("2010-10-31T02:30:10.123+02:00", ZONE_PARIS);
        try{ assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}
        DateTime test = dateTime.withSecondOfMinute(0);
        assertEquals("2010-10-31T02:30:00.123+02:00", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 1090 range 6 at src/test/java/org/joda/time/TestDateTimeZoneCutover.java
to
    public void testWithMinuteOfHourInDstChange$catena_0() {
        DateTime dateTime = new DateTime("2010-10-31T02:30:10.123+02:00", ZONE_PARIS);
        assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString());                                 /***** ORIGINAL ASSERTION IS HERE *****/
        DateTime test = dateTime.withMinuteOfHour(0);
        try{ assertEquals("2010-10-31T02:00:10.123+02:00", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testWithMinuteOfHourInDstChange$catena_1() {
        DateTime dateTime = new DateTime("2010-10-31T02:30:10.123+02:00", ZONE_PARIS);
        try{ assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}
        DateTime test = dateTime.withMinuteOfHour(0);
        assertEquals("2010-10-31T02:00:10.123+02:00", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 1063 range 19 at src/test/java/org/joda/time/TestDateTimeZoneCutover.java
to
    public void testWithMinuteOfHourInDstChange_mockZone$catena_0() {
        DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));
        assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString());                                  /***** ORIGINAL ASSERTION IS HERE *****/
        DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);
        DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);
        try{ assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString());                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);
        try{ assertEquals("2010-10-31T01:59:00.000+00:30", post.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        
        DateTime testPre1 = pre.withMinuteOfHour(30);
        try{ assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString());          }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset
        DateTime testPre2 = pre.withMinuteOfHour(50);
        try{ assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}
        
        DateTime testPost1 = post.withMinuteOfHour(30);
        try{ assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString());         }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset
        DateTime testPost2 = post.withMinuteOfHour(10);
        try{ assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString());                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testWithMinuteOfHourInDstChange_mockZone$catena_1() {
        DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));
        try{ assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString());                             }catch(Throwable __SHOULD_BE_IGNORED){}
        DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);
        DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);
        assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString());                                      /***** ORIGINAL ASSERTION IS HERE *****/
        DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);
        try{ assertEquals("2010-10-31T01:59:00.000+00:30", post.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        
        DateTime testPre1 = pre.withMinuteOfHour(30);
        try{ assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString());          }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset
        DateTime testPre2 = pre.withMinuteOfHour(50);
        try{ assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}
        
        DateTime testPost1 = post.withMinuteOfHour(30);
        try{ assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString());         }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset
        DateTime testPost2 = post.withMinuteOfHour(10);
        try{ assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString());                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testWithMinuteOfHourInDstChange_mockZone$catena_2() {
        DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));
        try{ assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString());                             }catch(Throwable __SHOULD_BE_IGNORED){}
        DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);
        DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);
        try{ assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString());                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);
        assertEquals("2010-10-31T01:59:00.000+00:30", post.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/
        
        DateTime testPre1 = pre.withMinuteOfHour(30);
        try{ assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString());          }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset
        DateTime testPre2 = pre.withMinuteOfHour(50);
        try{ assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}
        
        DateTime testPost1 = post.withMinuteOfHour(30);
        try{ assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString());         }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset
        DateTime testPost2 = post.withMinuteOfHour(10);
        try{ assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString());                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testWithMinuteOfHourInDstChange_mockZone$catena_3() {
        DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));
        try{ assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString());                             }catch(Throwable __SHOULD_BE_IGNORED){}
        DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);
        DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);
        try{ assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString());                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);
        try{ assertEquals("2010-10-31T01:59:00.000+00:30", post.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        
        DateTime testPre1 = pre.withMinuteOfHour(30);
        assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString());               /***** ORIGINAL ASSERTION IS HERE *****/  // retain offset
        DateTime testPre2 = pre.withMinuteOfHour(50);
        try{ assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}
        
        DateTime testPost1 = post.withMinuteOfHour(30);
        try{ assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString());         }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset
        DateTime testPost2 = post.withMinuteOfHour(10);
        try{ assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString());                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testWithMinuteOfHourInDstChange_mockZone$catena_4() {
        DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));
        try{ assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString());                             }catch(Throwable __SHOULD_BE_IGNORED){}
        DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);
        DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);
        try{ assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString());                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);
        try{ assertEquals("2010-10-31T01:59:00.000+00:30", post.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        
        DateTime testPre1 = pre.withMinuteOfHour(30);
        try{ assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString());          }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset
        DateTime testPre2 = pre.withMinuteOfHour(50);
        assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString());                                 /***** ORIGINAL ASSERTION IS HERE *****/
        
        DateTime testPost1 = post.withMinuteOfHour(30);
        try{ assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString());         }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset
        DateTime testPost2 = post.withMinuteOfHour(10);
        try{ assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString());                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testWithMinuteOfHourInDstChange_mockZone$catena_5() {
        DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));
        try{ assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString());                             }catch(Throwable __SHOULD_BE_IGNORED){}
        DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);
        DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);
        try{ assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString());                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);
        try{ assertEquals("2010-10-31T01:59:00.000+00:30", post.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        
        DateTime testPre1 = pre.withMinuteOfHour(30);
        try{ assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString());          }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset
        DateTime testPre2 = pre.withMinuteOfHour(50);
        try{ assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}
        
        DateTime testPost1 = post.withMinuteOfHour(30);
        assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString());              /***** ORIGINAL ASSERTION IS HERE *****/  // retain offset
        DateTime testPost2 = post.withMinuteOfHour(10);
        try{ assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString());                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testWithMinuteOfHourInDstChange_mockZone$catena_6() {
        DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));
        try{ assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString());                             }catch(Throwable __SHOULD_BE_IGNORED){}
        DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);
        DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);
        try{ assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString());                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);
        try{ assertEquals("2010-10-31T01:59:00.000+00:30", post.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        
        DateTime testPre1 = pre.withMinuteOfHour(30);
        try{ assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString());          }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset
        DateTime testPre2 = pre.withMinuteOfHour(50);
        try{ assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}
        
        DateTime testPost1 = post.withMinuteOfHour(30);
        try{ assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString());         }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset
        DateTime testPost2 = post.withMinuteOfHour(10);
        assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString());                                /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 1153 range 18 at src/test/java/org/joda/time/TestDateTimeZoneCutover.java
to
    public void testBug2182444_usCentral$catena_0() {
        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central"));
        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);
        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);
        assertTrue("Should be standard time", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));               /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertFalse("Should be daylight time", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));         }catch(Throwable __SHOULD_BE_IGNORED){}
        
        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);
        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);
        try{ assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testBug2182444_usCentral$catena_1() {
        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central"));
        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);
        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);
        try{ assertTrue("Should be standard time", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));          }catch(Throwable __SHOULD_BE_IGNORED){}
        assertFalse("Should be daylight time", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));              /***** ORIGINAL ASSERTION IS HERE *****/
        
        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);
        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);
        try{ assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testBug2182444_usCentral$catena_2() {
        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central"));
        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);
        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);
        try{ assertTrue("Should be standard time", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse("Should be daylight time", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));         }catch(Throwable __SHOULD_BE_IGNORED){}
        
        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);
        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);
        assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());                                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testBug2182444_usCentral$catena_3() {
        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central"));
        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);
        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);
        try{ assertTrue("Should be standard time", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse("Should be daylight time", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));         }catch(Throwable __SHOULD_BE_IGNORED){}
        
        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);
        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);
        try{ assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testBug2182444_usCentral$catena_4() {
        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central"));
        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);
        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);
        try{ assertTrue("Should be standard time", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse("Should be daylight time", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));         }catch(Throwable __SHOULD_BE_IGNORED){}
        
        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);
        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);
        try{ assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());                        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testBug2182444_usCentral$catena_5() {
        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central"));
        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);
        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);
        try{ assertTrue("Should be standard time", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse("Should be daylight time", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));         }catch(Throwable __SHOULD_BE_IGNORED){}
        
        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);
        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);
        try{ assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());                              }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));                                          /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testBug2182444_usCentral$catena_6() {
        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central"));
        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);
        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);
        try{ assertTrue("Should be standard time", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse("Should be daylight time", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));         }catch(Throwable __SHOULD_BE_IGNORED){}
        
        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);
        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);
        try{ assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());         /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testBug2182444_usCentral$catena_7() {
        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central"));
        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);
        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);
        try{ assertTrue("Should be standard time", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse("Should be daylight time", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));         }catch(Throwable __SHOULD_BE_IGNORED){}
        
        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);
        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);
        try{ assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));                                          /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testBug2182444_usCentral$catena_8() {
        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central"));
        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);
        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);
        try{ assertTrue("Should be standard time", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse("Should be daylight time", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));         }catch(Throwable __SHOULD_BE_IGNORED){}
        
        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);
        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);
        try{ assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());         /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 1104 range 6 at src/test/java/org/joda/time/TestDateTimeZoneCutover.java
to
    public void testWithMillisOfSecondInDstChange_Paris_summer$catena_0() {
        DateTime dateTime = new DateTime("2010-10-31T02:30:10.123+02:00", ZONE_PARIS);
        assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString());                                 /***** ORIGINAL ASSERTION IS HERE *****/
        DateTime test = dateTime.withMillisOfSecond(0);
        try{ assertEquals("2010-10-31T02:30:10.000+02:00", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testWithMillisOfSecondInDstChange_Paris_summer$catena_1() {
        DateTime dateTime = new DateTime("2010-10-31T02:30:10.123+02:00", ZONE_PARIS);
        try{ assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}
        DateTime test = dateTime.withMillisOfSecond(0);
        assertEquals("2010-10-31T02:30:10.000+02:00", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 1083 range 6 at src/test/java/org/joda/time/TestDateTimeZoneCutover.java
to
    public void testWithHourOfDayInDstChange$catena_0() {
        DateTime dateTime = new DateTime("2010-10-31T02:30:10.123+02:00", ZONE_PARIS);
        assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString());                                 /***** ORIGINAL ASSERTION IS HERE *****/
        DateTime test = dateTime.withHourOfDay(2);
        try{ assertEquals("2010-10-31T02:30:10.123+02:00", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testWithHourOfDayInDstChange$catena_1() {
        DateTime dateTime = new DateTime("2010-10-31T02:30:10.123+02:00", ZONE_PARIS);
        try{ assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}
        DateTime test = dateTime.withHourOfDay(2);
        assertEquals("2010-10-31T02:30:10.123+02:00", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 1125 range 6 at src/test/java/org/joda/time/TestDateTimeZoneCutover.java
to
    public void testWithMillisOfSecondInDstChange_NewYork_winter$catena_0() {
        DateTime dateTime = new DateTime("2007-11-04T01:30:00.123-05:00", ZONE_NEW_YORK);
        assertEquals("2007-11-04T01:30:00.123-05:00", dateTime.toString());                                 /***** ORIGINAL ASSERTION IS HERE *****/
        DateTime test = dateTime.withMillisOfSecond(0);
        try{ assertEquals("2007-11-04T01:30:00.000-05:00", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testWithMillisOfSecondInDstChange_NewYork_winter$catena_1() {
        DateTime dateTime = new DateTime("2007-11-04T01:30:00.123-05:00", ZONE_NEW_YORK);
        try{ assertEquals("2007-11-04T01:30:00.123-05:00", dateTime.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}
        DateTime test = dateTime.withMillisOfSecond(0);
        assertEquals("2007-11-04T01:30:00.000-05:00", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 1172 range 18 at src/test/java/org/joda/time/TestDateTimeZoneCutover.java
to
    public void testBug2182444_ausNSW$catena_0() {
        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID("Australia/NSW"));
        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);
        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);
        assertTrue("Should be standard time", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));                           /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertFalse("Should be daylight time", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        
        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);
        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);
        try{ assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testBug2182444_ausNSW$catena_1() {
        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID("Australia/NSW"));
        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);
        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);
        try{ assertTrue("Should be standard time", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        assertFalse("Should be daylight time", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));                          /***** ORIGINAL ASSERTION IS HERE *****/
        
        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);
        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);
        try{ assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testBug2182444_ausNSW$catena_2() {
        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID("Australia/NSW"));
        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);
        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);
        try{ assertTrue("Should be standard time", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse("Should be daylight time", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        
        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);
        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);
        assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());                                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testBug2182444_ausNSW$catena_3() {
        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID("Australia/NSW"));
        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);
        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);
        try{ assertTrue("Should be standard time", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse("Should be daylight time", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        
        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);
        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);
        try{ assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());                              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testBug2182444_ausNSW$catena_4() {
        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID("Australia/NSW"));
        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);
        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);
        try{ assertTrue("Should be standard time", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse("Should be daylight time", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        
        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);
        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);
        try{ assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());                         }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());                                    /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testBug2182444_ausNSW$catena_5() {
        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID("Australia/NSW"));
        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);
        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);
        try{ assertTrue("Should be standard time", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse("Should be daylight time", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        
        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);
        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);
        try{ assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());                               }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));                                          /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testBug2182444_ausNSW$catena_6() {
        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID("Australia/NSW"));
        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);
        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);
        try{ assertTrue("Should be standard time", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse("Should be daylight time", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        
        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);
        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);
        try{ assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());         /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testBug2182444_ausNSW$catena_7() {
        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID("Australia/NSW"));
        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);
        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);
        try{ assertTrue("Should be standard time", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse("Should be daylight time", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        
        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);
        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);
        try{ assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));                                            /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testBug2182444_ausNSW$catena_8() {
        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID("Australia/NSW"));
        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);
        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);
        try{ assertTrue("Should be standard time", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFalse("Should be daylight time", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        
        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);
        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);
        try{ assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());           /***** ORIGINAL ASSERTION IS HERE *****/
    }
trace file: src/test/java/org/joda/time/TestDateTimeZoneCutover.java
new test num: 35
ori test num: 0
pattern: 000000000
patches are written to file
running tests...
used time: Finished in 40.57 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
processed: 000000000
pattern: 000000001
try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000001
pattern: 000000010
try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 29.64 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
No new failing tests but only 1 hunk
processed: 000000010
pattern: 000000100
try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000100
pattern: 000001000
try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000001000
pattern: 000010000
try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000010000
pattern: 000100000
try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000100000
pattern: 001000000
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001000000
pattern: 010000000
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000
pattern: 100000000
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

patches are written to file
running tests...
used time: Finished in 31.45 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
No new failing tests but only 1 hunk
processed: 100000000
pattern: 000000011
try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000011
pattern: 000000101
try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000101
pattern: 000000110
try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000110
pattern: 000001001
try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000001001
pattern: 000001010
try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000001010
pattern: 000001100
try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000001100
pattern: 000010001
try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000010001
pattern: 000010010
try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000010010
pattern: 000010100
try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000010100
pattern: 000011000
try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000011000
pattern: 000100001
try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000100001
pattern: 000100010
try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000100010
pattern: 000100100
try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000100100
pattern: 000101000
try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000101000
pattern: 000110000
try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000110000
pattern: 001000001
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001000001
pattern: 001000010
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001000010
pattern: 001000100
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001000100
pattern: 001001000
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001001000
pattern: 001010000
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001010000
pattern: 001100000
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001100000
pattern: 010000001
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000001
pattern: 010000010
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000010
pattern: 010000100
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000100
pattern: 010001000
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010001000
pattern: 010010000
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010010000
pattern: 010100000
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010100000
pattern: 011000000
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011000000
pattern: 100000001
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 35.19 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 100000001
pattern: 100000010
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 36.57 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 100000010
pattern: 100000100
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 37.19 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 100000100
pattern: 100001000
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 36.80 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 100001000
pattern: 100010000
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 37.03 seconds
Failing tests: 0
Can independently fix ['org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1', 'org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7', 'org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1', 'org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1', 'org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1', 'org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1', 'org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8', 'org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3', 'org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5', 'org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6']
select new bug
Pattern: 100010000
new failing tests:
org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
Save found bug
processed: 100010000
pattern: 100100000
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 31.61 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 100100000
pattern: 101000000
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 33.95 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 101000000
pattern: 110000000
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 33.83 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 110000000
pattern: 000000111
try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000111
pattern: 000001011
try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000001011
pattern: 000001101
try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000001101
pattern: 000001110
try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000001110
pattern: 000010011
try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000010011
pattern: 000010101
try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000010101
pattern: 000010110
try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000010110
pattern: 000011001
try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000011001
pattern: 000011010
try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000011010
pattern: 000011100
try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000011100
pattern: 000100011
try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000100011
pattern: 000100101
try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000100101
pattern: 000100110
try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000100110
pattern: 000101001
try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000101001
pattern: 000101010
try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000101010
pattern: 000101100
try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000101100
pattern: 000110001
try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000110001
pattern: 000110010
try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000110010
pattern: 000110100
try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000110100
pattern: 000111000
try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000111000
pattern: 001000011
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001000011
pattern: 001000101
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001000101
pattern: 001000110
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001000110
pattern: 001001001
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001001001
pattern: 001001010
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001001010
pattern: 001001100
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001001100
pattern: 001010001
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001010001
pattern: 001010010
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001010010
pattern: 001010100
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001010100
pattern: 001011000
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001011000
pattern: 001100001
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001100001
pattern: 001100010
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001100010
pattern: 001100100
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001100100
pattern: 001101000
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001101000
pattern: 001110000
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001110000
pattern: 010000011
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000011
pattern: 010000101
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000101
pattern: 010000110
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000110
pattern: 010001001
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010001001
pattern: 010001010
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010001010
pattern: 010001100
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010001100
pattern: 010010001
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010010001
pattern: 010010010
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010010010
pattern: 010010100
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010010100
pattern: 010011000
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010011000
pattern: 010100001
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010100001
pattern: 010100010
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010100010
pattern: 010100100
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010100100
pattern: 010101000
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010101000
pattern: 010110000
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010110000
pattern: 011000001
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011000001
pattern: 011000010
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011000010
pattern: 011000100
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011000100
pattern: 011001000
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011001000
pattern: 011010000
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011010000
pattern: 011100000
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011100000
pattern: 100000011
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 36.43 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 100000011
pattern: 100000101
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 34.04 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 100000101
pattern: 100000110
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 33.38 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 100000110
pattern: 100001001
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 31.43 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 100001001
pattern: 100001010
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 31.04 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 100001010
pattern: 100001100
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 32.94 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 100001100
pattern: 100010001
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 37.69 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 100010001
pattern: 100010010
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 30.84 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 100010010
pattern: 100010100
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 36.31 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 100010100
pattern: 100011000
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 29.82 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 100011000
pattern: 100100001
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 32.74 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 100100001
pattern: 100100010
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 35.98 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 100100010
pattern: 100100100
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 34.17 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 100100100
pattern: 100101000
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 30.38 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 100101000
pattern: 100110000
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 40.90 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 100110000
pattern: 101000001
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 36.00 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 101000001
pattern: 101000010
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 33.48 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 101000010
pattern: 101000100
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 34.40 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 101000100
pattern: 101001000
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 33.39 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 101001000
pattern: 101010000
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 29.56 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 101010000
pattern: 101100000
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 39.78 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 101100000
pattern: 110000001
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 32.68 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 110000001
pattern: 110000010
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 33.02 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 110000010
pattern: 110000100
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 33.58 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 110000100
pattern: 110001000
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 35.62 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 110001000
pattern: 110010000
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 35.11 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 110010000
pattern: 110100000
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 40.56 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 110100000
pattern: 111000000
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 35.19 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 111000000
pattern: 000001111
try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000001111
pattern: 000010111
try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000010111
pattern: 000011011
try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000011011
pattern: 000011101
try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000011101
pattern: 000011110
try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000011110
pattern: 000100111
try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000100111
pattern: 000101011
try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000101011
pattern: 000101101
try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000101101
pattern: 000101110
try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000101110
pattern: 000110011
try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000110011
pattern: 000110101
try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000110101
pattern: 000110110
try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000110110
pattern: 000111001
try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000111001
pattern: 000111010
try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000111010
pattern: 000111100
try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000111100
pattern: 001000111
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001000111
pattern: 001001011
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001001011
pattern: 001001101
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001001101
pattern: 001001110
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001001110
pattern: 001010011
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001010011
pattern: 001010101
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001010101
pattern: 001010110
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001010110
pattern: 001011001
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001011001
pattern: 001011010
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001011010
pattern: 001011100
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001011100
pattern: 001100011
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001100011
pattern: 001100101
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001100101
pattern: 001100110
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001100110
pattern: 001101001
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001101001
pattern: 001101010
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001101010
pattern: 001101100
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001101100
pattern: 001110001
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001110001
pattern: 001110010
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001110010
pattern: 001110100
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001110100
pattern: 001111000
try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001111000
pattern: 010000111
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000111
pattern: 010001011
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010001011
pattern: 010001101
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010001101
pattern: 010001110
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010001110
pattern: 010010011
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010010011
pattern: 010010101
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010010101
pattern: 010010110
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010010110
pattern: 010011001
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010011001
pattern: 010011010
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010011010
pattern: 010011100
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010011100
pattern: 010100011
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010100011
pattern: 010100101
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010100101
pattern: 010100110
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010100110
pattern: 010101001
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010101001
pattern: 010101010
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010101010
pattern: 010101100
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010101100
pattern: 010110001
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010110001
pattern: 010110010
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010110010
pattern: 010110100
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010110100
pattern: 010111000
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010111000
pattern: 011000011
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011000011
pattern: 011000101
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011000101
pattern: 011000110
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011000110
pattern: 011001001
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011001001
pattern: 011001010
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011001010
pattern: 011001100
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011001100
pattern: 011010001
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011010001
pattern: 011010010
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011010010
pattern: 011010100
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011010100
pattern: 011011000
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011011000
pattern: 011100001
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011100001
pattern: 011100010
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011100010
pattern: 011100100
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011100100
pattern: 011101000
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011101000
pattern: 011110000
try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011110000
pattern: 100000111
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 34.27 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 100000111
pattern: 100001011
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 37.01 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 100001011
pattern: 100001101
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 35.60 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 100001101
pattern: 100001110
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 37.71 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 100001110
pattern: 100010011
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 31.39 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 100010011
pattern: 100010101
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 34.28 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 100010101
pattern: 100010110
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 36.54 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 100010110
pattern: 100011001
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 34.20 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 100011001
pattern: 100011010
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 36.68 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 100011010
pattern: 100011100
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 35.88 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 100011100
pattern: 100100011
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 35.04 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 100100011
pattern: 100100101
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 36.16 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 100100101
pattern: 100100110
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 36.76 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 100100110
pattern: 100101001
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 36.95 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 100101001
pattern: 100101010
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 34.90 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 100101010
pattern: 100101100
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 33.15 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 100101100
pattern: 100110001
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 36.24 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 100110001
pattern: 100110010
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 37.77 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 100110010
pattern: 100110100
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 34.33 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 100110100
pattern: 100111000
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 35.37 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 100111000
pattern: 101000011
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 34.65 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 101000011
pattern: 101000101
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 33.82 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 101000101
pattern: 101000110
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 34.31 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 101000110
pattern: 101001001
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 30.89 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 101001001
pattern: 101001010
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 33.99 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 101001010
pattern: 101001100
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 34.86 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 101001100
pattern: 101010001
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 38.98 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 101010001
pattern: 101010010
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 34.61 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 101010010
pattern: 101010100
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 31.83 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 101010100
pattern: 101011000
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 32.39 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 101011000
pattern: 101100001
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 31.94 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 101100001
pattern: 101100010
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 34.59 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 101100010
pattern: 101100100
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 34.36 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 101100100
pattern: 101101000
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 31.64 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 101101000
pattern: 101110000
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 2
replace from 448 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 32.15 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 101110000
pattern: 110000011
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 35.00 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 110000011
pattern: 110000101
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 33.22 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 110000101
pattern: 110000110
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 30.07 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 110000110
pattern: 110001001
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 32.70 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 110001001
pattern: 110001010
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 39.16 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 110001010
pattern: 110001100
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 36.81 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 110001100
pattern: 110010001
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 33.10 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 110010001
pattern: 110010010
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 38.14 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 110010010
pattern: 110010100
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 33.48 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 110010100
pattern: 110011000
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 4
replace from 467 with range 1 to
            long result = iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 35.82 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 110011000
pattern: 110100001
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 8
replace from 75 with range 1 to
        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 34.22 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 110100001
pattern: 110100010
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 7
replace from 540 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 35.47 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 110100010
pattern: 110100100
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 6
replace from 528 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
used time: Finished in 35.52 seconds
Failing tests: 10
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8
	org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1
	org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5
	org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6
	org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1
Can independently fix []
Could not fix independently
processed: 110100100
pattern: 110101000
try to fix hunk: 0
insert before 936 with     public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
        int offsetOriginal = getOffset(originalInstantUTC);
        long instantUTC = instantLocal - offsetOriginal;
        int offsetLocalFromOriginal = getOffset(instantUTC);
        if (offsetLocalFromOriginal == offsetOriginal) {
            return instantUTC;
        }
        return convertLocalToUTC(instantLocal, strict);
    }

try to fix hunk: 1
replace from 436 with range 1 to
               return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 3
replace from 460 with range 1 to
                return iZone.convertLocalToUTC(localInstant, false, instant);

try to fix hunk: 5
replace from 481 with range 1 to
            return iZone.convertLocalToUTC(localInstant, false, instant);

patches are written to file
running tests...
EXCEPTION: Inside Exception generator.run() timeout
Traceback (most recent call last):
  File "run.py", line 30, in task
    generator.run()
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 82, in new_function
    return function(*args, **kwargs)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 83, in run
    self._run()
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 109, in _run
    self.taskSingleHunk(task)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 138, in taskSingleHunk
    failure = util.get_failing_tests(self.path, self.build_dir)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/util.py", line 46, in get_failing_tests
    result = runCommand(['defects4j', 'test', '-w', '{}'.format(path)], timeout=timeout)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/util.py", line 9, in runCommand
    finished = subprocess.run(cmd, capture_output=True, cwd=cwd, timeout=timeout)
  File "/usr/lib/python3.8/subprocess.py", line 495, in run
    stdout, stderr = process.communicate(input, timeout=timeout)
  File "/usr/lib/python3.8/subprocess.py", line 1028, in communicate
    stdout, stderr = self._communicate(input, endtime, timeout)
  File "/usr/lib/python3.8/subprocess.py", line 1868, in _communicate
    ready = selector.select(timeout)
  File "/usr/lib/python3.8/selectors.py", line 415, in select
    fd_event_list = self._selector.poll(timeout)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 69, in handler
    _raise_exception(timeout_exception, exception_message)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 47, in _raise_exception
    raise exception(exception_message)
TimeoutError: generator.run() timeout

